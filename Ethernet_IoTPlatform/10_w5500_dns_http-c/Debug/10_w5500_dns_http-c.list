
10_w5500_dns_http-c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f64  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  08007104  08007104  00008104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007700  08007700  000090e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007700  08007700  00008700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007708  08007708  000090e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007708  08007708  00008708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800770c  0800770c  0000870c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08007710  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000594c  200000e0  080077f0  000090e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005a2c  080077f0  00009a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000610a  00000000  00000000  00009110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8e  00000000  00000000  0000f21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00010ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004e6  00000000  00000000  00011548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001163d  00000000  00000000  00011a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000094fb  00000000  00000000  0002306b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005aca4  00000000  00000000  0002c566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008720a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002474  00000000  00000000  00087250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000896c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e0 	.word	0x200000e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080070ec 	.word	0x080070ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e4 	.word	0x200000e4
 80001dc:	080070ec 	.word	0x080070ec

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <pa1_adc_init>:
#define CR2_CONT	 (1U<<1)
#define CR2_SWSTART	  (1U<<30)
#define SR_EOC		  (1U<<1)

void pa1_adc_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/****Configure the ADC GPIO Pin**/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b14      	ldr	r3, [pc, #80]	@ (8000308 <pa1_adc_init+0x58>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b8:	4a13      	ldr	r2, [pc, #76]	@ (8000308 <pa1_adc_init+0x58>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA1 mode to analog mode*/
	GPIOA->MODER |=(1U<<2);
 80002c0:	4b12      	ldr	r3, [pc, #72]	@ (800030c <pa1_adc_init+0x5c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a11      	ldr	r2, [pc, #68]	@ (800030c <pa1_adc_init+0x5c>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<3);
 80002cc:	4b0f      	ldr	r3, [pc, #60]	@ (800030c <pa1_adc_init+0x5c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0e      	ldr	r2, [pc, #56]	@ (800030c <pa1_adc_init+0x5c>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6013      	str	r3, [r2, #0]

	/****Configure the ADC Module**/
	/*Enable clock access to the ADC module*/
	RCC->APB2ENR |=ADC1EN;
 80002d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <pa1_adc_init+0x58>)
 80002da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000308 <pa1_adc_init+0x58>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002e2:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Set conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 80002e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000310 <pa1_adc_init+0x60>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Set conversion sequence length*/
	ADC1->SQR1 = AD_SEQ_LEN_1;
 80002ea:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <pa1_adc_init+0x60>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |=CR2_ADCON;
 80002f0:	4b07      	ldr	r3, [pc, #28]	@ (8000310 <pa1_adc_init+0x60>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a06      	ldr	r2, [pc, #24]	@ (8000310 <pa1_adc_init+0x60>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6093      	str	r3, [r2, #8]

}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40023800 	.word	0x40023800
 800030c:	40020000 	.word	0x40020000
 8000310:	40012000 	.word	0x40012000

08000314 <start_conversion>:


void start_conversion(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	/*Enable continuous conversion*/
	ADC1->CR2 |=CR2_CONT;
 8000318:	4b08      	ldr	r3, [pc, #32]	@ (800033c <start_conversion+0x28>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a07      	ldr	r2, [pc, #28]	@ (800033c <start_conversion+0x28>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6093      	str	r3, [r2, #8]

	/*Start ADC conversion*/
	ADC1->CR2 |=CR2_SWSTART;
 8000324:	4b05      	ldr	r3, [pc, #20]	@ (800033c <start_conversion+0x28>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4a04      	ldr	r2, [pc, #16]	@ (800033c <start_conversion+0x28>)
 800032a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800032e:	6093      	str	r3, [r2, #8]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40012000 	.word	0x40012000

08000340 <adc_read>:


uint32_t adc_read(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	/*Wait for conversion to be complete*/
	while(!(ADC1->SR & SR_EOC)){}
 8000344:	bf00      	nop
 8000346:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <adc_read+0x20>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f003 0302 	and.w	r3, r3, #2
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0f9      	beq.n	8000346 <adc_read+0x6>

	/*Read converted value*/
	return (ADC1->DR);
 8000352:	4b03      	ldr	r3, [pc, #12]	@ (8000360 <adc_read+0x20>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000356:	4618      	mov	r0, r3
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40012000 	.word	0x40012000

08000364 <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000368:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <led_init+0x34>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036c:	4a0a      	ldr	r2, [pc, #40]	@ (8000398 <led_init+0x34>)
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 8000374:	4b09      	ldr	r3, [pc, #36]	@ (800039c <led_init+0x38>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a08      	ldr	r2, [pc, #32]	@ (800039c <led_init+0x38>)
 800037a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800037e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <led_init+0x38>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a05      	ldr	r2, [pc, #20]	@ (800039c <led_init+0x38>)
 8000386:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800038a:	6013      	str	r3, [r2, #0]
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40023800 	.word	0x40023800
 800039c:	40020000 	.word	0x40020000

080003a0 <button_init>:
	GPIOA->ODR &=~LED_PIN;

}

void button_init(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
	/*Enable clock access to PORTC*/
	RCC->AHB1ENR |=GPIOCEN;
 80003a4:	4b0b      	ldr	r3, [pc, #44]	@ (80003d4 <button_init+0x34>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a8:	4a0a      	ldr	r2, [pc, #40]	@ (80003d4 <button_init+0x34>)
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PC13 as an input pin*/
	GPIOC->MODER &=~(1U<<26);
 80003b0:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <button_init+0x38>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a08      	ldr	r2, [pc, #32]	@ (80003d8 <button_init+0x38>)
 80003b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80003ba:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <button_init+0x38>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a05      	ldr	r2, [pc, #20]	@ (80003d8 <button_init+0x38>)
 80003c2:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80003c6:	6013      	str	r3, [r2, #0]

}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40023800 	.word	0x40023800
 80003d8:	40020800 	.word	0x40020800

080003dc <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	1c5a      	adds	r2, r3, #1
 80003e8:	607a      	str	r2, [r7, #4]
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	021b      	lsls	r3, r3, #8
 80003ee:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	461a      	mov	r2, r3
 80003f6:	89fb      	ldrh	r3, [r7, #14]
 80003f8:	4413      	add	r3, r2
 80003fa:	81fb      	strh	r3, [r7, #14]
	return i;
 80003fc:	89fb      	ldrh	r3, [r7, #14]
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr

0800040a <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 800040a:	b480      	push	{r7}
 800040c:	b083      	sub	sp, #12
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
 8000412:	460b      	mov	r3, r1
 8000414:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 8000416:	887b      	ldrh	r3, [r7, #2]
 8000418:	0a1b      	lsrs	r3, r3, #8
 800041a:	b299      	uxth	r1, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	1c5a      	adds	r2, r3, #1
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	b2ca      	uxtb	r2, r1
 8000424:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	1c5a      	adds	r2, r3, #1
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	887a      	ldrh	r2, [r7, #2]
 800042e:	b2d2      	uxtb	r2, r2
 8000430:	701a      	strb	r2, [r3, #0]
	return s;
 8000432:	687b      	ldr	r3, [r7, #4]
}
 8000434:	4618      	mov	r0, r3
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 8000440:	b480      	push	{r7}
 8000442:	b08b      	sub	sp, #44	@ 0x2c
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
 800044c:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 800044e:	2300      	movs	r3, #0
 8000450:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 8000452:	2300      	movs	r3, #0
 8000454:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]

	cp = compressed;
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 800045e:	6a3b      	ldr	r3, [r7, #32]
 8000460:	1c5a      	adds	r2, r3, #1
 8000462:	623a      	str	r2, [r7, #32]
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (!indirect) clen++;
 8000468:	69bb      	ldr	r3, [r7, #24]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d102      	bne.n	8000474 <parse_name+0x34>
 800046e:	69fb      	ldr	r3, [r7, #28]
 8000470:	3301      	adds	r3, #1
 8000472:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8000474:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000476:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800047a:	2bc0      	cmp	r3, #192	@ 0xc0
 800047c:	d117      	bne.n	80004ae <parse_name+0x6e>
		{
			if (!indirect)
 800047e:	69bb      	ldr	r3, [r7, #24]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d102      	bne.n	800048a <parse_name+0x4a>
				clen++;
 8000484:	69fb      	ldr	r3, [r7, #28]
 8000486:	3301      	adds	r3, #1
 8000488:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 800048a:	2301      	movs	r3, #1
 800048c:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 800048e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000490:	021b      	lsls	r3, r3, #8
 8000492:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8000496:	6a3a      	ldr	r2, [r7, #32]
 8000498:	7812      	ldrb	r2, [r2, #0]
 800049a:	4413      	add	r3, r2
 800049c:	461a      	mov	r2, r3
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	4413      	add	r3, r2
 80004a2:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 80004a4:	6a3b      	ldr	r3, [r7, #32]
 80004a6:	1c5a      	adds	r2, r3, #1
 80004a8:	623a      	str	r2, [r7, #32]
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (slen == 0)	/* zero length == all done */
 80004ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d02b      	beq.n	800050c <parse_name+0xcc>
			break;

		len -= slen + 1;
 80004b4:	887a      	ldrh	r2, [r7, #2]
 80004b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	b29b      	uxth	r3, r3
 80004bc:	3b01      	subs	r3, #1
 80004be:	b29b      	uxth	r3, r3
 80004c0:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 80004c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	da02      	bge.n	80004d0 <parse_name+0x90>
 80004ca:	f04f 33ff 	mov.w	r3, #4294967295
 80004ce:	e038      	b.n	8000542 <parse_name+0x102>

		if (!indirect) clen += slen;
 80004d0:	69bb      	ldr	r3, [r7, #24]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d10c      	bne.n	80004f0 <parse_name+0xb0>
 80004d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80004d8:	69fa      	ldr	r2, [r7, #28]
 80004da:	4413      	add	r3, r2
 80004dc:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 80004de:	e007      	b.n	80004f0 <parse_name+0xb0>
 80004e0:	6a3a      	ldr	r2, [r7, #32]
 80004e2:	1c53      	adds	r3, r2, #1
 80004e4:	623b      	str	r3, [r7, #32]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	1c59      	adds	r1, r3, #1
 80004ea:	6079      	str	r1, [r7, #4]
 80004ec:	7812      	ldrb	r2, [r2, #0]
 80004ee:	701a      	strb	r2, [r3, #0]
 80004f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80004f2:	1e5a      	subs	r2, r3, #1
 80004f4:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1f2      	bne.n	80004e0 <parse_name+0xa0>
		*buf++ = '.';
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	607a      	str	r2, [r7, #4]
 8000500:	222e      	movs	r2, #46	@ 0x2e
 8000502:	701a      	strb	r2, [r3, #0]
		nseg++;
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	3301      	adds	r3, #1
 8000508:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 800050a:	e7a8      	b.n	800045e <parse_name+0x1e>
			break;
 800050c:	bf00      	nop
	}

	if (nseg == 0)
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d10a      	bne.n	800052a <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	607a      	str	r2, [r7, #4]
 800051a:	222e      	movs	r2, #46	@ 0x2e
 800051c:	701a      	strb	r2, [r3, #0]
		len--;
 800051e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000522:	b29b      	uxth	r3, r3
 8000524:	3b01      	subs	r3, #1
 8000526:	b29b      	uxth	r3, r3
 8000528:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	1c5a      	adds	r2, r3, #1
 800052e:	607a      	str	r2, [r7, #4]
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
	len--;
 8000534:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000538:	b29b      	uxth	r3, r3
 800053a:	3b01      	subs	r3, #1
 800053c:	b29b      	uxth	r3, r3
 800053e:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 8000540:	69fb      	ldr	r3, [r7, #28]
}
 8000542:	4618      	mov	r0, r3
 8000544:	372c      	adds	r7, #44	@ 0x2c
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b0b4      	sub	sp, #208	@ 0xd0
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8000558:	f107 020c 	add.w	r2, r7, #12
 800055c:	23c0      	movs	r3, #192	@ 0xc0
 800055e:	6839      	ldr	r1, [r7, #0]
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f7ff ff6d 	bl	8000440 <parse_name>
 8000566:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc


	if (len == -1) return 0;
 800056a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800056e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000572:	d101      	bne.n	8000578 <dns_question+0x2a>
 8000574:	2300      	movs	r3, #0
 8000576:	e00b      	b.n	8000590 <dns_question+0x42>

	cp += len;
 8000578:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	4413      	add	r3, r2
 8000580:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	3302      	adds	r3, #2
 8000586:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	3302      	adds	r3, #2
 800058c:	603b      	str	r3, [r7, #0]

	return cp;
 800058e:	683b      	ldr	r3, [r7, #0]
}
 8000590:	4618      	mov	r0, r3
 8000592:	37d0      	adds	r7, #208	@ 0xd0
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b0b6      	sub	sp, #216	@ 0xd8
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 80005a4:	f107 0210 	add.w	r2, r7, #16
 80005a8:	23c0      	movs	r3, #192	@ 0xc0
 80005aa:	68b9      	ldr	r1, [r7, #8]
 80005ac:	68f8      	ldr	r0, [r7, #12]
 80005ae:	f7ff ff47 	bl	8000440 <parse_name>
 80005b2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

	if (len == -1) return 0;
 80005b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80005ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005be:	d101      	bne.n	80005c4 <dns_answer+0x2c>
 80005c0:	2300      	movs	r3, #0
 80005c2:	e0f9      	b.n	80007b8 <dns_answer+0x220>

	cp += len;
 80005c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80005c8:	68ba      	ldr	r2, [r7, #8]
 80005ca:	4413      	add	r3, r2
 80005cc:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 80005ce:	68b8      	ldr	r0, [r7, #8]
 80005d0:	f7ff ff04 	bl	80003dc <get16>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
	cp += 2;		/* type */
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	3302      	adds	r3, #2
 80005de:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	3302      	adds	r3, #2
 80005e4:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	3304      	adds	r3, #4
 80005ea:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	3302      	adds	r3, #2
 80005f0:	60bb      	str	r3, [r7, #8]


	switch (type)
 80005f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80005f6:	2b10      	cmp	r3, #16
 80005f8:	f000 80da 	beq.w	80007b0 <dns_answer+0x218>
 80005fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000600:	2b10      	cmp	r3, #16
 8000602:	f300 80d7 	bgt.w	80007b4 <dns_answer+0x21c>
 8000606:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800060a:	2b0f      	cmp	r3, #15
 800060c:	d07d      	beq.n	800070a <dns_answer+0x172>
 800060e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000612:	2b0f      	cmp	r3, #15
 8000614:	f300 80ce 	bgt.w	80007b4 <dns_answer+0x21c>
 8000618:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800061c:	2b0c      	cmp	r3, #12
 800061e:	dc26      	bgt.n	800066e <dns_answer+0xd6>
 8000620:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000624:	2b00      	cmp	r3, #0
 8000626:	f340 80c5 	ble.w	80007b4 <dns_answer+0x21c>
 800062a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800062e:	2201      	movs	r2, #1
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	f241 32a4 	movw	r2, #5028	@ 0x13a4
 8000638:	401a      	ands	r2, r3
 800063a:	2a00      	cmp	r2, #0
 800063c:	bf14      	ite	ne
 800063e:	2201      	movne	r2, #1
 8000640:	2200      	moveq	r2, #0
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	2a00      	cmp	r2, #0
 8000646:	d133      	bne.n	80006b0 <dns_answer+0x118>
 8000648:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 800064c:	2a00      	cmp	r2, #0
 800064e:	bf14      	ite	ne
 8000650:	2201      	movne	r2, #1
 8000652:	2200      	moveq	r2, #0
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	2a00      	cmp	r2, #0
 8000658:	d170      	bne.n	800073c <dns_answer+0x1a4>
 800065a:	f003 0302 	and.w	r3, r3, #2
 800065e:	2b00      	cmp	r3, #0
 8000660:	bf14      	ite	ne
 8000662:	2301      	movne	r3, #1
 8000664:	2300      	moveq	r3, #0
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d105      	bne.n	8000678 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 800066c:	e0a2      	b.n	80007b4 <dns_answer+0x21c>
	switch (type)
 800066e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000672:	2b0d      	cmp	r3, #13
 8000674:	d032      	beq.n	80006dc <dns_answer+0x144>
		break;
 8000676:	e09d      	b.n	80007b4 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	60ba      	str	r2, [r7, #8]
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	60ba      	str	r2, [r7, #8]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	3201      	adds	r2, #1
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1c5a      	adds	r2, r3, #1
 8000696:	60ba      	str	r2, [r7, #8]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	3202      	adds	r2, #2
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	1c5a      	adds	r2, r3, #1
 80006a4:	60ba      	str	r2, [r7, #8]
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	3203      	adds	r2, #3
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	7013      	strb	r3, [r2, #0]
		break;
 80006ae:	e082      	b.n	80007b6 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 80006b0:	f107 0210 	add.w	r2, r7, #16
 80006b4:	23c0      	movs	r3, #192	@ 0xc0
 80006b6:	68b9      	ldr	r1, [r7, #8]
 80006b8:	68f8      	ldr	r0, [r7, #12]
 80006ba:	f7ff fec1 	bl	8000440 <parse_name>
 80006be:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 80006c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80006c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ca:	d101      	bne.n	80006d0 <dns_answer+0x138>
 80006cc:	2300      	movs	r3, #0
 80006ce:	e073      	b.n	80007b8 <dns_answer+0x220>
		cp += len;
 80006d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	4413      	add	r3, r2
 80006d8:	60bb      	str	r3, [r7, #8]
		break;
 80006da:	e06c      	b.n	80007b6 <dns_answer+0x21e>
		len = *cp++;
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	60ba      	str	r2, [r7, #8]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 80006e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	4413      	add	r3, r2
 80006f0:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	1c5a      	adds	r2, r3, #1
 80006f6:	60ba      	str	r2, [r7, #8]
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		cp += len;
 80006fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	4413      	add	r3, r2
 8000706:	60bb      	str	r3, [r7, #8]
		break;
 8000708:	e055      	b.n	80007b6 <dns_answer+0x21e>
		cp += 2;
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	3302      	adds	r3, #2
 800070e:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8000710:	f107 0210 	add.w	r2, r7, #16
 8000714:	23c0      	movs	r3, #192	@ 0xc0
 8000716:	68b9      	ldr	r1, [r7, #8]
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f7ff fe91 	bl	8000440 <parse_name>
 800071e:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8000722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800072a:	d101      	bne.n	8000730 <dns_answer+0x198>
 800072c:	2300      	movs	r3, #0
 800072e:	e043      	b.n	80007b8 <dns_answer+0x220>
		cp += len;
 8000730:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000734:	68ba      	ldr	r2, [r7, #8]
 8000736:	4413      	add	r3, r2
 8000738:	60bb      	str	r3, [r7, #8]
		break;
 800073a:	e03c      	b.n	80007b6 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 800073c:	f107 0210 	add.w	r2, r7, #16
 8000740:	23c0      	movs	r3, #192	@ 0xc0
 8000742:	68b9      	ldr	r1, [r7, #8]
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f7ff fe7b 	bl	8000440 <parse_name>
 800074a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 800074e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000756:	d101      	bne.n	800075c <dns_answer+0x1c4>
 8000758:	2300      	movs	r3, #0
 800075a:	e02d      	b.n	80007b8 <dns_answer+0x220>
		cp += len;
 800075c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000760:	68ba      	ldr	r2, [r7, #8]
 8000762:	4413      	add	r3, r2
 8000764:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 8000766:	f107 0210 	add.w	r2, r7, #16
 800076a:	23c0      	movs	r3, #192	@ 0xc0
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f7ff fe66 	bl	8000440 <parse_name>
 8000774:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		if (len == -1) return 0;
 8000778:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800077c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000780:	d101      	bne.n	8000786 <dns_answer+0x1ee>
 8000782:	2300      	movs	r3, #0
 8000784:	e018      	b.n	80007b8 <dns_answer+0x220>
		cp += len;
 8000786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	4413      	add	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	3304      	adds	r3, #4
 8000794:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	3304      	adds	r3, #4
 800079a:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	3304      	adds	r3, #4
 80007a0:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	3304      	adds	r3, #4
 80007a6:	60bb      	str	r3, [r7, #8]
		cp += 4;
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	3304      	adds	r3, #4
 80007ac:	60bb      	str	r3, [r7, #8]
		break;
 80007ae:	e002      	b.n	80007b6 <dns_answer+0x21e>
		break;
 80007b0:	bf00      	nop
 80007b2:	e000      	b.n	80007b6 <dns_answer+0x21e>
		break;
 80007b4:	bf00      	nop
	}

	return cp;
 80007b6:	68bb      	ldr	r3, [r7, #8]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	37d8      	adds	r7, #216	@ 0xd8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 80007d0:	2212      	movs	r2, #18
 80007d2:	2100      	movs	r1, #0
 80007d4:	68f8      	ldr	r0, [r7, #12]
 80007d6:	f005 fd25 	bl	8006224 <memset>

	pdhdr->id = get16(&msg[0]);
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	f7ff fdfe 	bl	80003dc <get16>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	3302      	adds	r3, #2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff fdf5 	bl	80003dc <get16>
 80007f2:	4603      	mov	r3, r0
 80007f4:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 80007f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da02      	bge.n	8000804 <parseDNSMSG+0x44>
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2201      	movs	r2, #1
 8000802:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8000804:	8a7b      	ldrh	r3, [r7, #18]
 8000806:	0adb      	lsrs	r3, r3, #11
 8000808:	b29b      	uxth	r3, r3
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f003 030f 	and.w	r3, r3, #15
 8000810:	b2da      	uxtb	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 8000816:	8a7b      	ldrh	r3, [r7, #18]
 8000818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800081c:	2b00      	cmp	r3, #0
 800081e:	d002      	beq.n	8000826 <parseDNSMSG+0x66>
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2201      	movs	r2, #1
 8000824:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8000826:	8a7b      	ldrh	r3, [r7, #18]
 8000828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800082c:	2b00      	cmp	r3, #0
 800082e:	d002      	beq.n	8000836 <parseDNSMSG+0x76>
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2201      	movs	r2, #1
 8000834:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 8000836:	8a7b      	ldrh	r3, [r7, #18]
 8000838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800083c:	2b00      	cmp	r3, #0
 800083e:	d002      	beq.n	8000846 <parseDNSMSG+0x86>
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2201      	movs	r2, #1
 8000844:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 8000846:	8a7b      	ldrh	r3, [r7, #18]
 8000848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <parseDNSMSG+0x96>
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	2201      	movs	r2, #1
 8000854:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 8000856:	8a7b      	ldrh	r3, [r7, #18]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	f003 030f 	and.w	r3, r3, #15
 800085e:	b2da      	uxtb	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	3304      	adds	r3, #4
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fdb7 	bl	80003dc <get16>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 8000876:	697b      	ldr	r3, [r7, #20]
 8000878:	3306      	adds	r3, #6
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fdae 	bl	80003dc <get16>
 8000880:	4603      	mov	r3, r0
 8000882:	461a      	mov	r2, r3
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	3308      	adds	r3, #8
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fda5 	bl	80003dc <get16>
 8000892:	4603      	mov	r3, r0
 8000894:	461a      	mov	r2, r3
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	330a      	adds	r3, #10
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fd9c 	bl	80003dc <get16>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	330c      	adds	r3, #12
 80008b0:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	83fb      	strh	r3, [r7, #30]
 80008b6:	e00d      	b.n	80008d4 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 80008b8:	69b9      	ldr	r1, [r7, #24]
 80008ba:	6978      	ldr	r0, [r7, #20]
 80008bc:	f7ff fe47 	bl	800054e <dns_question>
 80008c0:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80008c2:	69bb      	ldr	r3, [r7, #24]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <parseDNSMSG+0x10e>
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	e03b      	b.n	8000946 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 80008ce:	8bfb      	ldrh	r3, [r7, #30]
 80008d0:	3301      	adds	r3, #1
 80008d2:	83fb      	strh	r3, [r7, #30]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	895b      	ldrh	r3, [r3, #10]
 80008d8:	8bfa      	ldrh	r2, [r7, #30]
 80008da:	429a      	cmp	r2, r3
 80008dc:	d3ec      	bcc.n	80008b8 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 80008de:	2300      	movs	r3, #0
 80008e0:	83fb      	strh	r3, [r7, #30]
 80008e2:	e00e      	b.n	8000902 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	69b9      	ldr	r1, [r7, #24]
 80008e8:	6978      	ldr	r0, [r7, #20]
 80008ea:	f7ff fe55 	bl	8000598 <dns_answer>
 80008ee:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d102      	bne.n	80008fc <parseDNSMSG+0x13c>
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	e024      	b.n	8000946 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 80008fc:	8bfb      	ldrh	r3, [r7, #30]
 80008fe:	3301      	adds	r3, #1
 8000900:	83fb      	strh	r3, [r7, #30]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	899b      	ldrh	r3, [r3, #12]
 8000906:	8bfa      	ldrh	r2, [r7, #30]
 8000908:	429a      	cmp	r2, r3
 800090a:	d3eb      	bcc.n	80008e4 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 800090c:	2300      	movs	r3, #0
 800090e:	83fb      	strh	r3, [r7, #30]
 8000910:	e002      	b.n	8000918 <parseDNSMSG+0x158>
 8000912:	8bfb      	ldrh	r3, [r7, #30]
 8000914:	3301      	adds	r3, #1
 8000916:	83fb      	strh	r3, [r7, #30]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	89db      	ldrh	r3, [r3, #14]
 800091c:	8bfa      	ldrh	r2, [r7, #30]
 800091e:	429a      	cmp	r2, r3
 8000920:	d3f7      	bcc.n	8000912 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	83fb      	strh	r3, [r7, #30]
 8000926:	e002      	b.n	800092e <parseDNSMSG+0x16e>
 8000928:	8bfb      	ldrh	r3, [r7, #30]
 800092a:	3301      	adds	r3, #1
 800092c:	83fb      	strh	r3, [r7, #30]
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	8a1b      	ldrh	r3, [r3, #16]
 8000932:	8bfa      	ldrh	r2, [r7, #30]
 8000934:	429a      	cmp	r2, r3
 8000936:	d3f7      	bcc.n	8000928 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	7a1b      	ldrb	r3, [r3, #8]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d101      	bne.n	8000944 <parseDNSMSG+0x184>
 8000940:	2301      	movs	r3, #1
 8000942:	e000      	b.n	8000946 <parseDNSMSG+0x186>
	else return 0;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3720      	adds	r7, #32
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0b8      	sub	sp, #224	@ 0xe0
 8000954:	af00      	add	r7, sp, #0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	461a      	mov	r2, r3
 800095c:	4603      	mov	r3, r0
 800095e:	81fb      	strh	r3, [r7, #14]
 8000960:	4613      	mov	r3, r2
 8000962:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

	DNS_MSGID++;
 800096a:	4b57      	ldr	r3, [pc, #348]	@ (8000ac8 <dns_makequery+0x178>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	3301      	adds	r3, #1
 8000970:	b29a      	uxth	r2, r3
 8000972:	4b55      	ldr	r3, [pc, #340]	@ (8000ac8 <dns_makequery+0x178>)
 8000974:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 8000976:	4b54      	ldr	r3, [pc, #336]	@ (8000ac8 <dns_makequery+0x178>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000980:	f7ff fd43 	bl	800040a <put16>
 8000984:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8000988:	89fb      	ldrh	r3, [r7, #14]
 800098a:	02db      	lsls	r3, r3, #11
 800098c:	b21b      	sxth	r3, r3
 800098e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000992:	b21b      	sxth	r3, r3
 8000994:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	cp = put16(cp, p);
 8000998:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	@ 0xd4
 800099c:	4619      	mov	r1, r3
 800099e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80009a2:	f7ff fd32 	bl	800040a <put16>
 80009a6:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 1);
 80009aa:	2101      	movs	r1, #1
 80009ac:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80009b0:	f7ff fd2b 	bl	800040a <put16>
 80009b4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 80009b8:	2100      	movs	r1, #0
 80009ba:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80009be:	f7ff fd24 	bl	800040a <put16>
 80009c2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 80009c6:	2100      	movs	r1, #0
 80009c8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80009cc:	f7ff fd1d 	bl	800040a <put16>
 80009d0:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0);
 80009d4:	2100      	movs	r1, #0
 80009d6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80009da:	f7ff fd16 	bl	800040a <put16>
 80009de:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	strcpy(sname, name);
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	68b9      	ldr	r1, [r7, #8]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f005 fcc6 	bl	800637a <strcpy>
	dname = sname;
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	dlen = strlen(dname);
 80009f6:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 80009fa:	f7ff fbfb 	bl	80001f4 <strlen>
 80009fe:	4603      	mov	r3, r0
 8000a00:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8000a04:	212e      	movs	r1, #46	@ 0x2e
 8000a06:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8000a0a:	f005 fc13 	bl	8006234 <strchr>
 8000a0e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8000a12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d006      	beq.n	8000a28 <dns_makequery+0xd8>
 8000a1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	81bb      	strh	r3, [r7, #12]
 8000a26:	e002      	b.n	8000a2e <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 8000a28:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 8000a2c:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 8000a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000a38:	89ba      	ldrh	r2, [r7, #12]
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 8000a3e:	89bb      	ldrh	r3, [r7, #12]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d029      	beq.n	8000a98 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8000a44:	89bb      	ldrh	r3, [r7, #12]
 8000a46:	461a      	mov	r2, r3
 8000a48:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8000a4c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000a50:	f005 fbfd 	bl	800624e <strncpy>
		cp += len;
 8000a54:	89bb      	ldrh	r3, [r7, #12]
 8000a56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000a5a:	4413      	add	r3, r2
 8000a5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		if (cp1 == NULL)
 8000a60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d107      	bne.n	8000a78 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8000a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000a6c:	1c5a      	adds	r2, r3, #1
 8000a6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
			break;
 8000a76:	e010      	b.n	8000a9a <dns_makequery+0x14a>
		}
		dname += len+1;
 8000a78:	89bb      	ldrh	r3, [r7, #12]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000a80:	4413      	add	r3, r2
 8000a82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		dlen -= len+1;
 8000a86:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	@ 0xd6
 8000a8a:	89bb      	ldrh	r3, [r7, #12]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	3b01      	subs	r3, #1
 8000a92:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
		cp1 = strchr(dname, '.');
 8000a96:	e7b5      	b.n	8000a04 <dns_makequery+0xb4>
		if (len == 0) break;
 8000a98:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000aa0:	f7ff fcb3 	bl	800040a <put16>
 8000aa4:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
	cp = put16(cp, 0x0001);				/* class */
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8000aae:	f7ff fcac 	bl	800040a <put16>
 8000ab2:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 8000ab6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	b21b      	sxth	r3, r3
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	37e0      	adds	r7, #224	@ 0xe0
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000102 	.word	0x20000102

08000acc <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <check_DNS_timeout+0x44>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d914      	bls.n	8000b02 <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <check_DNS_timeout+0x44>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8000ade:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <check_DNS_timeout+0x48>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d905      	bls.n	8000af2 <check_DNS_timeout+0x26>
			retry_count = 0;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <check_DNS_timeout+0x48>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8000aec:	f04f 33ff 	mov.w	r3, #4294967295
 8000af0:	e008      	b.n	8000b04 <check_DNS_timeout+0x38>
		}
		retry_count++;
 8000af2:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <check_DNS_timeout+0x48>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <check_DNS_timeout+0x48>)
 8000afc:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000104 	.word	0x20000104
 8000b14:	20000108 	.word	0x20000108

08000b18 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8000b24:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <DNS_init+0x2c>)
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 8000b2a:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <DNS_init+0x30>)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <DNS_init+0x34>)
 8000b32:	f241 1222 	movw	r2, #4386	@ 0x1122
 8000b36:	801a      	strh	r2, [r3, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	20000100 	.word	0x20000100
 8000b48:	200000fc 	.word	0x200000fc
 8000b4c:	20000102 	.word	0x20000102

08000b50 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b08f      	sub	sp, #60	@ 0x3c
 8000b54:	af02      	add	r7, sp, #8
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 8000b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c4c <DNS_run+0xfc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 8000b62:	4b3b      	ldr	r3, [pc, #236]	@ (8000c50 <DNS_run+0x100>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8000b68:	4b3a      	ldr	r3, [pc, #232]	@ (8000c54 <DNS_run+0x104>)
 8000b6a:	7818      	ldrb	r0, [r3, #0]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2102      	movs	r1, #2
 8000b72:	f003 f88d 	bl	8003c90 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 8000b76:	4b38      	ldr	r3, [pc, #224]	@ (8000c58 <DNS_run+0x108>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b7e:	68b9      	ldr	r1, [r7, #8]
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff fee5 	bl	8000950 <dns_makequery>
 8000b86:	4603      	mov	r3, r0
 8000b88:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8000b8a:	4b32      	ldr	r3, [pc, #200]	@ (8000c54 <DNS_run+0x104>)
 8000b8c:	7818      	ldrb	r0, [r3, #0]
 8000b8e:	4b32      	ldr	r3, [pc, #200]	@ (8000c58 <DNS_run+0x108>)
 8000b90:	6819      	ldr	r1, [r3, #0]
 8000b92:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000b94:	2335      	movs	r3, #53	@ 0x35
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 fc45 	bl	8004428 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c54 <DNS_run+0x104>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f004 fa17 	bl	8004fd6 <getSn_RX_RSR>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000bac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d029      	beq.n	8000c06 <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8000bb2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000bb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bb8:	d902      	bls.n	8000bc0 <DNS_run+0x70>
 8000bba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bbe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8000bc0:	4b24      	ldr	r3, [pc, #144]	@ (8000c54 <DNS_run+0x104>)
 8000bc2:	7818      	ldrb	r0, [r3, #0]
 8000bc4:	4b24      	ldr	r3, [pc, #144]	@ (8000c58 <DNS_run+0x108>)
 8000bc6:	6819      	ldr	r1, [r3, #0]
 8000bc8:	f107 0414 	add.w	r4, r7, #20
 8000bcc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000bce:	f107 0312 	add.w	r3, r7, #18
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	4623      	mov	r3, r4
 8000bd6:	f003 fd5b 	bl	8004690 <recvfrom>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8000bde:	4b1e      	ldr	r3, [pc, #120]	@ (8000c58 <DNS_run+0x108>)
 8000be0:	6819      	ldr	r1, [r3, #0]
 8000be2:	f107 0318 	add.w	r3, r7, #24
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fde9 	bl	80007c0 <parseDNSMSG>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			break;
 8000bf4:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 8000bf6:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <DNS_run+0x104>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f003 f95c 	bl	8003eb8 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8000c00:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8000c04:	e01e      	b.n	8000c44 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 8000c06:	f7ff ff61 	bl	8000acc <check_DNS_timeout>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		if (ret_check_timeout < 0) {
 8000c10:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	da06      	bge.n	8000c26 <DNS_run+0xd6>
			close(DNS_SOCKET);
 8000c18:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <DNS_run+0x104>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f003 f94b 	bl	8003eb8 <close>
			return 0; // timeout occurred
 8000c22:	2300      	movs	r3, #0
 8000c24:	e00e      	b.n	8000c44 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 8000c26:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1b7      	bne.n	8000b9e <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8000c2e:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <DNS_run+0x104>)
 8000c30:	7818      	ldrb	r0, [r3, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <DNS_run+0x108>)
 8000c34:	6819      	ldr	r1, [r3, #0]
 8000c36:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000c38:	2335      	movs	r3, #53	@ 0x35
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 fbf3 	bl	8004428 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8000c42:	e7ac      	b.n	8000b9e <DNS_run+0x4e>
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3734      	adds	r7, #52	@ 0x34
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd90      	pop	{r4, r7, pc}
 8000c4c:	20000108 	.word	0x20000108
 8000c50:	20000104 	.word	0x20000104
 8000c54:	20000100 	.word	0x20000100
 8000c58:	200000fc 	.word	0x200000fc

08000c5c <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 8000c60:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <fpu_enable+0x50>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c66:	4a11      	ldr	r2, [pc, #68]	@ (8000cac <fpu_enable+0x50>)
 8000c68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<21);
 8000c70:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <fpu_enable+0x50>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c76:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <fpu_enable+0x50>)
 8000c78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<22);
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <fpu_enable+0x50>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c86:	4a09      	ldr	r2, [pc, #36]	@ (8000cac <fpu_enable+0x50>)
 8000c88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |=(1<<23);
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <fpu_enable+0x50>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <fpu_enable+0x50>)
 8000c98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <httpc_init>:
uint16_t get_httpc_any_port(void);

/* Public & Private functions ------------------------------------------------*/

uint8_t httpc_init(uint8_t sock, uint8_t * ip, uint16_t port, uint8_t * sbuf, uint8_t * rbuf)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4603      	mov	r3, r0
 8000cbc:	73fb      	strb	r3, [r7, #15]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = HTTPC_FALSE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	75fb      	strb	r3, [r7, #23]

	if(sock <= _WIZCHIP_SOCK_NUM_)
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d81e      	bhi.n	8000d0a <httpc_init+0x5a>
	{
		// Hardware socket number for HTTP client (0 ~ 7)
		httpsock = sock;
 8000ccc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000cd0:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <httpc_init+0x68>)
 8000cd2:	701a      	strb	r2, [r3, #0]

		// Shared buffers: HTTP Send / Recevice
		httpc_send_buf = sbuf;
 8000cd4:	4a11      	ldr	r2, [pc, #68]	@ (8000d1c <httpc_init+0x6c>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
		httpc_recv_buf = rbuf;
 8000cda:	4a11      	ldr	r2, [pc, #68]	@ (8000d20 <httpc_init+0x70>)
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
 8000cde:	6013      	str	r3, [r2, #0]

		// Destination IP address and Port number
		// (Destination = HTTP server)
		dest_ip[0] = ip[0];
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <httpc_init+0x74>)
 8000ce6:	701a      	strb	r2, [r3, #0]
		dest_ip[1] = ip[1];
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	785a      	ldrb	r2, [r3, #1]
 8000cec:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <httpc_init+0x74>)
 8000cee:	705a      	strb	r2, [r3, #1]
		dest_ip[2] = ip[2];
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	789a      	ldrb	r2, [r3, #2]
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <httpc_init+0x74>)
 8000cf6:	709a      	strb	r2, [r3, #2]
		dest_ip[3] = ip[3];
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	78da      	ldrb	r2, [r3, #3]
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <httpc_init+0x74>)
 8000cfe:	70da      	strb	r2, [r3, #3]
		dest_port = port;
 8000d00:	4a09      	ldr	r2, [pc, #36]	@ (8000d28 <httpc_init+0x78>)
 8000d02:	89bb      	ldrh	r3, [r7, #12]
 8000d04:	8013      	strh	r3, [r2, #0]

		ret = HTTPC_TRUE;
 8000d06:	2301      	movs	r3, #1
 8000d08:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8000d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	371c      	adds	r7, #28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	20000114 	.word	0x20000114
 8000d1c:	2000010c 	.word	0x2000010c
 8000d20:	20000110 	.word	0x20000110
 8000d24:	20000118 	.word	0x20000118
 8000d28:	2000011c 	.word	0x2000011c

08000d2c <httpc_connection_handler>:


// return: true / false
uint8_t httpc_connection_handler()
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af02      	add	r7, sp, #8
	uint8_t ret = HTTPC_FALSE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]

	uint16_t source_port;

#ifdef _HTTPCLIENT_DEBUG_
	uint8_t destip[4] = {0, };
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
	uint16_t destport = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	80fb      	strh	r3, [r7, #6]
#endif

	uint8_t state = getSn_SR(httpsock);
 8000d3e:	4b6d      	ldr	r3, [pc, #436]	@ (8000ef4 <httpc_connection_handler+0x1c8>)
 8000d40:	f993 3000 	ldrsb.w	r3, [r3]
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	3301      	adds	r3, #1
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f003 ff9e 	bl	8004c90 <WIZCHIP_READ>
 8000d54:	4603      	mov	r3, r0
 8000d56:	73bb      	strb	r3, [r7, #14]
	switch(state)
 8000d58:	7bbb      	ldrb	r3, [r7, #14]
 8000d5a:	2b1c      	cmp	r3, #28
 8000d5c:	f200 80c2 	bhi.w	8000ee4 <httpc_connection_handler+0x1b8>
 8000d60:	a201      	add	r2, pc, #4	@ (adr r2, 8000d68 <httpc_connection_handler+0x3c>)
 8000d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d66:	bf00      	nop
 8000d68:	08000e91 	.word	0x08000e91
 8000d6c:	08000ee5 	.word	0x08000ee5
 8000d70:	08000ee5 	.word	0x08000ee5
 8000d74:	08000ee5 	.word	0x08000ee5
 8000d78:	08000ee5 	.word	0x08000ee5
 8000d7c:	08000ee5 	.word	0x08000ee5
 8000d80:	08000ee5 	.word	0x08000ee5
 8000d84:	08000ee5 	.word	0x08000ee5
 8000d88:	08000ee5 	.word	0x08000ee5
 8000d8c:	08000ee5 	.word	0x08000ee5
 8000d90:	08000ee5 	.word	0x08000ee5
 8000d94:	08000ee5 	.word	0x08000ee5
 8000d98:	08000ee5 	.word	0x08000ee5
 8000d9c:	08000ee5 	.word	0x08000ee5
 8000da0:	08000ee5 	.word	0x08000ee5
 8000da4:	08000ee5 	.word	0x08000ee5
 8000da8:	08000ee5 	.word	0x08000ee5
 8000dac:	08000ee5 	.word	0x08000ee5
 8000db0:	08000ee5 	.word	0x08000ee5
 8000db4:	08000ddd 	.word	0x08000ddd
 8000db8:	08000ee5 	.word	0x08000ee5
 8000dbc:	08000ee5 	.word	0x08000ee5
 8000dc0:	08000ee5 	.word	0x08000ee5
 8000dc4:	08000de3 	.word	0x08000de3
 8000dc8:	08000e91 	.word	0x08000e91
 8000dcc:	08000ee5 	.word	0x08000ee5
 8000dd0:	08000ee5 	.word	0x08000ee5
 8000dd4:	08000ee5 	.word	0x08000ee5
 8000dd8:	08000e81 	.word	0x08000e81
	{
		case SOCK_INIT:
			// state: connect
			ret = HTTPC_TRUE;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
			break;
 8000de0:	e083      	b.n	8000eea <httpc_connection_handler+0x1be>

		case SOCK_ESTABLISHED:
			if(getSn_IR(httpsock) & Sn_IR_CON)
 8000de2:	4b44      	ldr	r3, [pc, #272]	@ (8000ef4 <httpc_connection_handler+0x1c8>)
 8000de4:	f993 3000 	ldrsb.w	r3, [r3]
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	3301      	adds	r3, #1
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 ff4c 	bl	8004c90 <WIZCHIP_READ>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d030      	beq.n	8000e64 <httpc_connection_handler+0x138>
			{
#ifdef _HTTPCLIENT_DEBUG_
				// Serial debug message printout
				getsockopt(httpsock, SO_DESTIP, &destip);
 8000e02:	4b3c      	ldr	r3, [pc, #240]	@ (8000ef4 <httpc_connection_handler+0x1c8>)
 8000e04:	f993 3000 	ldrsb.w	r3, [r3]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	f107 0208 	add.w	r2, r7, #8
 8000e0e:	2104      	movs	r1, #4
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 fe29 	bl	8004a68 <getsockopt>
				getsockopt(httpsock, SO_DESTPORT, &destport);
 8000e16:	4b37      	ldr	r3, [pc, #220]	@ (8000ef4 <httpc_connection_handler+0x1c8>)
 8000e18:	f993 3000 	ldrsb.w	r3, [r3]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	1dba      	adds	r2, r7, #6
 8000e20:	2105      	movs	r1, #5
 8000e22:	4618      	mov	r0, r3
 8000e24:	f003 fe20 	bl	8004a68 <getsockopt>
				printf(" > HTTP CLIENT: CONNECTED TO - %d.%d.%d.%d : %d\r\n",destip[0], destip[1], destip[2], destip[3], destport);
 8000e28:	7a3b      	ldrb	r3, [r7, #8]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	7a7b      	ldrb	r3, [r7, #9]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	7abb      	ldrb	r3, [r7, #10]
 8000e32:	461c      	mov	r4, r3
 8000e34:	7afb      	ldrb	r3, [r7, #11]
 8000e36:	88fa      	ldrh	r2, [r7, #6]
 8000e38:	9201      	str	r2, [sp, #4]
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	4623      	mov	r3, r4
 8000e3e:	4602      	mov	r2, r0
 8000e40:	482d      	ldr	r0, [pc, #180]	@ (8000ef8 <httpc_connection_handler+0x1cc>)
 8000e42:	f005 f87f 	bl	8005f44 <iprintf>
#endif
				httpc_isConnected = HTTPC_TRUE;
 8000e46:	4b2d      	ldr	r3, [pc, #180]	@ (8000efc <httpc_connection_handler+0x1d0>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]

				setSn_IR(httpsock, Sn_IR_CON);
 8000e4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ef4 <httpc_connection_handler+0x1c8>)
 8000e4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	3301      	adds	r3, #1
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f003 ff62 	bl	8004d28 <WIZCHIP_WRITE>
			}

			httpc_isReceived = getSn_RX_RSR(httpsock);
 8000e64:	4b23      	ldr	r3, [pc, #140]	@ (8000ef4 <httpc_connection_handler+0x1c8>)
 8000e66:	f993 3000 	ldrsb.w	r3, [r3]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f004 f8b2 	bl	8004fd6 <getSn_RX_RSR>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <httpc_connection_handler+0x1d4>)
 8000e78:	801a      	strh	r2, [r3, #0]
			ret = HTTPC_CONNECTED;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	73fb      	strb	r3, [r7, #15]
			break;
 8000e7e:	e034      	b.n	8000eea <httpc_connection_handler+0x1be>

		case SOCK_CLOSE_WAIT:
			disconnect(httpsock);
 8000e80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <httpc_connection_handler+0x1c8>)
 8000e82:	f993 3000 	ldrsb.w	r3, [r3]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 f95f 	bl	800414c <disconnect>
			break;
 8000e8e:	e02c      	b.n	8000eea <httpc_connection_handler+0x1be>

		case SOCK_FIN_WAIT:
		case SOCK_CLOSED:
			httpc_isSockOpen = HTTPC_FALSE;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <httpc_connection_handler+0x1d8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
			httpc_isConnected = HTTPC_FALSE;
 8000e96:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <httpc_connection_handler+0x1d0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]

			source_port = get_httpc_any_port();
 8000e9c:	f000 f978 	bl	8001190 <get_httpc_any_port>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	81bb      	strh	r3, [r7, #12]
#ifdef _HTTPCLIENT_DEBUG_
			printf(" > HTTP CLIENT: source_port = %d\r\n", source_port);
 8000ea4:	89bb      	ldrh	r3, [r7, #12]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4817      	ldr	r0, [pc, #92]	@ (8000f08 <httpc_connection_handler+0x1dc>)
 8000eaa:	f005 f84b 	bl	8005f44 <iprintf>
#endif

			if(socket(httpsock, Sn_MR_TCP, source_port, Sn_MR_ND) == httpsock)
 8000eae:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <httpc_connection_handler+0x1c8>)
 8000eb0:	f993 3000 	ldrsb.w	r3, [r3]
 8000eb4:	b2d8      	uxtb	r0, r3
 8000eb6:	89ba      	ldrh	r2, [r7, #12]
 8000eb8:	2320      	movs	r3, #32
 8000eba:	2101      	movs	r1, #1
 8000ebc:	f002 fee8 	bl	8003c90 <socket>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <httpc_connection_handler+0x1c8>)
 8000ec6:	f993 3000 	ldrsb.w	r3, [r3]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d10c      	bne.n	8000ee8 <httpc_connection_handler+0x1bc>
			{
				if(httpc_isSockOpen == HTTPC_FALSE)
 8000ece:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <httpc_connection_handler+0x1d8>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d108      	bne.n	8000ee8 <httpc_connection_handler+0x1bc>
				{
#ifdef _HTTPCLIENT_DEBUG_
					printf(" > HTTP CLIENT: SOCKOPEN\r\n");
 8000ed6:	480d      	ldr	r0, [pc, #52]	@ (8000f0c <httpc_connection_handler+0x1e0>)
 8000ed8:	f005 f8a4 	bl	8006024 <puts>
#endif
					httpc_isSockOpen = HTTPC_TRUE;
 8000edc:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <httpc_connection_handler+0x1d8>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
				}
			}


			break;
 8000ee2:	e001      	b.n	8000ee8 <httpc_connection_handler+0x1bc>

		default:
			break;
 8000ee4:	bf00      	nop
 8000ee6:	e000      	b.n	8000eea <httpc_connection_handler+0x1be>
			break;
 8000ee8:	bf00      	nop
	}

	return ret;
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	20000114 	.word	0x20000114
 8000ef8:	08007114 	.word	0x08007114
 8000efc:	20000121 	.word	0x20000121
 8000f00:	20000122 	.word	0x20000122
 8000f04:	20000120 	.word	0x20000120
 8000f08:	08007148 	.word	0x08007148
 8000f0c:	0800716c 	.word	0x0800716c

08000f10 <httpc_connect>:


// return: socket status
uint8_t httpc_connect()
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
	uint8_t ret = HTTPC_FALSE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	71fb      	strb	r3, [r7, #7]

	if(httpsock >= 0)
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <httpc_connect+0x48>)
 8000f1c:	f993 3000 	ldrsb.w	r3, [r3]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db14      	blt.n	8000f4e <httpc_connect+0x3e>
	{
		if(httpc_isSockOpen == HTTPC_TRUE)
 8000f24:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <httpc_connect+0x4c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d110      	bne.n	8000f4e <httpc_connect+0x3e>
		{
			// TCP connect
			ret = connect(httpsock, dest_ip, dest_port);
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <httpc_connect+0x48>)
 8000f2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <httpc_connect+0x50>)
 8000f36:	8812      	ldrh	r2, [r2, #0]
 8000f38:	490a      	ldr	r1, [pc, #40]	@ (8000f64 <httpc_connect+0x54>)
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 f82a 	bl	8003f94 <connect>
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
			if(ret == SOCK_OK) ret = HTTPC_TRUE;
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d101      	bne.n	8000f4e <httpc_connect+0x3e>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	71fb      	strb	r3, [r7, #7]
		}
	}

	return ret;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000114 	.word	0x20000114
 8000f5c:	20000120 	.word	0x20000120
 8000f60:	2000011c 	.word	0x2000011c
 8000f64:	20000118 	.word	0x20000118

08000f68 <httpc_send_header>:
	return len;
}

// return: sent header length
uint16_t httpc_send_header(HttpRequest * req, uint8_t * buf, uint8_t * customHeader_buf, uint16_t content_len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	807b      	strh	r3, [r7, #2]
	uint16_t len;

	if(httpc_isConnected == HTTPC_TRUE)
 8000f76:	4b55      	ldr	r3, [pc, #340]	@ (80010cc <httpc_send_header+0x164>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	f040 809f 	bne.w	80010be <httpc_send_header+0x156>
	{
		memset(buf, 0x00, DATA_BUF_SIZE);
 8000f80:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8000f84:	2100      	movs	r1, #0
 8000f86:	68b8      	ldr	r0, [r7, #8]
 8000f88:	f005 f94c 	bl	8006224 <memset>

		len = sprintf((char *)buf, "%s %s HTTP/1.1\r\n", req->method, req->uri);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	494e      	ldr	r1, [pc, #312]	@ (80010d0 <httpc_send_header+0x168>)
 8000f96:	68b8      	ldr	r0, [r7, #8]
 8000f98:	f005 f84c 	bl	8006034 <siprintf>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	82fb      	strh	r3, [r7, #22]
		len += sprintf((char *)buf+len, "Host: %s\r\n", req->host);
 8000fa0:	8afb      	ldrh	r3, [r7, #22]
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	18d0      	adds	r0, r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	461a      	mov	r2, r3
 8000fac:	4949      	ldr	r1, [pc, #292]	@ (80010d4 <httpc_send_header+0x16c>)
 8000fae:	f005 f841 	bl	8006034 <siprintf>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	8afb      	ldrh	r3, [r7, #22]
 8000fb8:	4413      	add	r3, r2
 8000fba:	82fb      	strh	r3, [r7, #22]
		len += sprintf((char *)buf+len, "Connection: %s\r\n", req->connection);
 8000fbc:	8afb      	ldrh	r3, [r7, #22]
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	18d0      	adds	r0, r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4943      	ldr	r1, [pc, #268]	@ (80010d8 <httpc_send_header+0x170>)
 8000fca:	f005 f833 	bl	8006034 <siprintf>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	8afb      	ldrh	r3, [r7, #22]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	82fb      	strh	r3, [r7, #22]

		// HTTP content type: POST / PUT
		if(content_len > 0)
 8000fd8:	887b      	ldrh	r3, [r7, #2]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d032      	beq.n	8001044 <httpc_send_header+0xdc>
		{
			len += sprintf((char *)buf+len, "Content-Length: %d\r\n", content_len);
 8000fde:	8afb      	ldrh	r3, [r7, #22]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	887a      	ldrh	r2, [r7, #2]
 8000fe6:	493d      	ldr	r1, [pc, #244]	@ (80010dc <httpc_send_header+0x174>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f005 f823 	bl	8006034 <siprintf>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	8afb      	ldrh	r3, [r7, #22]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	82fb      	strh	r3, [r7, #22]

			if(strcmp((char *)req->content_type, HTTP_CTYPE_MULTIPART_FORM) == 0)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	4938      	ldr	r1, [pc, #224]	@ (80010e0 <httpc_send_header+0x178>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff f8ee 	bl	80001e0 <strcmp>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10e      	bne.n	8001028 <httpc_send_header+0xc0>
			{
				// HTTP content type: multipart/form-data
				len += sprintf((char *)buf+len, "Content-Type: %s; boundary=%s\r\n", req->content_type, formDataBoundary);
 800100a:	8afb      	ldrh	r3, [r7, #22]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	18d0      	adds	r0, r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	4b33      	ldr	r3, [pc, #204]	@ (80010e4 <httpc_send_header+0x17c>)
 8001016:	4934      	ldr	r1, [pc, #208]	@ (80010e8 <httpc_send_header+0x180>)
 8001018:	f005 f80c 	bl	8006034 <siprintf>
 800101c:	4603      	mov	r3, r0
 800101e:	b29a      	uxth	r2, r3
 8001020:	8afb      	ldrh	r3, [r7, #22]
 8001022:	4413      	add	r3, r2
 8001024:	82fb      	strh	r3, [r7, #22]
 8001026:	e00d      	b.n	8001044 <httpc_send_header+0xdc>
			}
			else
			{
				// HTTP content type: others
				len += sprintf((char *)buf+len, "Content-Type: %s\r\n", req->content_type); // HTTP content type: others
 8001028:	8afb      	ldrh	r3, [r7, #22]
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	18d0      	adds	r0, r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	461a      	mov	r2, r3
 8001034:	492d      	ldr	r1, [pc, #180]	@ (80010ec <httpc_send_header+0x184>)
 8001036:	f004 fffd 	bl	8006034 <siprintf>
 800103a:	4603      	mov	r3, r0
 800103c:	b29a      	uxth	r2, r3
 800103e:	8afb      	ldrh	r3, [r7, #22]
 8001040:	4413      	add	r3, r2
 8001042:	82fb      	strh	r3, [r7, #22]
			}
		}

		// for adding custom header fields
		if(customHeader_buf != NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d017      	beq.n	800107a <httpc_send_header+0x112>
		{
			if((strlen((char *)customHeader_buf) + len + 2) <= DATA_BUF_SIZE)
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff f8d2 	bl	80001f4 <strlen>
 8001050:	4602      	mov	r2, r0
 8001052:	8afb      	ldrh	r3, [r7, #22]
 8001054:	4413      	add	r3, r2
 8001056:	3302      	adds	r3, #2
 8001058:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800105c:	4293      	cmp	r3, r2
 800105e:	d80c      	bhi.n	800107a <httpc_send_header+0x112>
			{
				len += sprintf((char *)buf+len, "%s", customHeader_buf);
 8001060:	8afb      	ldrh	r3, [r7, #22]
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	4413      	add	r3, r2
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4921      	ldr	r1, [pc, #132]	@ (80010f0 <httpc_send_header+0x188>)
 800106a:	4618      	mov	r0, r3
 800106c:	f004 ffe2 	bl	8006034 <siprintf>
 8001070:	4603      	mov	r3, r0
 8001072:	b29a      	uxth	r2, r3
 8001074:	8afb      	ldrh	r3, [r7, #22]
 8001076:	4413      	add	r3, r2
 8001078:	82fb      	strh	r3, [r7, #22]
			}
		}

		len += sprintf((char *)buf+len, "\r\n");
 800107a:	8afb      	ldrh	r3, [r7, #22]
 800107c:	68ba      	ldr	r2, [r7, #8]
 800107e:	4413      	add	r3, r2
 8001080:	491c      	ldr	r1, [pc, #112]	@ (80010f4 <httpc_send_header+0x18c>)
 8001082:	4618      	mov	r0, r3
 8001084:	f004 ffd6 	bl	8006034 <siprintf>
 8001088:	4603      	mov	r3, r0
 800108a:	b29a      	uxth	r2, r3
 800108c:	8afb      	ldrh	r3, [r7, #22]
 800108e:	4413      	add	r3, r2
 8001090:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPCLIENT_DEBUG_
		printf(" >> HTTP Request header - Method: %s, URI: %s, Content-Length: %d\r\n", req->method, req->uri, content_len);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6819      	ldr	r1, [r3, #0]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	4816      	ldr	r0, [pc, #88]	@ (80010f8 <httpc_send_header+0x190>)
 800109e:	f004 ff51 	bl	8005f44 <iprintf>
		printf("%s", buf);
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	4812      	ldr	r0, [pc, #72]	@ (80010f0 <httpc_send_header+0x188>)
 80010a6:	f004 ff4d 	bl	8005f44 <iprintf>
#endif
		send(httpsock, buf, len);
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <httpc_send_header+0x194>)
 80010ac:	f993 3000 	ldrsb.w	r3, [r3]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	8afa      	ldrh	r2, [r7, #22]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 f8be 	bl	8004238 <send>
 80010bc:	e001      	b.n	80010c2 <httpc_send_header+0x15a>
	}
	else
	{
		len = HTTPC_FAILED;
 80010be:	2300      	movs	r3, #0
 80010c0:	82fb      	strh	r3, [r7, #22]
	}

	return len;
 80010c2:	8afb      	ldrh	r3, [r7, #22]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000121 	.word	0x20000121
 80010d0:	080071a0 	.word	0x080071a0
 80010d4:	080071b4 	.word	0x080071b4
 80010d8:	080071c0 	.word	0x080071c0
 80010dc:	080071d4 	.word	0x080071d4
 80010e0:	080071ec 	.word	0x080071ec
 80010e4:	08007200 	.word	0x08007200
 80010e8:	08007228 	.word	0x08007228
 80010ec:	08007248 	.word	0x08007248
 80010f0:	0800725c 	.word	0x0800725c
 80010f4:	08007260 	.word	0x08007260
 80010f8:	08007264 	.word	0x08007264
 80010fc:	20000114 	.word	0x20000114

08001100 <httpc_send_body>:


// return: sent body length
uint16_t httpc_send_body(uint8_t * buf, uint16_t len)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
	uint16_t sentlen = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	81fb      	strh	r3, [r7, #14]

#ifdef _HTTPCLIENT_DEBUG_
	uint16_t i;
#endif

	if(httpc_isConnected == HTTPC_TRUE)
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <httpc_send_body+0x80>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d12c      	bne.n	8001172 <httpc_send_body+0x72>
	{
		do{
			sentlen += send(httpsock, buf, len);
 8001118:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <httpc_send_body+0x84>)
 800111a:	f993 3000 	ldrsb.w	r3, [r3]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	887a      	ldrh	r2, [r7, #2]
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4618      	mov	r0, r3
 8001126:	f003 f887 	bl	8004238 <send>
 800112a:	4603      	mov	r3, r0
 800112c:	b29a      	uxth	r2, r3
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	4413      	add	r3, r2
 8001132:	81fb      	strh	r3, [r7, #14]
		} while(sentlen < len);
 8001134:	89fa      	ldrh	r2, [r7, #14]
 8001136:	887b      	ldrh	r3, [r7, #2]
 8001138:	429a      	cmp	r2, r3
 800113a:	d3ed      	bcc.n	8001118 <httpc_send_body+0x18>

#ifdef _HTTPCLIENT_DEBUG_
		if(sentlen > 0)
 800113c:	89fb      	ldrh	r3, [r7, #14]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d019      	beq.n	8001176 <httpc_send_body+0x76>
		{
			printf(" >> HTTP Request Body\r\n");
 8001142:	4811      	ldr	r0, [pc, #68]	@ (8001188 <httpc_send_body+0x88>)
 8001144:	f004 ff6e 	bl	8006024 <puts>
			for(i = 0; i < sentlen; i++) printf("%c", buf[i]);
 8001148:	2300      	movs	r3, #0
 800114a:	81bb      	strh	r3, [r7, #12]
 800114c:	e009      	b.n	8001162 <httpc_send_body+0x62>
 800114e:	89bb      	ldrh	r3, [r7, #12]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f004 ff06 	bl	8005f68 <putchar>
 800115c:	89bb      	ldrh	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	81bb      	strh	r3, [r7, #12]
 8001162:	89ba      	ldrh	r2, [r7, #12]
 8001164:	89fb      	ldrh	r3, [r7, #14]
 8001166:	429a      	cmp	r2, r3
 8001168:	d3f1      	bcc.n	800114e <httpc_send_body+0x4e>
			printf("\r\n");
 800116a:	4808      	ldr	r0, [pc, #32]	@ (800118c <httpc_send_body+0x8c>)
 800116c:	f004 ff5a 	bl	8006024 <puts>
 8001170:	e001      	b.n	8001176 <httpc_send_body+0x76>
		}
#endif
	}
	else
	{
		sentlen = HTTPC_FAILED;
 8001172:	2300      	movs	r3, #0
 8001174:	81fb      	strh	r3, [r7, #14]
	}

	return sentlen;
 8001176:	89fb      	ldrh	r3, [r7, #14]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000121 	.word	0x20000121
 8001184:	20000114 	.word	0x20000114
 8001188:	080072a8 	.word	0x080072a8
 800118c:	080072c0 	.word	0x080072c0

08001190 <get_httpc_any_port>:
}


// return: source port number for tcp client
uint16_t get_httpc_any_port(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	if(httpc_any_port)
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <get_httpc_any_port+0x74>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d014      	beq.n	80011c6 <get_httpc_any_port+0x36>
	{
		if((httpc_any_port >= HTTP_CLIENT_PORT_MIN) && (httpc_any_port < HTTP_CLIENT_PORT_MAX)) {
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <get_httpc_any_port+0x74>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	f5b3 4f30 	cmp.w	r3, #45056	@ 0xb000
 80011a4:	d30c      	bcc.n	80011c0 <get_httpc_any_port+0x30>
 80011a6:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <get_httpc_any_port+0x74>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d006      	beq.n	80011c0 <get_httpc_any_port+0x30>
			httpc_any_port++;
 80011b2:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <get_httpc_any_port+0x74>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <get_httpc_any_port+0x74>)
 80011bc:	801a      	strh	r2, [r3, #0]
 80011be:	e002      	b.n	80011c6 <get_httpc_any_port+0x36>
		} else {
			httpc_any_port = 0;
 80011c0:	4b10      	ldr	r3, [pc, #64]	@ (8001204 <get_httpc_any_port+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	801a      	strh	r2, [r3, #0]
		}
	}

	if(httpc_any_port < HTTP_CLIENT_PORT_MIN)
 80011c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <get_httpc_any_port+0x74>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	f5b3 4f30 	cmp.w	r3, #45056	@ 0xb000
 80011ce:	d214      	bcs.n	80011fa <get_httpc_any_port+0x6a>
	{
		// todo: get random seed value
		httpc_any_port = (rand() % 10000) + 46000; // 46000 ~ 55999
 80011d0:	f004 fdb8 	bl	8005d44 <rand>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001208 <get_httpc_any_port+0x78>)
 80011d8:	fb82 1203 	smull	r1, r2, r2, r3
 80011dc:	1311      	asrs	r1, r2, #12
 80011de:	17da      	asrs	r2, r3, #31
 80011e0:	1a8a      	subs	r2, r1, r2
 80011e2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80011e6:	fb01 f202 	mul.w	r2, r1, r2
 80011ea:	1a9a      	subs	r2, r3, r2
 80011ec:	b293      	uxth	r3, r2
 80011ee:	f5a3 4398 	sub.w	r3, r3, #19456	@ 0x4c00
 80011f2:	3b50      	subs	r3, #80	@ 0x50
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b03      	ldr	r3, [pc, #12]	@ (8001204 <get_httpc_any_port+0x74>)
 80011f8:	801a      	strh	r2, [r3, #0]
	}

	return httpc_any_port;
 80011fa:	4b02      	ldr	r3, [pc, #8]	@ (8001204 <get_httpc_any_port+0x74>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000011e 	.word	0x2000011e
 8001208:	68db8bad 	.word	0x68db8bad

0800120c <check_cable_connection>:
uint16_t sensorvalue = 0;

wiz_PhyConf current_phy_conf;

void check_cable_connection(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	uint8_t cable_status;

	do{

		printf("\r\nGetting cable status...\r\n");
 8001212:	480e      	ldr	r0, [pc, #56]	@ (800124c <check_cable_connection+0x40>)
 8001214:	f004 ff06 	bl	8006024 <puts>
		ctlwizchip(CW_GET_PHYLINK,(void *)&cable_status);
 8001218:	1dfb      	adds	r3, r7, #7
 800121a:	4619      	mov	r1, r3
 800121c:	200f      	movs	r0, #15
 800121e:	f004 f8ff 	bl	8005420 <ctlwizchip>

		if(cable_status ==  PHY_LINK_OFF)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d106      	bne.n	8001236 <check_cable_connection+0x2a>
		{
			printf("No cable detected ...\r\n");
 8001228:	4809      	ldr	r0, [pc, #36]	@ (8001250 <check_cable_connection+0x44>)
 800122a:	f004 fefb 	bl	8006024 <puts>
			delay(1000);
 800122e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001232:	f000 fe59 	bl	8001ee8 <delay>
		}

	}while(cable_status ==  PHY_LINK_OFF);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0ea      	beq.n	8001212 <check_cable_connection+0x6>

	printf("Cable connected...\r\n");
 800123c:	4805      	ldr	r0, [pc, #20]	@ (8001254 <check_cable_connection+0x48>)
 800123e:	f004 fef1 	bl	8006024 <puts>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	08007348 	.word	0x08007348
 8001250:	08007364 	.word	0x08007364
 8001254:	0800737c 	.word	0x0800737c

08001258 <display_phy_config>:

void display_phy_config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_conf;
	ctlwizchip(CW_GET_PHYCONF,(void*)&phy_conf);
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	200b      	movs	r0, #11
 8001264:	f004 f8dc 	bl	8005420 <ctlwizchip>

	if(phy_conf.by == PHY_CONFBY_HW)
 8001268:	793b      	ldrb	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d103      	bne.n	8001276 <display_phy_config+0x1e>
	{
		printf("\n\rPHY is currently configured by hardware.");
 800126e:	4816      	ldr	r0, [pc, #88]	@ (80012c8 <display_phy_config+0x70>)
 8001270:	f004 fe68 	bl	8005f44 <iprintf>
 8001274:	e002      	b.n	800127c <display_phy_config+0x24>
	}
	else{
		printf("\n\rPHY is currently configured by software.");
 8001276:	4815      	ldr	r0, [pc, #84]	@ (80012cc <display_phy_config+0x74>)
 8001278:	f004 fe64 	bl	8005f44 <iprintf>

	}
	printf("\r\nSTATUS: Autonegotiation %s",(phy_conf.mode == PHY_MODE_AUTONEGO) ? "Enabled" : "Disabled");
 800127c:	797b      	ldrb	r3, [r7, #5]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d101      	bne.n	8001286 <display_phy_config+0x2e>
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <display_phy_config+0x78>)
 8001284:	e000      	b.n	8001288 <display_phy_config+0x30>
 8001286:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <display_phy_config+0x7c>)
 8001288:	4619      	mov	r1, r3
 800128a:	4813      	ldr	r0, [pc, #76]	@ (80012d8 <display_phy_config+0x80>)
 800128c:	f004 fe5a 	bl	8005f44 <iprintf>
	printf("\r\nSTATUS: Duplex Mode: %s",(phy_conf.duplex == PHY_DUPLEX_FULL) ? "Full Duplex" : "Half Duplex");
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <display_phy_config+0x42>
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <display_phy_config+0x84>)
 8001298:	e000      	b.n	800129c <display_phy_config+0x44>
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <display_phy_config+0x88>)
 800129c:	4619      	mov	r1, r3
 800129e:	4811      	ldr	r0, [pc, #68]	@ (80012e4 <display_phy_config+0x8c>)
 80012a0:	f004 fe50 	bl	8005f44 <iprintf>
	printf("\r\nSTATUS: Speed: %dMbps",(phy_conf.speed == PHY_SPEED_10) ? 10 : 100);
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <display_phy_config+0x56>
 80012aa:	230a      	movs	r3, #10
 80012ac:	e000      	b.n	80012b0 <display_phy_config+0x58>
 80012ae:	2364      	movs	r3, #100	@ 0x64
 80012b0:	4619      	mov	r1, r3
 80012b2:	480d      	ldr	r0, [pc, #52]	@ (80012e8 <display_phy_config+0x90>)
 80012b4:	f004 fe46 	bl	8005f44 <iprintf>
  printf("\r\n...");
 80012b8:	480c      	ldr	r0, [pc, #48]	@ (80012ec <display_phy_config+0x94>)
 80012ba:	f004 fe43 	bl	8005f44 <iprintf>

}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	08007390 	.word	0x08007390
 80012cc:	080073bc 	.word	0x080073bc
 80012d0:	080073e8 	.word	0x080073e8
 80012d4:	080073f0 	.word	0x080073f0
 80012d8:	080073fc 	.word	0x080073fc
 80012dc:	0800741c 	.word	0x0800741c
 80012e0:	08007428 	.word	0x08007428
 80012e4:	08007434 	.word	0x08007434
 80012e8:	08007450 	.word	0x08007450
 80012ec:	08007468 	.word	0x08007468

080012f0 <main>:

int main()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	@ 0x28
 80012f4:	af02      	add	r7, sp, #8

	uint16_t len = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	83fb      	strh	r3, [r7, #30]

	/*Enable FPU*/
	fpu_enable();
 80012fa:	f7ff fcaf 	bl	8000c5c <fpu_enable>

	/*Initialize timebase*/
	timebase_init();
 80012fe:	f000 fe35 	bl	8001f6c <timebase_init>

	/*Initialize debug UART*/
	debug_uart_init();
 8001302:	f000 fe69 	bl	8001fd8 <debug_uart_init>



	/*Initialize LED*/
	led_init();
 8001306:	f7ff f82d 	bl	8000364 <led_init>

	/*Initialize Push button*/
	button_init();
 800130a:	f7ff f849 	bl	80003a0 <button_init>

	/*Initialize ADC*/
	pa1_adc_init();
 800130e:	f7fe ffcf 	bl	80002b0 <pa1_adc_init>

	/*Start conversion*/
	start_conversion();
 8001312:	f7fe ffff 	bl	8000314 <start_conversion>

    wizchip_cs_pin_init();
 8001316:	f000 ff0d 	bl	8002134 <wizchip_cs_pin_init>
    w5500_spi_init();
 800131a:	f000 ff8d 	bl	8002238 <w5500_spi_init>
    w5500_init();
 800131e:	f000 ffb7 	bl	8002290 <w5500_init>

    check_cable_connection();
 8001322:	f7ff ff73 	bl	800120c <check_cable_connection>
    display_phy_config();
 8001326:	f7ff ff97 	bl	8001258 <display_phy_config>


    /*Run DNS*/
    if(process_dns())
 800132a:	f000 f89d 	bl	8001468 <process_dns>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <main+0x4a>
    {
    	flag_process_dns_success =  ON;
 8001334:	4b39      	ldr	r3, [pc, #228]	@ (800141c <main+0x12c>)
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
    }

    if(flag_process_dns_success)
 800133a:	4b38      	ldr	r3, [pc, #224]	@ (800141c <main+0x12c>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d013      	beq.n	800136a <main+0x7a>
    {
	    printf(" # DNS: %s => %d.%d.%d.%d\r\n", domain_name, domain_ip[0], domain_ip[1], domain_ip[2], domain_ip[3]);
 8001342:	4b37      	ldr	r3, [pc, #220]	@ (8001420 <main+0x130>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	4b35      	ldr	r3, [pc, #212]	@ (8001420 <main+0x130>)
 800134a:	785b      	ldrb	r3, [r3, #1]
 800134c:	4618      	mov	r0, r3
 800134e:	4b34      	ldr	r3, [pc, #208]	@ (8001420 <main+0x130>)
 8001350:	789b      	ldrb	r3, [r3, #2]
 8001352:	461a      	mov	r2, r3
 8001354:	4b32      	ldr	r3, [pc, #200]	@ (8001420 <main+0x130>)
 8001356:	78db      	ldrb	r3, [r3, #3]
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	9200      	str	r2, [sp, #0]
 800135c:	4603      	mov	r3, r0
 800135e:	460a      	mov	r2, r1
 8001360:	4930      	ldr	r1, [pc, #192]	@ (8001424 <main+0x134>)
 8001362:	4831      	ldr	r0, [pc, #196]	@ (8001428 <main+0x138>)
 8001364:	f004 fdee 	bl	8005f44 <iprintf>
 8001368:	e002      	b.n	8001370 <main+0x80>

    }
    else
    {
    	printf("DNS Failed\r\n");
 800136a:	4830      	ldr	r0, [pc, #192]	@ (800142c <main+0x13c>)
 800136c:	f004 fe5a 	bl	8006024 <puts>
    }

    /*Initialize the http_client*/
   httpc_init(SOCK_HTTP_CLIENT,domain_ip,80,g_send_buff,g_recv_buff);
 8001370:	4b2f      	ldr	r3, [pc, #188]	@ (8001430 <main+0x140>)
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	4b2f      	ldr	r3, [pc, #188]	@ (8001434 <main+0x144>)
 8001376:	2250      	movs	r2, #80	@ 0x50
 8001378:	4929      	ldr	r1, [pc, #164]	@ (8001420 <main+0x130>)
 800137a:	2001      	movs	r0, #1
 800137c:	f7ff fc98 	bl	8000cb0 <httpc_init>
	while(1)
	{
		sensorvalue = adc_read();
 8001380:	f7fe ffde 	bl	8000340 <adc_read>
 8001384:	4603      	mov	r3, r0
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b2b      	ldr	r3, [pc, #172]	@ (8001438 <main+0x148>)
 800138a:	801a      	strh	r2, [r3, #0]
		sprintf(sense_content,"key=4326&sensorvalue=%d",sensorvalue);
 800138c:	4b2a      	ldr	r3, [pc, #168]	@ (8001438 <main+0x148>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	492a      	ldr	r1, [pc, #168]	@ (800143c <main+0x14c>)
 8001394:	482a      	ldr	r0, [pc, #168]	@ (8001440 <main+0x150>)
 8001396:	f004 fe4d 	bl	8006034 <siprintf>

		httpc_connection_handler();
 800139a:	f7ff fcc7 	bl	8000d2c <httpc_connection_handler>

		if(httpc_isSockOpen)
 800139e:	4b29      	ldr	r3, [pc, #164]	@ (8001444 <main+0x154>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <main+0xba>
		{
			httpc_connect();
 80013a6:	f7ff fdb3 	bl	8000f10 <httpc_connect>
		}

		if(httpc_isConnected)
 80013aa:	4b27      	ldr	r3, [pc, #156]	@ (8001448 <main+0x158>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0e6      	beq.n	8001380 <main+0x90>
		{
			/*Prepare http POST request*/
			HttpRequest request;
			request.method =  (uint8_t *)HTTP_POST;
 80013b2:	4b26      	ldr	r3, [pc, #152]	@ (800144c <main+0x15c>)
 80013b4:	607b      	str	r3, [r7, #4]
			request.uri    =   (uint8_t *)HTTP_POST_REQUEST;
 80013b6:	4b26      	ldr	r3, [pc, #152]	@ (8001450 <main+0x160>)
 80013b8:	60bb      	str	r3, [r7, #8]
			request.host   =  (uint8_t *)domain_name;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <main+0x134>)
 80013bc:	60fb      	str	r3, [r7, #12]
			request.connection =  (uint8_t *)"keep-alive";
 80013be:	4b25      	ldr	r3, [pc, #148]	@ (8001454 <main+0x164>)
 80013c0:	617b      	str	r3, [r7, #20]
			request.content_type = (uint8_t *)"application/x-www-form-urlencoded";
 80013c2:	4b25      	ldr	r3, [pc, #148]	@ (8001458 <main+0x168>)
 80013c4:	613b      	str	r3, [r7, #16]

			/*Calculate the body length*/
			uint16_t body_length =  strlen(sense_content);
 80013c6:	481e      	ldr	r0, [pc, #120]	@ (8001440 <main+0x150>)
 80013c8:	f7fe ff14 	bl	80001f4 <strlen>
 80013cc:	4603      	mov	r3, r0
 80013ce:	83bb      	strh	r3, [r7, #28]

			/*Send http request header*/

			len = httpc_send_header(&request, g_send_buff,NULL,body_length);
 80013d0:	8bbb      	ldrh	r3, [r7, #28]
 80013d2:	1d38      	adds	r0, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	4917      	ldr	r1, [pc, #92]	@ (8001434 <main+0x144>)
 80013d8:	f7ff fdc6 	bl	8000f68 <httpc_send_header>
 80013dc:	4603      	mov	r3, r0
 80013de:	83fb      	strh	r3, [r7, #30]

			/*Check if header was sent successfully*/
			if(len > 0)
 80013e0:	8bfb      	ldrh	r3, [r7, #30]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d011      	beq.n	800140a <main+0x11a>
			{
				/*Send HTTP request body*/
				len  = httpc_send_body((uint8_t *)sense_content,body_length);
 80013e6:	8bbb      	ldrh	r3, [r7, #28]
 80013e8:	4619      	mov	r1, r3
 80013ea:	4815      	ldr	r0, [pc, #84]	@ (8001440 <main+0x150>)
 80013ec:	f7ff fe88 	bl	8001100 <httpc_send_body>
 80013f0:	4603      	mov	r3, r0
 80013f2:	83fb      	strh	r3, [r7, #30]

				if(len  > 0 )
 80013f4:	8bfb      	ldrh	r3, [r7, #30]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <main+0x112>
				{
					printf("HTTP POST request sent successfully\r\n");
 80013fa:	4818      	ldr	r0, [pc, #96]	@ (800145c <main+0x16c>)
 80013fc:	f004 fe12 	bl	8006024 <puts>
 8001400:	e006      	b.n	8001410 <main+0x120>
				}
				else
				{
					printf("Failed to send HTTP body \r\n");
 8001402:	4817      	ldr	r0, [pc, #92]	@ (8001460 <main+0x170>)
 8001404:	f004 fe0e 	bl	8006024 <puts>
 8001408:	e002      	b.n	8001410 <main+0x120>
				}
			}
			else
			{
				printf("Failed to send HTTP header \r\n");
 800140a:	4816      	ldr	r0, [pc, #88]	@ (8001464 <main+0x174>)
 800140c:	f004 fe0a 	bl	8006024 <puts>

			}



			delay(1000); //Delay 1 second;
 8001410:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001414:	f000 fd68 	bl	8001ee8 <delay>
		sensorvalue = adc_read();
 8001418:	e7b2      	b.n	8001380 <main+0x90>
 800141a:	bf00      	nop
 800141c:	20000124 	.word	0x20000124
 8001420:	20000128 	.word	0x20000128
 8001424:	20000004 	.word	0x20000004
 8001428:	08007470 	.word	0x08007470
 800142c:	0800748c 	.word	0x0800748c
 8001430:	200037dc 	.word	0x200037dc
 8001434:	20001c84 	.word	0x20001c84
 8001438:	20005384 	.word	0x20005384
 800143c:	08007498 	.word	0x08007498
 8001440:	20005334 	.word	0x20005334
 8001444:	20000120 	.word	0x20000120
 8001448:	20000121 	.word	0x20000121
 800144c:	080074b0 	.word	0x080074b0
 8001450:	080074b8 	.word	0x080074b8
 8001454:	080074c4 	.word	0x080074c4
 8001458:	080074d0 	.word	0x080074d0
 800145c:	080074f4 	.word	0x080074f4
 8001460:	0800751c 	.word	0x0800751c
 8001464:	08007538 	.word	0x08007538

08001468 <process_dns>:

	}
}

int8_t process_dns(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
	int8_t ret = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	71bb      	strb	r3, [r7, #6]
	uint8_t dns_retry = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]

	DNS_init(SOCK_DNS, data_buff);
 8001476:	4913      	ldr	r1, [pc, #76]	@ (80014c4 <process_dns+0x5c>)
 8001478:	2004      	movs	r0, #4
 800147a:	f7ff fb4d 	bl	8000b18 <DNS_init>

	while(1)
	{
		if((  ret = DNS_run(dns_server, (uint8_t *)domain_name,domain_ip)) == 1)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <process_dns+0x60>)
 8001480:	4912      	ldr	r1, [pc, #72]	@ (80014cc <process_dns+0x64>)
 8001482:	4813      	ldr	r0, [pc, #76]	@ (80014d0 <process_dns+0x68>)
 8001484:	f7ff fb64 	bl	8000b50 <DNS_run>
 8001488:	4603      	mov	r3, r0
 800148a:	71bb      	strb	r3, [r7, #6]
 800148c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d00e      	beq.n	80014b2 <process_dns+0x4a>
		{
			break;
		}
		else
		{
			dns_retry++;
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	3301      	adds	r3, #1
 8001498:	71fb      	strb	r3, [r7, #7]
			if(dns_retry <= 2)
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2b02      	cmp	r3, #2
 800149e:	d804      	bhi.n	80014aa <process_dns+0x42>
			{
				printf("DNS timeout occurred retry [%d]\n\r",dns_retry);
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	4619      	mov	r1, r3
 80014a4:	480b      	ldr	r0, [pc, #44]	@ (80014d4 <process_dns+0x6c>)
 80014a6:	f004 fd4d 	bl	8005f44 <iprintf>
			}
			if(dns_retry > 2)
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d802      	bhi.n	80014b6 <process_dns+0x4e>
		if((  ret = DNS_run(dns_server, (uint8_t *)domain_name,domain_ip)) == 1)
 80014b0:	e7e5      	b.n	800147e <process_dns+0x16>
			break;
 80014b2:	bf00      	nop
 80014b4:	e000      	b.n	80014b8 <process_dns+0x50>
			{
				 break;
 80014b6:	bf00      	nop
			}
		}
	}

	return ret;
 80014b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000012c 	.word	0x2000012c
 80014c8:	20000128 	.word	0x20000128
 80014cc:	20000004 	.word	0x20000004
 80014d0:	20000000 	.word	0x20000000
 80014d4:	08007558 	.word	0x08007558

080014d8 <spi1_gpio_init>:
#include "stddef.h"

#define GPIOAEN		(1U<<0)
#define SPI1EN		(1U<<12)
void spi1_gpio_init(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |=GPIOAEN;
 80014dc:	4b3e      	ldr	r3, [pc, #248]	@ (80015d8 <spi1_gpio_init+0x100>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e0:	4a3d      	ldr	r2, [pc, #244]	@ (80015d8 <spi1_gpio_init+0x100>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5,PA6,PA7 mode to alternate function mode*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 80014e8:	4b3c      	ldr	r3, [pc, #240]	@ (80015dc <spi1_gpio_init+0x104>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a3b      	ldr	r2, [pc, #236]	@ (80015dc <spi1_gpio_init+0x104>)
 80014ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80014f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 80014f4:	4b39      	ldr	r3, [pc, #228]	@ (80015dc <spi1_gpio_init+0x104>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a38      	ldr	r2, [pc, #224]	@ (80015dc <spi1_gpio_init+0x104>)
 80014fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014fe:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 8001500:	4b36      	ldr	r3, [pc, #216]	@ (80015dc <spi1_gpio_init+0x104>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a35      	ldr	r2, [pc, #212]	@ (80015dc <spi1_gpio_init+0x104>)
 8001506:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800150a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 800150c:	4b33      	ldr	r3, [pc, #204]	@ (80015dc <spi1_gpio_init+0x104>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a32      	ldr	r2, [pc, #200]	@ (80015dc <spi1_gpio_init+0x104>)
 8001512:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001516:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 8001518:	4b30      	ldr	r3, [pc, #192]	@ (80015dc <spi1_gpio_init+0x104>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a2f      	ldr	r2, [pc, #188]	@ (80015dc <spi1_gpio_init+0x104>)
 800151e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001522:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 8001524:	4b2d      	ldr	r3, [pc, #180]	@ (80015dc <spi1_gpio_init+0x104>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a2c      	ldr	r2, [pc, #176]	@ (80015dc <spi1_gpio_init+0x104>)
 800152a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800152e:	6013      	str	r3, [r2, #0]

	/*Set PA5,PA6,PA7 alternate function type to SPI1*/

	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
 8001530:	4b2a      	ldr	r3, [pc, #168]	@ (80015dc <spi1_gpio_init+0x104>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4a29      	ldr	r2, [pc, #164]	@ (80015dc <spi1_gpio_init+0x104>)
 8001536:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800153a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 800153c:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <spi1_gpio_init+0x104>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	4a26      	ldr	r2, [pc, #152]	@ (80015dc <spi1_gpio_init+0x104>)
 8001542:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001546:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<22);
 8001548:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <spi1_gpio_init+0x104>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4a23      	ldr	r2, [pc, #140]	@ (80015dc <spi1_gpio_init+0x104>)
 800154e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001552:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<23);
 8001554:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <spi1_gpio_init+0x104>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a20      	ldr	r2, [pc, #128]	@ (80015dc <spi1_gpio_init+0x104>)
 800155a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800155e:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
 8001560:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <spi1_gpio_init+0x104>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4a1d      	ldr	r2, [pc, #116]	@ (80015dc <spi1_gpio_init+0x104>)
 8001566:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800156a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<25);
 800156c:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <spi1_gpio_init+0x104>)
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	4a1a      	ldr	r2, [pc, #104]	@ (80015dc <spi1_gpio_init+0x104>)
 8001572:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001576:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<26);
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <spi1_gpio_init+0x104>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4a17      	ldr	r2, [pc, #92]	@ (80015dc <spi1_gpio_init+0x104>)
 800157e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001582:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<27);
 8001584:	4b15      	ldr	r3, [pc, #84]	@ (80015dc <spi1_gpio_init+0x104>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4a14      	ldr	r2, [pc, #80]	@ (80015dc <spi1_gpio_init+0x104>)
 800158a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800158e:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <spi1_gpio_init+0x104>)
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	4a11      	ldr	r2, [pc, #68]	@ (80015dc <spi1_gpio_init+0x104>)
 8001596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800159a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<29);
 800159c:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <spi1_gpio_init+0x104>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4a0e      	ldr	r2, [pc, #56]	@ (80015dc <spi1_gpio_init+0x104>)
 80015a2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80015a6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<30);
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <spi1_gpio_init+0x104>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4a0b      	ldr	r2, [pc, #44]	@ (80015dc <spi1_gpio_init+0x104>)
 80015ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80015b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<31);
 80015b4:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <spi1_gpio_init+0x104>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4a08      	ldr	r2, [pc, #32]	@ (80015dc <spi1_gpio_init+0x104>)
 80015ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015be:	6213      	str	r3, [r2, #32]

	/*Enable clock access to SPI1*/
	RCC->APB2ENR |=SPI1EN;
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <spi1_gpio_init+0x100>)
 80015c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c4:	4a04      	ldr	r2, [pc, #16]	@ (80015d8 <spi1_gpio_init+0x100>)
 80015c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015ca:	6453      	str	r3, [r2, #68]	@ 0x44

}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000

080015e0 <spi_init>:

StatusTypeDef spi_init(SPI_HandleTypeDef *hspi)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	/*Check spi handle allocation*/
	if(hspi == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <spi_init+0x12>
	{
		return DEV_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e05a      	b.n	80016a8 <spi_init+0xc8>
	}

	/*Disable CRC calculation*/
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	629a      	str	r2, [r3, #40]	@ 0x28

	if(hspi->State == SPI_STATE_RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <spi_init+0x26>
	{
		spi1_gpio_init();
 8001602:	f7ff ff69 	bl	80014d8 <spi1_gpio_init>
	}

   hspi->State =  SPI_STATE_BUSY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2202      	movs	r2, #2
 800160a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800161c:	601a      	str	r2, [r3, #0]

   /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
   Communication speed, First bit and CRC calculation state */
   WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800166a:	ea42 0103 	orr.w	r1, r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001672:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]
                                   (hspi->Init.BuadRatePrescaler & SPI_CR1_BR_Msk) |
                                   (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                   (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

   /* Configure : NSS management, TI Mode */
   WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	0c1b      	lsrs	r3, r3, #16
 8001684:	f003 0104 	and.w	r1, r3, #4
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168c:	f003 0210 	and.w	r2, r3, #16
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	605a      	str	r2, [r3, #4]

  hspi->ErrorCode =  SPI_ERROR_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->State =  SPI_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   return DEV_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <spi_transmit>:




StatusTypeDef spi_transmit(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	4613      	mov	r3, r2
 80016be:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code;// = DEV_OK;
	uint16_t tx_xfer_cnt;


	tx_xfer_cnt  = size;
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	83fb      	strh	r3, [r7, #30]
	tickstart = get_tick();
 80016c4:	f000 fc2e 	bl	8001f24 <get_tick>
 80016c8:	61b8      	str	r0, [r7, #24]



	if((p_data == NULL) || (size  == 0))
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d002      	beq.n	80016d6 <spi_transmit+0x26>
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <spi_transmit+0x2a>
	{

		return DEV_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e106      	b.n	80018e8 <spi_transmit+0x238>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_TX;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2203      	movs	r2, #3
 80016de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pTxBuffPtr = (uint8_t *)p_data;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  size;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	88fa      	ldrh	r2, [r7, #6]
 80016f2:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  size;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	88fa      	ldrh	r2, [r7, #6]
 80016f8:	865a      	strh	r2, [r3, #50]	@ 0x32


	hspi->pRxBuffPtr = (uint8_t *)NULL;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  0;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2200      	movs	r2, #0
 8001704:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  0;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	875a      	strh	r2, [r3, #58]	@ 0x3a


	/*Configure communication direction*/
	if(hspi->Init.Direction  ==  SPI_DIRECTION_1LINE)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001714:	d10f      	bne.n	8001736 <spi_transmit+0x86>
	{
		CLEAR_BIT(hspi->Instance->CR1,SPI_CR1_SPE);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001724:	601a      	str	r2, [r3, #0]

		/*Set 1 line TX*/
		SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIOE);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001734:	601a      	str	r2, [r3, #0]

	}



	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001740:	2b40      	cmp	r3, #64	@ 0x40
 8001742:	d007      	beq.n	8001754 <spi_transmit+0xa4>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001752:	601a      	str	r2, [r3, #0]
	}

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800175e:	2b40      	cmp	r3, #64	@ 0x40
 8001760:	d007      	beq.n	8001772 <spi_transmit+0xc2>
	  {

			SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001770:	601a      	str	r2, [r3, #0]

	  }

	/*Transmit data in 16 bit mode*/
	if(hspi->Init.DataSize ==  SPI_DATASIZE_16BIT)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800177a:	d14e      	bne.n	800181a <spi_transmit+0x16a>
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <spi_transmit+0xda>
 8001784:	8bfb      	ldrh	r3, [r7, #30]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d141      	bne.n	800180e <spi_transmit+0x15e>
		{
			hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178e:	881a      	ldrh	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr +=sizeof(uint16_t);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179a:	1c9a      	adds	r2, r3, #2
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	3b01      	subs	r3, #1
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	865a      	strh	r2, [r3, #50]	@ 0x32
		}

		while(hspi->TxXferCount> 0)
 80017ae:	e02e      	b.n	800180e <spi_transmit+0x15e>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d012      	beq.n	80017e4 <spi_transmit+0x134>
			{
				hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c2:	881a      	ldrh	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr +=sizeof(uint16_t);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ce:	1c9a      	adds	r2, r3, #2
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3b01      	subs	r3, #1
 80017dc:	b29a      	uxth	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	865a      	strh	r2, [r3, #50]	@ 0x32
 80017e2:	e014      	b.n	800180e <spi_transmit+0x15e>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 80017e4:	f000 fb9e 	bl	8001f24 <get_tick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d803      	bhi.n	80017fc <spi_transmit+0x14c>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fa:	d102      	bne.n	8001802 <spi_transmit+0x152>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <spi_transmit+0x15e>
		         {
					hspi->State = SPI_STATE_READY;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return DEV_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e06c      	b.n	80018e8 <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001812:	b29b      	uxth	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1cb      	bne.n	80017b0 <spi_transmit+0x100>
 8001818:	e051      	b.n	80018be <spi_transmit+0x20e>
	}


	else
	{
		if((hspi->Init.Mode == SPI_MODE_SLAVE) || (tx_xfer_cnt ==  0x01U))
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <spi_transmit+0x178>
 8001822:	8bfb      	ldrh	r3, [r7, #30]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d145      	bne.n	80018b4 <spi_transmit+0x204>
		{
			*((__IO uint8_t *)&hspi->Instance->DR) =  *((const uint8_t *)hspi->pTxBuffPtr);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	330c      	adds	r3, #12
 8001832:	7812      	ldrb	r2, [r2, #0]
 8001834:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr +=sizeof(uint8_t);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	62da      	str	r2, [r3, #44]	@ 0x2c
			hspi->TxXferCount--;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001844:	b29b      	uxth	r3, r3
 8001846:	3b01      	subs	r3, #1
 8001848:	b29a      	uxth	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	865a      	strh	r2, [r3, #50]	@ 0x32
		}
		while(hspi->TxXferCount> 0)
 800184e:	e031      	b.n	80018b4 <spi_transmit+0x204>
		{
			/*Check if  TXE flag to be set and then send data*/
			if(hspi->Instance->SR & (SPI_FLAG_TXE))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d013      	beq.n	8001886 <spi_transmit+0x1d6>
			{
				*((__IO uint8_t *)&hspi->Instance->DR) = (*(const uint8_t *)hspi->pTxBuffPtr);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	330c      	adds	r3, #12
 8001868:	7812      	ldrb	r2, [r2, #0]
 800186a:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr +=sizeof(uint8_t);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	62da      	str	r2, [r3, #44]	@ 0x2c
				hspi->TxXferCount--;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800187a:	b29b      	uxth	r3, r3
 800187c:	3b01      	subs	r3, #1
 800187e:	b29a      	uxth	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	865a      	strh	r2, [r3, #50]	@ 0x32
 8001884:	e016      	b.n	80018b4 <spi_transmit+0x204>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8001886:	f000 fb4d 	bl	8001f24 <get_tick>
 800188a:	4602      	mov	r2, r0
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d803      	bhi.n	800189e <spi_transmit+0x1ee>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189c:	d102      	bne.n	80018a4 <spi_transmit+0x1f4>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d107      	bne.n	80018b4 <spi_transmit+0x204>
		         {
					error_code = DEV_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
 80018b2:	e019      	b.n	80018e8 <spi_transmit+0x238>
		while(hspi->TxXferCount> 0)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1c8      	bne.n	8001850 <spi_transmit+0x1a0>
			}
		}

	}

	  __IO uint32_t tmpreg_ovr = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->DR;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	613b      	str	r3, [r7, #16]
	  tmpreg_ovr = hspi->Instance->SR;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	613b      	str	r3, [r7, #16]

		hspi->State =  SPI_STATE_READY;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <spi_transmit+0x236>
	{
		return DEV_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <spi_transmit+0x238>
	}
	else
	{
		return DEV_OK;
 80018e6:	2300      	movs	r3, #0

	}

}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3720      	adds	r7, #32
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <spi_receive>:

StatusTypeDef spi_receive(SPI_HandleTypeDef *hspi,uint8_t *p_data, uint16_t size,uint32_t timeout)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af02      	add	r7, sp, #8
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	4613      	mov	r3, r2
 80018fe:	80fb      	strh	r3, [r7, #6]
	uint32_t tickstart;
	StatusTypeDef error_code = DEV_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	75fb      	strb	r3, [r7, #23]



	if(hspi->State != SPI_STATE_READY)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800190a:	2b01      	cmp	r3, #1
 800190c:	d007      	beq.n	800191e <spi_receive+0x2e>
	{
		error_code = DEV_BUSY;
 800190e:	2302      	movs	r3, #2
 8001910:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	e0d1      	b.n	8001ac2 <spi_receive+0x1d2>
	}

	  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001926:	d112      	bne.n	800194e <spi_receive+0x5e>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10e      	bne.n	800194e <spi_receive+0x5e>
	  {
	    hspi->State = SPI_STATE_BUSY_RX;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2204      	movs	r2, #4
 8001934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
	    return spi_transmit_receive(hspi, p_data, p_data, size, timeout);
 8001938:	88fa      	ldrh	r2, [r7, #6]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	4613      	mov	r3, r2
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 f8c0 	bl	8001aca <spi_transmit_receive>
 800194a:	4603      	mov	r3, r0
 800194c:	e0b9      	b.n	8001ac2 <spi_receive+0x1d2>
	  }

		tickstart = get_tick();
 800194e:	f000 fae9 	bl	8001f24 <get_tick>
 8001952:	6138      	str	r0, [r7, #16]

	if((p_data == NULL) || (size  == 0))
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <spi_receive+0x70>
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d107      	bne.n	8001970 <spi_receive+0x80>
	{
		error_code =  DEV_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	75fb      	strb	r3, [r7, #23]
		hspi->State = SPI_STATE_READY;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		return error_code;
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	e0a8      	b.n	8001ac2 <spi_receive+0x1d2>
	}


	/*Set the transaction information*/
	hspi->State  = SPI_STATE_BUSY_RX;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2204      	movs	r2, #4
 8001974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	hspi->ErrorCode = SPI_ERROR_NONE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->pRxBuffPtr = (uint8_t *)p_data;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi->RxXferSize =  size;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	88fa      	ldrh	r2, [r7, #6]
 8001988:	871a      	strh	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount=  size;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	88fa      	ldrh	r2, [r7, #6]
 800198e:	875a      	strh	r2, [r3, #58]	@ 0x3a


	hspi->pTxBuffPtr = (uint8_t *)NULL;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi->TxXferSize =  0;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	861a      	strh	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount=  0;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	865a      	strh	r2, [r3, #50]	@ 0x32

	if((hspi->Instance->CR1 & SPI_CR1_SPE ) !=  SPI_CR1_SPE)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019ac:	2b40      	cmp	r3, #64	@ 0x40
 80019ae:	d007      	beq.n	80019c0 <spi_receive+0xd0>
	{
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019be:	601a      	str	r2, [r3, #0]
	}

	/*Receive data in 8bit mode*/
	if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d16c      	bne.n	8001aa2 <spi_receive+0x1b2>
	{
		while(hspi->RxXferCount > 0)
 80019c8:	e033      	b.n	8001a32 <spi_receive+0x142>
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d015      	beq.n	8001a04 <spi_receive+0x114>
			{
				*((uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f103 020c 	add.w	r2, r3, #12
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e4:	7812      	ldrb	r2, [r2, #0]
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint8_t);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8001a02:	e016      	b.n	8001a32 <spi_receive+0x142>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8001a04:	f000 fa8e 	bl	8001f24 <get_tick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d803      	bhi.n	8001a1c <spi_receive+0x12c>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a1a:	d102      	bne.n	8001a22 <spi_receive+0x132>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d107      	bne.n	8001a32 <spi_receive+0x142>
		         {
					error_code = DEV_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8001a2e:	7dfb      	ldrb	r3, [r7, #23]
 8001a30:	e047      	b.n	8001ac2 <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1c6      	bne.n	80019ca <spi_receive+0xda>
 8001a3c:	e036      	b.n	8001aac <spi_receive+0x1bc>
	}
	else
	{
		while(hspi->RxXferCount > 0)
		{
			if(hspi->Instance->SR &  (SPI_FLAG_RXNE))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d013      	beq.n	8001a74 <spi_receive+0x184>
			{
				*((uint16_t *)hspi->pRxBuffPtr) = ( uint16_t)hspi->Instance->DR;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a56:	b292      	uxth	r2, r2
 8001a58:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a5e:	1c9a      	adds	r2, r3, #2
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	635a      	str	r2, [r3, #52]	@ 0x34
				hspi->RxXferCount--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8001a72:	e016      	b.n	8001aa2 <spi_receive+0x1b2>
			}
			else
			{
				if((((get_tick() - tickstart) >= timeout )&&(timeout != MAX_DELAY)) || (timeout == 0 ))
 8001a74:	f000 fa56 	bl	8001f24 <get_tick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d803      	bhi.n	8001a8c <spi_receive+0x19c>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8a:	d102      	bne.n	8001a92 <spi_receive+0x1a2>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d107      	bne.n	8001aa2 <spi_receive+0x1b2>
		         {
					error_code = DEV_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	75fb      	strb	r3, [r7, #23]
					hspi->State = SPI_STATE_READY;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
					return error_code;
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	e00f      	b.n	8001ac2 <spi_receive+0x1d2>
		while(hspi->RxXferCount > 0)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1c8      	bne.n	8001a3e <spi_receive+0x14e>
		           }
			}
		}
	}
	if(hspi->ErrorCode  != SPI_ERROR_NONE )
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <spi_receive+0x1c8>
	{
		error_code = DEV_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	75fb      	strb	r3, [r7, #23]
	}

	hspi->State =  SPI_STATE_READY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	return error_code;
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <spi_transmit_receive>:


StatusTypeDef spi_transmit_receive(SPI_HandleTypeDef *hspi,uint8_t *p_tx_data, uint8_t *p_rx_data, uint16_t size,uint32_t timeout)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b08a      	sub	sp, #40	@ 0x28
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	807b      	strh	r3, [r7, #2]
	  uint32_t             tmp_mode;
	  SPI_StateTypeDef     tmp_state;
	  uint32_t             tickstart;

	  /* Variable used to alternate Rx and Tx during transfer */
	  uint32_t             txallowed = 1U;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	@ 0x24
	  StatusTypeDef        error_code = DEV_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	  /* Init tickstart for timeout management*/
	  tickstart = get_tick();
 8001ae2:	f000 fa1f 	bl	8001f24 <get_tick>
 8001ae6:	61f8      	str	r0, [r7, #28]

	  /* Init temporary variables */
	  tmp_state           = hspi->State;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aee:	76fb      	strb	r3, [r7, #27]
	  tmp_mode            = hspi->Init.Mode;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	617b      	str	r3, [r7, #20]
	  initial_tx_count = size;
 8001af6:	887b      	ldrh	r3, [r7, #2]
 8001af8:	827b      	strh	r3, [r7, #18]

	  /* Set the transaction information */
	  hspi->ErrorCode   = SPI_ERROR_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	641a      	str	r2, [r3, #64]	@ 0x40
	  hspi->pRxBuffPtr  = (uint8_t *)p_rx_data;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	635a      	str	r2, [r3, #52]	@ 0x34
	  hspi->RxXferCount = size;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	887a      	ldrh	r2, [r7, #2]
 8001b0a:	875a      	strh	r2, [r3, #58]	@ 0x3a
	  hspi->RxXferSize  = size;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	871a      	strh	r2, [r3, #56]	@ 0x38
	  hspi->pTxBuffPtr  = (uint8_t *)p_tx_data;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	62da      	str	r2, [r3, #44]	@ 0x2c
	  hspi->TxXferCount = size;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	865a      	strh	r2, [r3, #50]	@ 0x32
	  hspi->TxXferSize  = size;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	887a      	ldrh	r2, [r7, #2]
 8001b22:	861a      	strh	r2, [r3, #48]	@ 0x30

	  /* Check if the SPI is already enabled */
	  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b2e:	2b40      	cmp	r3, #64	@ 0x40
 8001b30:	d007      	beq.n	8001b42 <spi_transmit_receive+0x78>
	  {
	    /* Enable SPI peripheral */
		SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b40:	601a      	str	r2, [r3, #0]
	  }
	  /* Transmit and Receive data in 16 Bit mode */
	  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b4a:	d17e      	bne.n	8001c4a <spi_transmit_receive+0x180>
	  {
		   if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <spi_transmit_receive+0x90>
 8001b54:	8a7b      	ldrh	r3, [r7, #18]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d16c      	bne.n	8001c34 <spi_transmit_receive+0x16a>
		    {
		      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5e:	881a      	ldrh	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60da      	str	r2, [r3, #12]
		      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6a:	1c9a      	adds	r2, r3, #2
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }

		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b7e:	e059      	b.n	8001c34 <spi_transmit_receive+0x16a>
		    {
		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d01b      	beq.n	8001bc6 <spi_transmit_receive+0xfc>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d016      	beq.n	8001bc6 <spi_transmit_receive+0xfc>
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d113      	bne.n	8001bc6 <spi_transmit_receive+0xfc>
		        {
		          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba2:	881a      	ldrh	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60da      	str	r2, [r3, #12]
		          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bae:	1c9a      	adds	r2, r3, #2
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24

		        }

		        /* Check RXNE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d019      	beq.n	8001c08 <spi_transmit_receive+0x13e>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d014      	beq.n	8001c08 <spi_transmit_receive+0x13e>
		        {
		          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001be8:	b292      	uxth	r2, r2
 8001bea:	801a      	strh	r2, [r3, #0]
		          hspi->pRxBuffPtr += sizeof(uint16_t);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf0:	1c9a      	adds	r2, r3, #2
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8001c04:	2301      	movs	r3, #1
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
		        }

		        if (((get_tick() - tickstart) >=  timeout) && (timeout != MAX_DELAY))
 8001c08:	f000 f98c 	bl	8001f24 <get_tick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d80d      	bhi.n	8001c34 <spi_transmit_receive+0x16a>
 8001c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1e:	d009      	beq.n	8001c34 <spi_transmit_receive+0x16a>
		        {
		  			error_code = DEV_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 8001c2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001c32:	e08f      	b.n	8001d54 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1a0      	bne.n	8001b80 <spi_transmit_receive+0xb6>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d19b      	bne.n	8001b80 <spi_transmit_receive+0xb6>
 8001c48:	e082      	b.n	8001d50 <spi_transmit_receive+0x286>
	  }

	  /* Transmit and Receive data in 8 Bit mode */
	  else
	  {
		    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_tx_count == 0x01U))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <spi_transmit_receive+0x18e>
 8001c52:	8a7b      	ldrh	r3, [r7, #18]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d171      	bne.n	8001d3c <spi_transmit_receive+0x272>
		    {
		      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	330c      	adds	r3, #12
 8001c62:	7812      	ldrb	r2, [r2, #0]
 8001c64:	701a      	strb	r2, [r3, #0]
		      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
		      hspi->TxXferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	865a      	strh	r2, [r3, #50]	@ 0x32
		    }
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c7e:	e05d      	b.n	8001d3c <spi_transmit_receive+0x272>
		      {

		        /* Check TXE flag */
		        if ((hspi->Instance->SR & (SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d01c      	beq.n	8001cc8 <spi_transmit_receive+0x1fe>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d017      	beq.n	8001cc8 <spi_transmit_receive+0x1fe>
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d114      	bne.n	8001cc8 <spi_transmit_receive+0x1fe>
		        {
		          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	330c      	adds	r3, #12
 8001ca8:	7812      	ldrb	r2, [r2, #0]
 8001caa:	701a      	strb	r2, [r3, #0]
		          hspi->pTxBuffPtr++;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
		          hspi->TxXferCount--;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	865a      	strh	r2, [r3, #50]	@ 0x32
		          /* Next Data is a reception (Rx). Tx not allowed */
		          txallowed = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	@ 0x24

		      }

		        /* Wait until RXNE flag is reset */
		        if ((hspi->Instance->SR & (SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d019      	beq.n	8001d0a <spi_transmit_receive+0x240>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d014      	beq.n	8001d0a <spi_transmit_receive+0x240>
		        {
		          (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	701a      	strb	r2, [r3, #0]
		          hspi->pRxBuffPtr++;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	635a      	str	r2, [r3, #52]	@ 0x34
		          hspi->RxXferCount--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	875a      	strh	r2, [r3, #58]	@ 0x3a
		          /* Next Data is a Transmission (Tx). Tx is allowed */
		          txallowed = 1U;
 8001d06:	2301      	movs	r3, #1
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
		        }
		        if ((((get_tick() - tickstart) >=  timeout) && ((timeout != MAX_DELAY))) || (timeout == 0U))
 8001d0a:	f000 f90b 	bl	8001f24 <get_tick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d803      	bhi.n	8001d22 <spi_transmit_receive+0x258>
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d102      	bne.n	8001d28 <spi_transmit_receive+0x25e>
 8001d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d109      	bne.n	8001d3c <spi_transmit_receive+0x272>
		        {
		  			error_code = DEV_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		  			hspi->State = SPI_STATE_READY;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		  			return error_code;
 8001d36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d3a:	e00b      	b.n	8001d54 <spi_transmit_receive+0x28a>
		    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d19c      	bne.n	8001c80 <spi_transmit_receive+0x1b6>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d197      	bne.n	8001c80 <spi_transmit_receive+0x1b6>
		        }
		      }
	  }
		    return error_code;
 8001d50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3728      	adds	r7, #40	@ 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
	return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_kill>:

int _kill(int pid, int sig)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d76:	f004 fad3 	bl	8006320 <__errno>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2216      	movs	r2, #22
 8001d7e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_exit>:

void _exit (int status)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ffe7 	bl	8001d6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d9e:	bf00      	nop
 8001da0:	e7fd      	b.n	8001d9e <_exit+0x12>

08001da2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	e00a      	b.n	8001dca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001db4:	f3af 8000 	nop.w
 8001db8:	4601      	mov	r1, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	60ba      	str	r2, [r7, #8]
 8001dc0:	b2ca      	uxtb	r2, r1
 8001dc2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	dbf0      	blt.n	8001db4 <_read+0x12>
	}

return len;
 8001dd2:	687b      	ldr	r3, [r7, #4]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e009      	b.n	8001e02 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	60ba      	str	r2, [r7, #8]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f8e2 	bl	8001fc0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	dbf1      	blt.n	8001dee <_write+0x12>
	}
	return len;
 8001e0a:	687b      	ldr	r3, [r7, #4]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_close>:

int _close(int file)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	return -1;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e3c:	605a      	str	r2, [r3, #4]
	return 0;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_isatty>:

int _isatty(int file)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	return 1;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
	return 0;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e84:	4a14      	ldr	r2, [pc, #80]	@ (8001ed8 <_sbrk+0x5c>)
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <_sbrk+0x60>)
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <_sbrk+0x64>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	@ (8001ee4 <_sbrk+0x68>)
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d207      	bcs.n	8001ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eac:	f004 fa38 	bl	8006320 <__errno>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	e009      	b.n	8001ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <_sbrk+0x64>)
 8001ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20020000 	.word	0x20020000
 8001edc:	00000400 	.word	0x00000400
 8001ee0:	20005388 	.word	0x20005388
 8001ee4:	20005a30 	.word	0x20005a30

08001ee8 <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 8001ef0:	f000 f818 	bl	8001f24 <get_tick>
 8001ef4:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f00:	d002      	beq.n	8001f08 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3301      	adds	r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 8001f08:	bf00      	nop
 8001f0a:	f000 f80b 	bl	8001f24 <get_tick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d8f7      	bhi.n	8001f0a <delay+0x22>

}
 8001f1a:	bf00      	nop
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <get_tick>:

uint32_t get_tick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f28:	b672      	cpsid	i
}
 8001f2a:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <get_tick+0x24>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a06      	ldr	r2, [pc, #24]	@ (8001f4c <get_tick+0x28>)
 8001f32:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f34:	b662      	cpsie	i
}
 8001f36:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8001f38:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <get_tick+0x28>)
 8001f3a:	681b      	ldr	r3, [r3, #0]

}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	2000538c 	.word	0x2000538c
 8001f4c:	20005390 	.word	0x20005390

08001f50 <tick_increment>:
static void tick_increment(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8001f54:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <tick_increment+0x18>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	4a03      	ldr	r2, [pc, #12]	@ (8001f68 <tick_increment+0x18>)
 8001f5c:	6013      	str	r3, [r2, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	2000538c 	.word	0x2000538c

08001f6c <timebase_init>:
void timebase_init(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f70:	b672      	cpsid	i
}
 8001f72:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per msecond*/
	SysTick->LOAD =  ONE_MSEC_LOAD - 1;
 8001f74:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <timebase_init+0x44>)
 8001f76:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001f7a:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <timebase_init+0x44>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8001f82:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb0 <timebase_init+0x44>)
 8001f84:	2204      	movs	r2, #4
 8001f86:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 8001f88:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <timebase_init+0x44>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a08      	ldr	r2, [pc, #32]	@ (8001fb0 <timebase_init+0x44>)
 8001f8e:	f043 0302 	orr.w	r3, r3, #2
 8001f92:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <timebase_init+0x44>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a05      	ldr	r2, [pc, #20]	@ (8001fb0 <timebase_init+0x44>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fa0:	b662      	cpsie	i
}
 8001fa2:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	tick_increment();
 8001fb8:	f7ff ffca 	bl	8001f50 <tick_increment>
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f84f 	bl	800206c <uart_write>
	return ch;
 8001fce:	687b      	ldr	r3, [r7, #4]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <debug_uart_init>:

void debug_uart_init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800205c <debug_uart_init+0x84>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800205c <debug_uart_init+0x84>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8002060 <debug_uart_init+0x88>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1c      	ldr	r2, [pc, #112]	@ (8002060 <debug_uart_init+0x88>)
 8001fee:	f023 0310 	bic.w	r3, r3, #16
 8001ff2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8002060 <debug_uart_init+0x88>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a19      	ldr	r2, [pc, #100]	@ (8002060 <debug_uart_init+0x88>)
 8001ffa:	f043 0320 	orr.w	r3, r3, #32
 8001ffe:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8002000:	4b17      	ldr	r3, [pc, #92]	@ (8002060 <debug_uart_init+0x88>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a16      	ldr	r2, [pc, #88]	@ (8002060 <debug_uart_init+0x88>)
 8002006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800200a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 800200c:	4b14      	ldr	r3, [pc, #80]	@ (8002060 <debug_uart_init+0x88>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4a13      	ldr	r2, [pc, #76]	@ (8002060 <debug_uart_init+0x88>)
 8002012:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002016:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8002018:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <debug_uart_init+0x88>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4a10      	ldr	r2, [pc, #64]	@ (8002060 <debug_uart_init+0x88>)
 800201e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002022:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8002024:	4b0e      	ldr	r3, [pc, #56]	@ (8002060 <debug_uart_init+0x88>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4a0d      	ldr	r2, [pc, #52]	@ (8002060 <debug_uart_init+0x88>)
 800202a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800202e:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8002030:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <debug_uart_init+0x84>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	4a09      	ldr	r2, [pc, #36]	@ (800205c <debug_uart_init+0x84>)
 8002036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800203a:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 800203c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002040:	4808      	ldr	r0, [pc, #32]	@ (8002064 <debug_uart_init+0x8c>)
 8002042:	f000 f83f 	bl	80020c4 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 8002046:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <debug_uart_init+0x90>)
 8002048:	2208      	movs	r2, #8
 800204a:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <debug_uart_init+0x90>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4a05      	ldr	r2, [pc, #20]	@ (8002068 <debug_uart_init+0x90>)
 8002052:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	40020000 	.word	0x40020000
 8002064:	00f42400 	.word	0x00f42400
 8002068:	40004400 	.word	0x40004400

0800206c <uart_write>:



static void uart_write(int ch)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8002074:	bf00      	nop
 8002076:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <uart_write+0x2c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f9      	beq.n	8002076 <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a04      	ldr	r2, [pc, #16]	@ (8002098 <uart_write+0x2c>)
 8002086:	b2db      	uxtb	r3, r3
 8002088:	6053      	str	r3, [r2, #4]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40004400 	.word	0x40004400

0800209c <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	085a      	lsrs	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	441a      	add	r2, r3
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	b29b      	uxth	r3, r3
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 80020ce:	6839      	ldr	r1, [r7, #0]
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff ffe3 	bl	800209c <compute_uart_bd>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461a      	mov	r2, r3
 80020da:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <uart_set_baudrate+0x24>)
 80020dc:	609a      	str	r2, [r3, #8]
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40004400 	.word	0x40004400

080020ec <ip_assigned_callback>:

volatile bool is_ip_assigned =  false;


void ip_assigned_callback(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <ip_assigned_callback+0x14>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	701a      	strb	r2, [r3, #0]
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	20005884 	.word	0x20005884

08002104 <ip_update_callback>:

void ip_update_callback(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
	is_ip_assigned =  true;
 8002108:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <ip_update_callback+0x14>)
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	20005884 	.word	0x20005884

0800211c <ip_conflict_callback>:
void ip_conflict_callback(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
	is_ip_assigned =  false;
 8002120:	4b03      	ldr	r3, [pc, #12]	@ (8002130 <ip_conflict_callback+0x14>)
 8002122:	2200      	movs	r2, #0
 8002124:	701a      	strb	r2, [r3, #0]
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	20005884 	.word	0x20005884

08002134 <wizchip_cs_pin_init>:
    .dhcp =  NETINFO_DHCP
};
/*Initialize CS Pin*/

void wizchip_cs_pin_init(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
	/*Enable clock for GPIOA*/
	RCC->AHB1ENR |=(1U <<0);
 8002138:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <wizchip_cs_pin_init+0x34>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213c:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <wizchip_cs_pin_init+0x34>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA4 as output pin*/
	GPIOA->MODER |=(1U<<8);
 8002144:	4b09      	ldr	r3, [pc, #36]	@ (800216c <wizchip_cs_pin_init+0x38>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a08      	ldr	r2, [pc, #32]	@ (800216c <wizchip_cs_pin_init+0x38>)
 800214a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800214e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<9);
 8002150:	4b06      	ldr	r3, [pc, #24]	@ (800216c <wizchip_cs_pin_init+0x38>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a05      	ldr	r2, [pc, #20]	@ (800216c <wizchip_cs_pin_init+0x38>)
 8002156:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800215a:	6013      	str	r3, [r2, #0]

}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	40020000 	.word	0x40020000

08002170 <wizchip_pin_cs_select>:
/*Select W5500 by pulling CS pin low*/
void wizchip_pin_cs_select(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
	GPIOA->ODR &=~(1U<<4);
 8002174:	4b05      	ldr	r3, [pc, #20]	@ (800218c <wizchip_pin_cs_select+0x1c>)
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	4a04      	ldr	r2, [pc, #16]	@ (800218c <wizchip_pin_cs_select+0x1c>)
 800217a:	f023 0310 	bic.w	r3, r3, #16
 800217e:	6153      	str	r3, [r2, #20]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40020000 	.word	0x40020000

08002190 <wizchip_pin_cs_deselect>:

/*Unselect W5500 by pulling CS pin high*/
void wizchip_pin_cs_deselect(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1U<<4);
 8002194:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <wizchip_pin_cs_deselect+0x1c>)
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <wizchip_pin_cs_deselect+0x1c>)
 800219a:	f043 0310 	orr.w	r3, r3, #16
 800219e:	6153      	str	r3, [r2, #20]
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40020000 	.word	0x40020000

080021b0 <wizchip_read_burst>:

/*Spi read multiple bytes*/
void wizchip_read_burst(uint8_t *buffer,uint16_t length)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
	 spi_receive(&hspi1,buffer, length, MAX_DELAY);
 80021bc:	887a      	ldrh	r2, [r7, #2]
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4803      	ldr	r0, [pc, #12]	@ (80021d4 <wizchip_read_burst+0x24>)
 80021c6:	f7ff fb93 	bl	80018f0 <spi_receive>

}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20005394 	.word	0x20005394

080021d8 <wizchip_read_byte>:

/*Spi read single byte*/

uint8_t wizchip_read_byte(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
	uint8_t byte;
	wizchip_read_burst(&byte,sizeof(byte));
 80021de:	1dfb      	adds	r3, r7, #7
 80021e0:	2101      	movs	r1, #1
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ffe4 	bl	80021b0 <wizchip_read_burst>
	return byte;
 80021e8:	79fb      	ldrb	r3, [r7, #7]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <wizchip_write_burst>:
/*Spi write multiple bytes*/
void wizchip_write_burst(uint8_t *buffer,uint16_t length)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
	 spi_transmit(&hspi1,buffer, length, MAX_DELAY);
 8002200:	887a      	ldrh	r2, [r7, #2]
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4803      	ldr	r0, [pc, #12]	@ (8002218 <wizchip_write_burst+0x24>)
 800220a:	f7ff fa51 	bl	80016b0 <spi_transmit>

}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20005394 	.word	0x20005394

0800221c <wizchip_write_byte>:

/*Spi write single byte*/
void wizchip_write_byte(uint8_t byte)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
	wizchip_write_burst(&byte,sizeof(byte));
 8002226:	1dfb      	adds	r3, r7, #7
 8002228:	2101      	movs	r1, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ffe2 	bl	80021f4 <wizchip_write_burst>
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <w5500_spi_init>:
 void w5500_spi_init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	hspi1.Instance = SPI1;
 800223c:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <w5500_spi_init+0x50>)
 800223e:	4a13      	ldr	r2, [pc, #76]	@ (800228c <w5500_spi_init+0x54>)
 8002240:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002242:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <w5500_spi_init+0x50>)
 8002244:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002248:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction =  SPI_DIRECTION_2LINES;
 800224a:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <w5500_spi_init+0x50>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002250:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <w5500_spi_init+0x50>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity =  SPI_POLARITY_LOW;
 8002256:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <w5500_spi_init+0x50>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase =  SPI_PHASE_1EDGE;
 800225c:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <w5500_spi_init+0x50>)
 800225e:	2200      	movs	r2, #0
 8002260:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS =  SPI_NSS_SOFT;
 8002262:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <w5500_spi_init+0x50>)
 8002264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002268:	619a      	str	r2, [r3, #24]
	hspi1.Init.BuadRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800226a:	4b07      	ldr	r3, [pc, #28]	@ (8002288 <w5500_spi_init+0x50>)
 800226c:	2200      	movs	r2, #0
 800226e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <w5500_spi_init+0x50>)
 8002272:	2200      	movs	r2, #0
 8002274:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002276:	4b04      	ldr	r3, [pc, #16]	@ (8002288 <w5500_spi_init+0x50>)
 8002278:	2200      	movs	r2, #0
 800227a:	629a      	str	r2, [r3, #40]	@ 0x28

	/*Initialize spi*/
	spi_init(&hspi1);
 800227c:	4802      	ldr	r0, [pc, #8]	@ (8002288 <w5500_spi_init+0x50>)
 800227e:	f7ff f9af 	bl	80015e0 <spi_init>

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20005394 	.word	0x20005394
 800228c:	40013000 	.word	0x40013000

08002290 <w5500_init>:


 void w5500_init(void)
 {
 8002290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002292:	b093      	sub	sp, #76	@ 0x4c
 8002294:	af0a      	add	r7, sp, #40	@ 0x28
     //Set RX and TX Buffer sizes

	 /*Set 2KB buffer for each of the 8 sockets*/
	 uint8_t rx_tx_buff_sizes[]= {2,2,2,2,2,2,2,2};
 8002296:	4a4f      	ldr	r2, [pc, #316]	@ (80023d4 <w5500_init+0x144>)
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022a0:	e883 0003 	stmia.w	r3, {r0, r1}

	 /*Initialize the W5500 with the RX and TX buffer sizes*/
	 wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80022a4:	f107 0214 	add.w	r2, r7, #20
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 f9e2 	bl	8005678 <wizchip_init>

	 //Register callback functions
	 reg_wizchip_cs_cbfunc(wizchip_pin_cs_select,wizchip_pin_cs_deselect);
 80022b4:	4948      	ldr	r1, [pc, #288]	@ (80023d8 <w5500_init+0x148>)
 80022b6:	4849      	ldr	r0, [pc, #292]	@ (80023dc <w5500_init+0x14c>)
 80022b8:	f003 f834 	bl	8005324 <reg_wizchip_cs_cbfunc>
	 reg_wizchip_spi_cbfunc(wizchip_read_byte,wizchip_write_byte);
 80022bc:	4948      	ldr	r1, [pc, #288]	@ (80023e0 <w5500_init+0x150>)
 80022be:	4849      	ldr	r0, [pc, #292]	@ (80023e4 <w5500_init+0x154>)
 80022c0:	f003 f856 	bl	8005370 <reg_wizchip_spi_cbfunc>
	 reg_wizchip_spiburst_cbfunc(wizchip_read_burst,wizchip_write_burst);
 80022c4:	4948      	ldr	r1, [pc, #288]	@ (80023e8 <w5500_init+0x158>)
 80022c6:	4849      	ldr	r0, [pc, #292]	@ (80023ec <w5500_init+0x15c>)
 80022c8:	f003 f87e 	bl	80053c8 <reg_wizchip_spiburst_cbfunc>

	 setSn_RXBUF_SIZE(1,8); /*Set RX buffer size to 8KB for socket 1*/
 80022cc:	2108      	movs	r1, #8
 80022ce:	f641 6028 	movw	r0, #7720	@ 0x1e28
 80022d2:	f002 fd29 	bl	8004d28 <WIZCHIP_WRITE>
	 setSn_TXBUF_SIZE(1,8); /*Set TX buffer size to 8KB for socket 1*/
 80022d6:	2108      	movs	r1, #8
 80022d8:	f641 7028 	movw	r0, #7976	@ 0x1f28
 80022dc:	f002 fd24 	bl	8004d28 <WIZCHIP_WRITE>

	 /*Set MAC Address*/
	 setSHAR(net_info.mac);
 80022e0:	2206      	movs	r2, #6
 80022e2:	4943      	ldr	r1, [pc, #268]	@ (80023f0 <w5500_init+0x160>)
 80022e4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80022e8:	f002 fdcc 	bl	8004e84 <WIZCHIP_WRITE_BUF>

	 /*Initialize DHCP*/
	 DHCP_init(DHCP_SOCKET,dhcp_buffer);
 80022ec:	4941      	ldr	r1, [pc, #260]	@ (80023f4 <w5500_init+0x164>)
 80022ee:	2000      	movs	r0, #0
 80022f0:	f001 fbaa 	bl	8003a48 <DHCP_init>

	 //Register DHCP Callbacks
	 reg_dhcp_cbfunc(ip_assigned_callback,ip_update_callback,ip_conflict_callback);
 80022f4:	4a40      	ldr	r2, [pc, #256]	@ (80023f8 <w5500_init+0x168>)
 80022f6:	4941      	ldr	r1, [pc, #260]	@ (80023fc <w5500_init+0x16c>)
 80022f8:	4841      	ldr	r0, [pc, #260]	@ (8002400 <w5500_init+0x170>)
 80022fa:	f000 f903 	bl	8002504 <reg_dhcp_cbfunc>

	 /*Wait for IP assignment from DHCP*/
	 uint16_t timeout_counter =  10000;
 80022fe:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002302:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8002304:	e004      	b.n	8002310 <w5500_init+0x80>
	 {
		 DHCP_run();
 8002306:	f001 f9e7 	bl	80036d8 <DHCP_run>
		 timeout_counter--;
 800230a:	8bfb      	ldrh	r3, [r7, #30]
 800230c:	3b01      	subs	r3, #1
 800230e:	83fb      	strh	r3, [r7, #30]
	 while((!is_ip_assigned) && (timeout_counter> 0))
 8002310:	4b3c      	ldr	r3, [pc, #240]	@ (8002404 <w5500_init+0x174>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f083 0301 	eor.w	r3, r3, #1
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <w5500_init+0x96>
 8002320:	8bfb      	ldrh	r3, [r7, #30]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ef      	bne.n	8002306 <w5500_init+0x76>
	 }

	 if(!is_ip_assigned)
 8002326:	4b37      	ldr	r3, [pc, #220]	@ (8002404 <w5500_init+0x174>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	f083 0301 	eor.w	r3, r3, #1
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d149      	bne.n	80023ca <w5500_init+0x13a>
	 {
		 return;
	 }

	 /*Get network settings from DHCP*/
	 getIPfromDHCP(net_info.ip);
 8002336:	4834      	ldr	r0, [pc, #208]	@ (8002408 <w5500_init+0x178>)
 8002338:	f001 fc30 	bl	8003b9c <getIPfromDHCP>
	 getGWfromDHCP(net_info.gw);
 800233c:	4833      	ldr	r0, [pc, #204]	@ (800240c <w5500_init+0x17c>)
 800233e:	f001 fc4d 	bl	8003bdc <getGWfromDHCP>
	 getSNfromDHCP(net_info.sn);
 8002342:	4833      	ldr	r0, [pc, #204]	@ (8002410 <w5500_init+0x180>)
 8002344:	f001 fc6a 	bl	8003c1c <getSNfromDHCP>


	/* Format and print the assigned IP, Gateway, and Subnet mask */
	sprintf(temp_buffer,
		"IP Address:  %d.%d.%d.%d\r\nGateway:  %d.%d.%d.%d\r\nSubnet mask: %d.%d.%d.%d\r\n",
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002348:	4b29      	ldr	r3, [pc, #164]	@ (80023f0 <w5500_init+0x160>)
 800234a:	799b      	ldrb	r3, [r3, #6]
	sprintf(temp_buffer,
 800234c:	469c      	mov	ip, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800234e:	4b28      	ldr	r3, [pc, #160]	@ (80023f0 <w5500_init+0x160>)
 8002350:	79db      	ldrb	r3, [r3, #7]
	sprintf(temp_buffer,
 8002352:	469e      	mov	lr, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8002354:	4b26      	ldr	r3, [pc, #152]	@ (80023f0 <w5500_init+0x160>)
 8002356:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(temp_buffer,
 8002358:	461a      	mov	r2, r3
		net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800235a:	4b25      	ldr	r3, [pc, #148]	@ (80023f0 <w5500_init+0x160>)
 800235c:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(temp_buffer,
 800235e:	4619      	mov	r1, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002360:	4b23      	ldr	r3, [pc, #140]	@ (80023f0 <w5500_init+0x160>)
 8002362:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(temp_buffer,
 8002364:	4618      	mov	r0, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002366:	4b22      	ldr	r3, [pc, #136]	@ (80023f0 <w5500_init+0x160>)
 8002368:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(temp_buffer,
 800236a:	461c      	mov	r4, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 800236c:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <w5500_init+0x160>)
 800236e:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(temp_buffer,
 8002370:	461d      	mov	r5, r3
		net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8002372:	4b1f      	ldr	r3, [pc, #124]	@ (80023f0 <w5500_init+0x160>)
 8002374:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(temp_buffer,
 8002376:	461e      	mov	r6, r3
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002378:	4b1d      	ldr	r3, [pc, #116]	@ (80023f0 <w5500_init+0x160>)
 800237a:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(temp_buffer,
 800237c:	60fb      	str	r3, [r7, #12]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 800237e:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <w5500_init+0x160>)
 8002380:	7adb      	ldrb	r3, [r3, #11]
	sprintf(temp_buffer,
 8002382:	60bb      	str	r3, [r7, #8]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 8002384:	4b1a      	ldr	r3, [pc, #104]	@ (80023f0 <w5500_init+0x160>)
 8002386:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(temp_buffer,
 8002388:	607b      	str	r3, [r7, #4]
		net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3]
 800238a:	4b19      	ldr	r3, [pc, #100]	@ (80023f0 <w5500_init+0x160>)
 800238c:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(temp_buffer,
 800238e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	9308      	str	r3, [sp, #32]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	9307      	str	r3, [sp, #28]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	9306      	str	r3, [sp, #24]
 800239c:	9605      	str	r6, [sp, #20]
 800239e:	9504      	str	r5, [sp, #16]
 80023a0:	9403      	str	r4, [sp, #12]
 80023a2:	9002      	str	r0, [sp, #8]
 80023a4:	9101      	str	r1, [sp, #4]
 80023a6:	9200      	str	r2, [sp, #0]
 80023a8:	4673      	mov	r3, lr
 80023aa:	4662      	mov	r2, ip
 80023ac:	4919      	ldr	r1, [pc, #100]	@ (8002414 <w5500_init+0x184>)
 80023ae:	481a      	ldr	r0, [pc, #104]	@ (8002418 <w5500_init+0x188>)
 80023b0:	f003 fe40 	bl	8006034 <siprintf>
	);

    printf("*************Network Information************************\r\n");
 80023b4:	4819      	ldr	r0, [pc, #100]	@ (800241c <w5500_init+0x18c>)
 80023b6:	f003 fe35 	bl	8006024 <puts>
    printf("%s", temp_buffer);
 80023ba:	4917      	ldr	r1, [pc, #92]	@ (8002418 <w5500_init+0x188>)
 80023bc:	4818      	ldr	r0, [pc, #96]	@ (8002420 <w5500_init+0x190>)
 80023be:	f003 fdc1 	bl	8005f44 <iprintf>

    /*Apply the network configurations to the W5500*/
    wizchip_setnetinfo(&net_info);
 80023c2:	480b      	ldr	r0, [pc, #44]	@ (80023f0 <w5500_init+0x160>)
 80023c4:	f003 fbc8 	bl	8005b58 <wizchip_setnetinfo>
 80023c8:	e000      	b.n	80023cc <w5500_init+0x13c>
		 return;
 80023ca:	bf00      	nop

 }
 80023cc:	3724      	adds	r7, #36	@ 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	bf00      	nop
 80023d4:	08007608 	.word	0x08007608
 80023d8:	08002191 	.word	0x08002191
 80023dc:	08002171 	.word	0x08002171
 80023e0:	0800221d 	.word	0x0800221d
 80023e4:	080021d9 	.word	0x080021d9
 80023e8:	080021f5 	.word	0x080021f5
 80023ec:	080021b1 	.word	0x080021b1
 80023f0:	20000020 	.word	0x20000020
 80023f4:	20005484 	.word	0x20005484
 80023f8:	0800211d 	.word	0x0800211d
 80023fc:	08002105 	.word	0x08002105
 8002400:	080020ed 	.word	0x080020ed
 8002404:	20005884 	.word	0x20005884
 8002408:	20000026 	.word	0x20000026
 800240c:	2000002e 	.word	0x2000002e
 8002410:	2000002a 	.word	0x2000002a
 8002414:	0800757c 	.word	0x0800757c
 8002418:	200053d8 	.word	0x200053d8
 800241c:	080075c8 	.word	0x080075c8
 8002420:	08007604 	.word	0x08007604

08002424 <Reset_Handler>:
 8002424:	480d      	ldr	r0, [pc, #52]	@ (800245c <LoopForever+0x2>)
 8002426:	4685      	mov	sp, r0
 8002428:	f3af 8000 	nop.w
 800242c:	480c      	ldr	r0, [pc, #48]	@ (8002460 <LoopForever+0x6>)
 800242e:	490d      	ldr	r1, [pc, #52]	@ (8002464 <LoopForever+0xa>)
 8002430:	4a0d      	ldr	r2, [pc, #52]	@ (8002468 <LoopForever+0xe>)
 8002432:	2300      	movs	r3, #0
 8002434:	e002      	b.n	800243c <LoopCopyDataInit>

08002436 <CopyDataInit>:
 8002436:	58d4      	ldr	r4, [r2, r3]
 8002438:	50c4      	str	r4, [r0, r3]
 800243a:	3304      	adds	r3, #4

0800243c <LoopCopyDataInit>:
 800243c:	18c4      	adds	r4, r0, r3
 800243e:	428c      	cmp	r4, r1
 8002440:	d3f9      	bcc.n	8002436 <CopyDataInit>
 8002442:	4a0a      	ldr	r2, [pc, #40]	@ (800246c <LoopForever+0x12>)
 8002444:	4c0a      	ldr	r4, [pc, #40]	@ (8002470 <LoopForever+0x16>)
 8002446:	2300      	movs	r3, #0
 8002448:	e001      	b.n	800244e <LoopFillZerobss>

0800244a <FillZerobss>:
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	3204      	adds	r2, #4

0800244e <LoopFillZerobss>:
 800244e:	42a2      	cmp	r2, r4
 8002450:	d3fb      	bcc.n	800244a <FillZerobss>
 8002452:	f003 ff6b 	bl	800632c <__libc_init_array>
 8002456:	f7fe ff4b 	bl	80012f0 <main>

0800245a <LoopForever>:
 800245a:	e7fe      	b.n	800245a <LoopForever>
 800245c:	20020000 	.word	0x20020000
 8002460:	20000000 	.word	0x20000000
 8002464:	200000e0 	.word	0x200000e0
 8002468:	08007710 	.word	0x08007710
 800246c:	200000e0 	.word	0x200000e0
 8002470:	20005a2c 	.word	0x20005a2c

08002474 <ADC_IRQHandler>:
 8002474:	e7fe      	b.n	8002474 <ADC_IRQHandler>
	...

08002478 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 800247c:	2204      	movs	r2, #4
 800247e:	4909      	ldr	r1, [pc, #36]	@ (80024a4 <default_ip_assign+0x2c>)
 8002480:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002484:	f002 fcfe 	bl	8004e84 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8002488:	2204      	movs	r2, #4
 800248a:	4907      	ldr	r1, [pc, #28]	@ (80024a8 <default_ip_assign+0x30>)
 800248c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8002490:	f002 fcf8 	bl	8004e84 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8002494:	2204      	movs	r2, #4
 8002496:	4905      	ldr	r1, [pc, #20]	@ (80024ac <default_ip_assign+0x34>)
 8002498:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800249c:	f002 fcf2 	bl	8004e84 <WIZCHIP_WRITE_BUF>
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20005894 	.word	0x20005894
 80024a8:	2000589c 	.word	0x2000589c
 80024ac:	20005898 	.word	0x20005898

080024b0 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 80024b4:	2180      	movs	r1, #128	@ 0x80
 80024b6:	2000      	movs	r0, #0
 80024b8:	f002 fc36 	bl	8004d28 <WIZCHIP_WRITE>
   getMR(); // for delay
 80024bc:	2000      	movs	r0, #0
 80024be:	f002 fbe7 	bl	8004c90 <WIZCHIP_READ>
   default_ip_assign();
 80024c2:	f7ff ffd9 	bl	8002478 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 80024c6:	2206      	movs	r2, #6
 80024c8:	4903      	ldr	r1, [pc, #12]	@ (80024d8 <default_ip_update+0x28>)
 80024ca:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80024ce:	f002 fcd9 	bl	8004e84 <WIZCHIP_WRITE_BUF>
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200058b4 	.word	0x200058b4

080024dc <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 80024e0:	2180      	movs	r1, #128	@ 0x80
 80024e2:	2000      	movs	r0, #0
 80024e4:	f002 fc20 	bl	8004d28 <WIZCHIP_WRITE>
	getMR(); // for delay
 80024e8:	2000      	movs	r0, #0
 80024ea:	f002 fbd1 	bl	8004c90 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 80024ee:	2206      	movs	r2, #6
 80024f0:	4903      	ldr	r1, [pc, #12]	@ (8002500 <default_ip_conflict+0x24>)
 80024f2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80024f6:	f002 fcc5 	bl	8004e84 <WIZCHIP_WRITE_BUF>
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200058b4 	.word	0x200058b4

08002504 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8002510:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <reg_dhcp_cbfunc+0x50>)
 8002512:	4a11      	ldr	r2, [pc, #68]	@ (8002558 <reg_dhcp_cbfunc+0x54>)
 8002514:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8002516:	4b11      	ldr	r3, [pc, #68]	@ (800255c <reg_dhcp_cbfunc+0x58>)
 8002518:	4a11      	ldr	r2, [pc, #68]	@ (8002560 <reg_dhcp_cbfunc+0x5c>)
 800251a:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 800251c:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <reg_dhcp_cbfunc+0x60>)
 800251e:	4a12      	ldr	r2, [pc, #72]	@ (8002568 <reg_dhcp_cbfunc+0x64>)
 8002520:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <reg_dhcp_cbfunc+0x2a>
 8002528:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <reg_dhcp_cbfunc+0x50>)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <reg_dhcp_cbfunc+0x36>
 8002534:	4a09      	ldr	r2, [pc, #36]	@ (800255c <reg_dhcp_cbfunc+0x58>)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <reg_dhcp_cbfunc+0x42>
 8002540:	4a08      	ldr	r2, [pc, #32]	@ (8002564 <reg_dhcp_cbfunc+0x60>)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6013      	str	r3, [r2, #0]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000048 	.word	0x20000048
 8002558:	08002479 	.word	0x08002479
 800255c:	2000004c 	.word	0x2000004c
 8002560:	080024b1 	.word	0x080024b1
 8002564:	20000050 	.word	0x20000050
 8002568:	080024dd 	.word	0x080024dd

0800256c <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8002572:	463b      	mov	r3, r7
 8002574:	2206      	movs	r2, #6
 8002576:	4619      	mov	r1, r3
 8002578:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800257c:	f002 fc22 	bl	8004dc4 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8002580:	4b72      	ldr	r3, [pc, #456]	@ (800274c <makeDHCPMSG+0x1e0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2201      	movs	r2, #1
 8002586:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8002588:	4b70      	ldr	r3, [pc, #448]	@ (800274c <makeDHCPMSG+0x1e0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2201      	movs	r2, #1
 800258e:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8002590:	4b6e      	ldr	r3, [pc, #440]	@ (800274c <makeDHCPMSG+0x1e0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2206      	movs	r2, #6
 8002596:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8002598:	4b6c      	ldr	r3, [pc, #432]	@ (800274c <makeDHCPMSG+0x1e0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2200      	movs	r2, #0
 800259e:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 80025a0:	4b6a      	ldr	r3, [pc, #424]	@ (800274c <makeDHCPMSG+0x1e0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3304      	adds	r3, #4
 80025a6:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 80025a8:	4b69      	ldr	r3, [pc, #420]	@ (8002750 <makeDHCPMSG+0x1e4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	0e1b      	lsrs	r3, r3, #24
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 80025b4:	4b66      	ldr	r3, [pc, #408]	@ (8002750 <makeDHCPMSG+0x1e4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0c1a      	lsrs	r2, r3, #16
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	3301      	adds	r3, #1
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80025c2:	4b63      	ldr	r3, [pc, #396]	@ (8002750 <makeDHCPMSG+0x1e4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	0a1a      	lsrs	r2, r3, #8
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	3302      	adds	r3, #2
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80025d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002750 <makeDHCPMSG+0x1e4>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3303      	adds	r3, #3
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80025dc:	4b5b      	ldr	r3, [pc, #364]	@ (800274c <makeDHCPMSG+0x1e0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2200      	movs	r2, #0
 80025e2:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80025e4:	4b59      	ldr	r3, [pc, #356]	@ (800274c <makeDHCPMSG+0x1e0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	330a      	adds	r3, #10
 80025ea:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2280      	movs	r2, #128	@ 0x80
 80025f0:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	3301      	adds	r3, #1
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 80025fa:	4b54      	ldr	r3, [pc, #336]	@ (800274c <makeDHCPMSG+0x1e0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2200      	movs	r2, #0
 8002600:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8002602:	4b52      	ldr	r3, [pc, #328]	@ (800274c <makeDHCPMSG+0x1e0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2200      	movs	r2, #0
 8002608:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 800260a:	4b50      	ldr	r3, [pc, #320]	@ (800274c <makeDHCPMSG+0x1e0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2200      	movs	r2, #0
 8002610:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8002612:	4b4e      	ldr	r3, [pc, #312]	@ (800274c <makeDHCPMSG+0x1e0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2200      	movs	r2, #0
 8002618:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 800261a:	4b4c      	ldr	r3, [pc, #304]	@ (800274c <makeDHCPMSG+0x1e0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2200      	movs	r2, #0
 8002620:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8002622:	4b4a      	ldr	r3, [pc, #296]	@ (800274c <makeDHCPMSG+0x1e0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 800262a:	4b48      	ldr	r3, [pc, #288]	@ (800274c <makeDHCPMSG+0x1e0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8002632:	4b46      	ldr	r3, [pc, #280]	@ (800274c <makeDHCPMSG+0x1e0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2200      	movs	r2, #0
 8002638:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 800263a:	4b44      	ldr	r3, [pc, #272]	@ (800274c <makeDHCPMSG+0x1e0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8002642:	4b42      	ldr	r3, [pc, #264]	@ (800274c <makeDHCPMSG+0x1e0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2200      	movs	r2, #0
 8002648:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 800264a:	4b40      	ldr	r3, [pc, #256]	@ (800274c <makeDHCPMSG+0x1e0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2200      	movs	r2, #0
 8002650:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8002652:	4b3e      	ldr	r3, [pc, #248]	@ (800274c <makeDHCPMSG+0x1e0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2200      	movs	r2, #0
 8002658:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 800265a:	4b3c      	ldr	r3, [pc, #240]	@ (800274c <makeDHCPMSG+0x1e0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2200      	movs	r2, #0
 8002660:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8002662:	4b3a      	ldr	r3, [pc, #232]	@ (800274c <makeDHCPMSG+0x1e0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2200      	movs	r2, #0
 8002668:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 800266a:	4b38      	ldr	r3, [pc, #224]	@ (800274c <makeDHCPMSG+0x1e0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8002672:	4b36      	ldr	r3, [pc, #216]	@ (800274c <makeDHCPMSG+0x1e0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2200      	movs	r2, #0
 8002678:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 800267a:	4b34      	ldr	r3, [pc, #208]	@ (800274c <makeDHCPMSG+0x1e0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a35      	ldr	r2, [pc, #212]	@ (8002754 <makeDHCPMSG+0x1e8>)
 8002680:	7812      	ldrb	r2, [r2, #0]
 8002682:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8002684:	4b31      	ldr	r3, [pc, #196]	@ (800274c <makeDHCPMSG+0x1e0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a32      	ldr	r2, [pc, #200]	@ (8002754 <makeDHCPMSG+0x1e8>)
 800268a:	7852      	ldrb	r2, [r2, #1]
 800268c:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 800268e:	4b2f      	ldr	r3, [pc, #188]	@ (800274c <makeDHCPMSG+0x1e0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a30      	ldr	r2, [pc, #192]	@ (8002754 <makeDHCPMSG+0x1e8>)
 8002694:	7892      	ldrb	r2, [r2, #2]
 8002696:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8002698:	4b2c      	ldr	r3, [pc, #176]	@ (800274c <makeDHCPMSG+0x1e0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a2d      	ldr	r2, [pc, #180]	@ (8002754 <makeDHCPMSG+0x1e8>)
 800269e:	78d2      	ldrb	r2, [r2, #3]
 80026a0:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 80026a2:	4b2a      	ldr	r3, [pc, #168]	@ (800274c <makeDHCPMSG+0x1e0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002754 <makeDHCPMSG+0x1e8>)
 80026a8:	7912      	ldrb	r2, [r2, #4]
 80026aa:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80026ae:	4b27      	ldr	r3, [pc, #156]	@ (800274c <makeDHCPMSG+0x1e0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a28      	ldr	r2, [pc, #160]	@ (8002754 <makeDHCPMSG+0x1e8>)
 80026b4:	7952      	ldrb	r2, [r2, #5]
 80026b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80026ba:	2306      	movs	r3, #6
 80026bc:	73fb      	strb	r3, [r7, #15]
 80026be:	e008      	b.n	80026d2 <makeDHCPMSG+0x166>
 80026c0:	4b22      	ldr	r3, [pc, #136]	@ (800274c <makeDHCPMSG+0x1e0>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	4413      	add	r3, r2
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	3301      	adds	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b0f      	cmp	r3, #15
 80026d6:	d9f3      	bls.n	80026c0 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e009      	b.n	80026f2 <makeDHCPMSG+0x186>
 80026de:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <makeDHCPMSG+0x1e0>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	4413      	add	r3, r2
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	3301      	adds	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2b3f      	cmp	r3, #63	@ 0x3f
 80026f6:	d9f2      	bls.n	80026de <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	73fb      	strb	r3, [r7, #15]
 80026fc:	e009      	b.n	8002712 <makeDHCPMSG+0x1a6>
 80026fe:	4b13      	ldr	r3, [pc, #76]	@ (800274c <makeDHCPMSG+0x1e0>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	4413      	add	r3, r2
 8002706:	2200      	movs	r2, #0
 8002708:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	3301      	adds	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002716:	2b00      	cmp	r3, #0
 8002718:	daf1      	bge.n	80026fe <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 800271a:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <makeDHCPMSG+0x1e0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2263      	movs	r2, #99	@ 0x63
 8002720:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8002724:	4b09      	ldr	r3, [pc, #36]	@ (800274c <makeDHCPMSG+0x1e0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2282      	movs	r2, #130	@ 0x82
 800272a:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 800272e:	4b07      	ldr	r3, [pc, #28]	@ (800274c <makeDHCPMSG+0x1e0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2253      	movs	r2, #83	@ 0x53
 8002734:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8002738:	4b04      	ldr	r3, [pc, #16]	@ (800274c <makeDHCPMSG+0x1e0>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2263      	movs	r2, #99	@ 0x63
 800273e:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200058b0 	.word	0x200058b0
 8002750:	200058ac 	.word	0x200058ac
 8002754:	200058b4 	.word	0x200058b4

08002758 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8002762:	f7ff ff03 	bl	800256c <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8002766:	4b56      	ldr	r3, [pc, #344]	@ (80028c0 <send_DHCP_DISCOVER+0x168>)
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 800276c:	4b54      	ldr	r3, [pc, #336]	@ (80028c0 <send_DHCP_DISCOVER+0x168>)
 800276e:	2200      	movs	r2, #0
 8002770:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8002772:	4b53      	ldr	r3, [pc, #332]	@ (80028c0 <send_DHCP_DISCOVER+0x168>)
 8002774:	2200      	movs	r2, #0
 8002776:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8002778:	4b51      	ldr	r3, [pc, #324]	@ (80028c0 <send_DHCP_DISCOVER+0x168>)
 800277a:	2200      	movs	r2, #0
 800277c:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 800277e:	4b51      	ldr	r3, [pc, #324]	@ (80028c4 <send_DHCP_DISCOVER+0x16c>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8002784:	4b4f      	ldr	r3, [pc, #316]	@ (80028c4 <send_DHCP_DISCOVER+0x16c>)
 8002786:	2200      	movs	r2, #0
 8002788:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 800278a:	4b4e      	ldr	r3, [pc, #312]	@ (80028c4 <send_DHCP_DISCOVER+0x16c>)
 800278c:	2200      	movs	r2, #0
 800278e:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8002790:	4b4c      	ldr	r3, [pc, #304]	@ (80028c4 <send_DHCP_DISCOVER+0x16c>)
 8002792:	2200      	movs	r2, #0
 8002794:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8002796:	2304      	movs	r3, #4
 8002798:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800279a:	4b4b      	ldr	r3, [pc, #300]	@ (80028c8 <send_DHCP_DISCOVER+0x170>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	88bb      	ldrh	r3, [r7, #4]
 80027a0:	1c59      	adds	r1, r3, #1
 80027a2:	80b9      	strh	r1, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	2235      	movs	r2, #53	@ 0x35
 80027a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80027ac:	4b46      	ldr	r3, [pc, #280]	@ (80028c8 <send_DHCP_DISCOVER+0x170>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	88bb      	ldrh	r3, [r7, #4]
 80027b2:	1c59      	adds	r1, r3, #1
 80027b4:	80b9      	strh	r1, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80027be:	4b42      	ldr	r3, [pc, #264]	@ (80028c8 <send_DHCP_DISCOVER+0x170>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	88bb      	ldrh	r3, [r7, #4]
 80027c4:	1c59      	adds	r1, r3, #1
 80027c6:	80b9      	strh	r1, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80027d0:	4b3d      	ldr	r3, [pc, #244]	@ (80028c8 <send_DHCP_DISCOVER+0x170>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	88bb      	ldrh	r3, [r7, #4]
 80027d6:	1c59      	adds	r1, r3, #1
 80027d8:	80b9      	strh	r1, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	223d      	movs	r2, #61	@ 0x3d
 80027de:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80027e2:	4b39      	ldr	r3, [pc, #228]	@ (80028c8 <send_DHCP_DISCOVER+0x170>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	88bb      	ldrh	r3, [r7, #4]
 80027e8:	1c59      	adds	r1, r3, #1
 80027ea:	80b9      	strh	r1, [r7, #4]
 80027ec:	4413      	add	r3, r2
 80027ee:	2207      	movs	r2, #7
 80027f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80027f4:	4b34      	ldr	r3, [pc, #208]	@ (80028c8 <send_DHCP_DISCOVER+0x170>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	88bb      	ldrh	r3, [r7, #4]
 80027fa:	1c59      	adds	r1, r3, #1
 80027fc:	80b9      	strh	r1, [r7, #4]
 80027fe:	4413      	add	r3, r2
 8002800:	2201      	movs	r2, #1
 8002802:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8002806:	4b30      	ldr	r3, [pc, #192]	@ (80028c8 <send_DHCP_DISCOVER+0x170>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	88bb      	ldrh	r3, [r7, #4]
 800280c:	1c59      	adds	r1, r3, #1
 800280e:	80b9      	strh	r1, [r7, #4]
 8002810:	4618      	mov	r0, r3
 8002812:	4b2e      	ldr	r3, [pc, #184]	@ (80028cc <send_DHCP_DISCOVER+0x174>)
 8002814:	7819      	ldrb	r1, [r3, #0]
 8002816:	1813      	adds	r3, r2, r0
 8002818:	460a      	mov	r2, r1
 800281a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800281e:	4b2a      	ldr	r3, [pc, #168]	@ (80028c8 <send_DHCP_DISCOVER+0x170>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	88bb      	ldrh	r3, [r7, #4]
 8002824:	1c59      	adds	r1, r3, #1
 8002826:	80b9      	strh	r1, [r7, #4]
 8002828:	4618      	mov	r0, r3
 800282a:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <send_DHCP_DISCOVER+0x174>)
 800282c:	7859      	ldrb	r1, [r3, #1]
 800282e:	1813      	adds	r3, r2, r0
 8002830:	460a      	mov	r2, r1
 8002832:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8002836:	4b24      	ldr	r3, [pc, #144]	@ (80028c8 <send_DHCP_DISCOVER+0x170>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	88bb      	ldrh	r3, [r7, #4]
 800283c:	1c59      	adds	r1, r3, #1
 800283e:	80b9      	strh	r1, [r7, #4]
 8002840:	4618      	mov	r0, r3
 8002842:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <send_DHCP_DISCOVER+0x174>)
 8002844:	7899      	ldrb	r1, [r3, #2]
 8002846:	1813      	adds	r3, r2, r0
 8002848:	460a      	mov	r2, r1
 800284a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800284e:	4b1e      	ldr	r3, [pc, #120]	@ (80028c8 <send_DHCP_DISCOVER+0x170>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	88bb      	ldrh	r3, [r7, #4]
 8002854:	1c59      	adds	r1, r3, #1
 8002856:	80b9      	strh	r1, [r7, #4]
 8002858:	4618      	mov	r0, r3
 800285a:	4b1c      	ldr	r3, [pc, #112]	@ (80028cc <send_DHCP_DISCOVER+0x174>)
 800285c:	78d9      	ldrb	r1, [r3, #3]
 800285e:	1813      	adds	r3, r2, r0
 8002860:	460a      	mov	r2, r1
 8002862:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8002866:	4b18      	ldr	r3, [pc, #96]	@ (80028c8 <send_DHCP_DISCOVER+0x170>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	88bb      	ldrh	r3, [r7, #4]
 800286c:	1c59      	adds	r1, r3, #1
 800286e:	80b9      	strh	r1, [r7, #4]
 8002870:	4618      	mov	r0, r3
 8002872:	4b16      	ldr	r3, [pc, #88]	@ (80028cc <send_DHCP_DISCOVER+0x174>)
 8002874:	7919      	ldrb	r1, [r3, #4]
 8002876:	1813      	adds	r3, r2, r0
 8002878:	460a      	mov	r2, r1
 800287a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800287e:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <send_DHCP_DISCOVER+0x170>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	88bb      	ldrh	r3, [r7, #4]
 8002884:	1c59      	adds	r1, r3, #1
 8002886:	80b9      	strh	r1, [r7, #4]
 8002888:	4618      	mov	r0, r3
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <send_DHCP_DISCOVER+0x174>)
 800288c:	7959      	ldrb	r1, [r3, #5]
 800288e:	1813      	adds	r3, r2, r0
 8002890:	460a      	mov	r2, r1
 8002892:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8002896:	4b0c      	ldr	r3, [pc, #48]	@ (80028c8 <send_DHCP_DISCOVER+0x170>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	88bb      	ldrh	r3, [r7, #4]
 800289c:	1c59      	adds	r1, r3, #1
 800289e:	80b9      	strh	r1, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	220c      	movs	r2, #12
 80028a4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 80028a8:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <send_DHCP_DISCOVER+0x170>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	88bb      	ldrh	r3, [r7, #4]
 80028ae:	1c59      	adds	r1, r3, #1
 80028b0:	80b9      	strh	r1, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	80fb      	strh	r3, [r7, #6]
 80028be:	e017      	b.n	80028f0 <send_DHCP_DISCOVER+0x198>
 80028c0:	20005888 	.word	0x20005888
 80028c4:	2000588c 	.word	0x2000588c
 80028c8:	200058b0 	.word	0x200058b0
 80028cc:	200058b4 	.word	0x200058b4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80028d0:	88f9      	ldrh	r1, [r7, #6]
 80028d2:	4b80      	ldr	r3, [pc, #512]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	88bb      	ldrh	r3, [r7, #4]
 80028d8:	1c58      	adds	r0, r3, #1
 80028da:	80b8      	strh	r0, [r7, #4]
 80028dc:	4618      	mov	r0, r3
 80028de:	4b7e      	ldr	r3, [pc, #504]	@ (8002ad8 <send_DHCP_DISCOVER+0x380>)
 80028e0:	5c59      	ldrb	r1, [r3, r1]
 80028e2:	1813      	adds	r3, r2, r0
 80028e4:	460a      	mov	r2, r1
 80028e6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	3301      	adds	r3, #1
 80028ee:	80fb      	strh	r3, [r7, #6]
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	4a79      	ldr	r2, [pc, #484]	@ (8002ad8 <send_DHCP_DISCOVER+0x380>)
 80028f4:	5cd3      	ldrb	r3, [r2, r3]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1ea      	bne.n	80028d0 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80028fa:	4b78      	ldr	r3, [pc, #480]	@ (8002adc <send_DHCP_DISCOVER+0x384>)
 80028fc:	78db      	ldrb	r3, [r3, #3]
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4b74      	ldr	r3, [pc, #464]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 8002904:	681c      	ldr	r4, [r3, #0]
 8002906:	88bb      	ldrh	r3, [r7, #4]
 8002908:	1c59      	adds	r1, r3, #1
 800290a:	80b9      	strh	r1, [r7, #4]
 800290c:	461d      	mov	r5, r3
 800290e:	4610      	mov	r0, r2
 8002910:	f001 f9a4 	bl	8003c5c <NibbleToHex>
 8002914:	4603      	mov	r3, r0
 8002916:	461a      	mov	r2, r3
 8002918:	1963      	adds	r3, r4, r5
 800291a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800291e:	4b6f      	ldr	r3, [pc, #444]	@ (8002adc <send_DHCP_DISCOVER+0x384>)
 8002920:	78da      	ldrb	r2, [r3, #3]
 8002922:	4b6c      	ldr	r3, [pc, #432]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 8002924:	681c      	ldr	r4, [r3, #0]
 8002926:	88bb      	ldrh	r3, [r7, #4]
 8002928:	1c59      	adds	r1, r3, #1
 800292a:	80b9      	strh	r1, [r7, #4]
 800292c:	461d      	mov	r5, r3
 800292e:	4610      	mov	r0, r2
 8002930:	f001 f994 	bl	8003c5c <NibbleToHex>
 8002934:	4603      	mov	r3, r0
 8002936:	461a      	mov	r2, r3
 8002938:	1963      	adds	r3, r4, r5
 800293a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800293e:	4b67      	ldr	r3, [pc, #412]	@ (8002adc <send_DHCP_DISCOVER+0x384>)
 8002940:	791b      	ldrb	r3, [r3, #4]
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4b63      	ldr	r3, [pc, #396]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 8002948:	681c      	ldr	r4, [r3, #0]
 800294a:	88bb      	ldrh	r3, [r7, #4]
 800294c:	1c59      	adds	r1, r3, #1
 800294e:	80b9      	strh	r1, [r7, #4]
 8002950:	461d      	mov	r5, r3
 8002952:	4610      	mov	r0, r2
 8002954:	f001 f982 	bl	8003c5c <NibbleToHex>
 8002958:	4603      	mov	r3, r0
 800295a:	461a      	mov	r2, r3
 800295c:	1963      	adds	r3, r4, r5
 800295e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8002962:	4b5e      	ldr	r3, [pc, #376]	@ (8002adc <send_DHCP_DISCOVER+0x384>)
 8002964:	791a      	ldrb	r2, [r3, #4]
 8002966:	4b5b      	ldr	r3, [pc, #364]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 8002968:	681c      	ldr	r4, [r3, #0]
 800296a:	88bb      	ldrh	r3, [r7, #4]
 800296c:	1c59      	adds	r1, r3, #1
 800296e:	80b9      	strh	r1, [r7, #4]
 8002970:	461d      	mov	r5, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f001 f972 	bl	8003c5c <NibbleToHex>
 8002978:	4603      	mov	r3, r0
 800297a:	461a      	mov	r2, r3
 800297c:	1963      	adds	r3, r4, r5
 800297e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8002982:	4b56      	ldr	r3, [pc, #344]	@ (8002adc <send_DHCP_DISCOVER+0x384>)
 8002984:	795b      	ldrb	r3, [r3, #5]
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b52      	ldr	r3, [pc, #328]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 800298c:	681c      	ldr	r4, [r3, #0]
 800298e:	88bb      	ldrh	r3, [r7, #4]
 8002990:	1c59      	adds	r1, r3, #1
 8002992:	80b9      	strh	r1, [r7, #4]
 8002994:	461d      	mov	r5, r3
 8002996:	4610      	mov	r0, r2
 8002998:	f001 f960 	bl	8003c5c <NibbleToHex>
 800299c:	4603      	mov	r3, r0
 800299e:	461a      	mov	r2, r3
 80029a0:	1963      	adds	r3, r4, r5
 80029a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80029a6:	4b4d      	ldr	r3, [pc, #308]	@ (8002adc <send_DHCP_DISCOVER+0x384>)
 80029a8:	795a      	ldrb	r2, [r3, #5]
 80029aa:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 80029ac:	681c      	ldr	r4, [r3, #0]
 80029ae:	88bb      	ldrh	r3, [r7, #4]
 80029b0:	1c59      	adds	r1, r3, #1
 80029b2:	80b9      	strh	r1, [r7, #4]
 80029b4:	461d      	mov	r5, r3
 80029b6:	4610      	mov	r0, r2
 80029b8:	f001 f950 	bl	8003c5c <NibbleToHex>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	1963      	adds	r3, r4, r5
 80029c2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	b2d9      	uxtb	r1, r3
 80029ca:	4b42      	ldr	r3, [pc, #264]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	88b8      	ldrh	r0, [r7, #4]
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	3307      	adds	r3, #7
 80029d4:	1ac3      	subs	r3, r0, r3
 80029d6:	3106      	adds	r1, #6
 80029d8:	b2c9      	uxtb	r1, r1
 80029da:	4413      	add	r3, r2
 80029dc:	460a      	mov	r2, r1
 80029de:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80029e2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	88bb      	ldrh	r3, [r7, #4]
 80029e8:	1c59      	adds	r1, r3, #1
 80029ea:	80b9      	strh	r1, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	2237      	movs	r2, #55	@ 0x37
 80029f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 80029f4:	4b37      	ldr	r3, [pc, #220]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	88bb      	ldrh	r3, [r7, #4]
 80029fa:	1c59      	adds	r1, r3, #1
 80029fc:	80b9      	strh	r1, [r7, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	2206      	movs	r2, #6
 8002a02:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8002a06:	4b33      	ldr	r3, [pc, #204]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	88bb      	ldrh	r3, [r7, #4]
 8002a0c:	1c59      	adds	r1, r3, #1
 8002a0e:	80b9      	strh	r1, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8002a18:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	88bb      	ldrh	r3, [r7, #4]
 8002a1e:	1c59      	adds	r1, r3, #1
 8002a20:	80b9      	strh	r1, [r7, #4]
 8002a22:	4413      	add	r3, r2
 8002a24:	2203      	movs	r2, #3
 8002a26:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8002a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	88bb      	ldrh	r3, [r7, #4]
 8002a30:	1c59      	adds	r1, r3, #1
 8002a32:	80b9      	strh	r1, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	2206      	movs	r2, #6
 8002a38:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8002a3c:	4b25      	ldr	r3, [pc, #148]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	88bb      	ldrh	r3, [r7, #4]
 8002a42:	1c59      	adds	r1, r3, #1
 8002a44:	80b9      	strh	r1, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	220f      	movs	r2, #15
 8002a4a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8002a4e:	4b21      	ldr	r3, [pc, #132]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	88bb      	ldrh	r3, [r7, #4]
 8002a54:	1c59      	adds	r1, r3, #1
 8002a56:	80b9      	strh	r1, [r7, #4]
 8002a58:	4413      	add	r3, r2
 8002a5a:	223a      	movs	r2, #58	@ 0x3a
 8002a5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8002a60:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	88bb      	ldrh	r3, [r7, #4]
 8002a66:	1c59      	adds	r1, r3, #1
 8002a68:	80b9      	strh	r1, [r7, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	223b      	movs	r2, #59	@ 0x3b
 8002a6e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8002a72:	4b18      	ldr	r3, [pc, #96]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	88bb      	ldrh	r3, [r7, #4]
 8002a78:	1c59      	adds	r1, r3, #1
 8002a7a:	80b9      	strh	r1, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	22ff      	movs	r2, #255	@ 0xff
 8002a80:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8002a84:	88bb      	ldrh	r3, [r7, #4]
 8002a86:	80fb      	strh	r3, [r7, #6]
 8002a88:	e009      	b.n	8002a9e <send_DHCP_DISCOVER+0x346>
 8002a8a:	4b12      	ldr	r3, [pc, #72]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	4413      	add	r3, r2
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	80fb      	strh	r3, [r7, #6]
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002aa4:	d3f1      	bcc.n	8002a8a <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8002aa6:	23ff      	movs	r3, #255	@ 0xff
 8002aa8:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8002aaa:	23ff      	movs	r3, #255	@ 0xff
 8002aac:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8002aae:	23ff      	movs	r3, #255	@ 0xff
 8002ab0:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8002ab2:	23ff      	movs	r3, #255	@ 0xff
 8002ab4:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae0 <send_DHCP_DISCOVER+0x388>)
 8002ab8:	7818      	ldrb	r0, [r3, #0]
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <send_DHCP_DISCOVER+0x37c>)
 8002abc:	6819      	ldr	r1, [r3, #0]
 8002abe:	463b      	mov	r3, r7
 8002ac0:	2243      	movs	r2, #67	@ 0x43
 8002ac2:	9200      	str	r2, [sp, #0]
 8002ac4:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8002ac8:	f001 fcae 	bl	8004428 <sendto>
}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad4:	200058b0 	.word	0x200058b0
 8002ad8:	20000040 	.word	0x20000040
 8002adc:	200058b4 	.word	0x200058b4
 8002ae0:	20005885 	.word	0x20005885

08002ae4 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8002ae4:	b5b0      	push	{r4, r5, r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8002aee:	f7ff fd3d 	bl	800256c <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8002af2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b60 <send_DHCP_REQUEST+0x7c>)
 8002af4:	f993 3000 	ldrsb.w	r3, [r3]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d004      	beq.n	8002b06 <send_DHCP_REQUEST+0x22>
 8002afc:	4b18      	ldr	r3, [pc, #96]	@ (8002b60 <send_DHCP_REQUEST+0x7c>)
 8002afe:	f993 3000 	ldrsb.w	r3, [r3]
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d134      	bne.n	8002b70 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8002b06:	4b17      	ldr	r3, [pc, #92]	@ (8002b64 <send_DHCP_REQUEST+0x80>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	330a      	adds	r3, #10
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8002b10:	4b14      	ldr	r3, [pc, #80]	@ (8002b64 <send_DHCP_REQUEST+0x80>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	330a      	adds	r3, #10
 8002b16:	3301      	adds	r3, #1
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8002b1c:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <send_DHCP_REQUEST+0x80>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a11      	ldr	r2, [pc, #68]	@ (8002b68 <send_DHCP_REQUEST+0x84>)
 8002b22:	7812      	ldrb	r2, [r2, #0]
 8002b24:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8002b26:	4b0f      	ldr	r3, [pc, #60]	@ (8002b64 <send_DHCP_REQUEST+0x80>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b68 <send_DHCP_REQUEST+0x84>)
 8002b2c:	7852      	ldrb	r2, [r2, #1]
 8002b2e:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8002b30:	4b0c      	ldr	r3, [pc, #48]	@ (8002b64 <send_DHCP_REQUEST+0x80>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0c      	ldr	r2, [pc, #48]	@ (8002b68 <send_DHCP_REQUEST+0x84>)
 8002b36:	7892      	ldrb	r2, [r2, #2]
 8002b38:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <send_DHCP_REQUEST+0x80>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b68 <send_DHCP_REQUEST+0x84>)
 8002b40:	78d2      	ldrb	r2, [r2, #3]
 8002b42:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8002b44:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <send_DHCP_REQUEST+0x88>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8002b4a:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <send_DHCP_REQUEST+0x88>)
 8002b4c:	785b      	ldrb	r3, [r3, #1]
 8002b4e:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8002b50:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <send_DHCP_REQUEST+0x88>)
 8002b52:	789b      	ldrb	r3, [r3, #2]
 8002b54:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8002b56:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <send_DHCP_REQUEST+0x88>)
 8002b58:	78db      	ldrb	r3, [r3, #3]
 8002b5a:	71fb      	strb	r3, [r7, #7]
 8002b5c:	e010      	b.n	8002b80 <send_DHCP_REQUEST+0x9c>
 8002b5e:	bf00      	nop
 8002b60:	200058a4 	.word	0x200058a4
 8002b64:	200058b0 	.word	0x200058b0
 8002b68:	20005894 	.word	0x20005894
 8002b6c:	20005888 	.word	0x20005888
   }
   else
   {
   	ip[0] = 255;
 8002b70:	23ff      	movs	r3, #255	@ 0xff
 8002b72:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8002b74:	23ff      	movs	r3, #255	@ 0xff
 8002b76:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8002b78:	23ff      	movs	r3, #255	@ 0xff
 8002b7a:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8002b7c:	23ff      	movs	r3, #255	@ 0xff
 8002b7e:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8002b80:	2304      	movs	r3, #4
 8002b82:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8002b84:	4b8d      	ldr	r3, [pc, #564]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	897b      	ldrh	r3, [r7, #10]
 8002b8a:	1c59      	adds	r1, r3, #1
 8002b8c:	8179      	strh	r1, [r7, #10]
 8002b8e:	4413      	add	r3, r2
 8002b90:	2235      	movs	r2, #53	@ 0x35
 8002b92:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002b96:	4b89      	ldr	r3, [pc, #548]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	897b      	ldrh	r3, [r7, #10]
 8002b9c:	1c59      	adds	r1, r3, #1
 8002b9e:	8179      	strh	r1, [r7, #10]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8002ba8:	4b84      	ldr	r3, [pc, #528]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	897b      	ldrh	r3, [r7, #10]
 8002bae:	1c59      	adds	r1, r3, #1
 8002bb0:	8179      	strh	r1, [r7, #10]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8002bba:	4b80      	ldr	r3, [pc, #512]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	897b      	ldrh	r3, [r7, #10]
 8002bc0:	1c59      	adds	r1, r3, #1
 8002bc2:	8179      	strh	r1, [r7, #10]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	223d      	movs	r2, #61	@ 0x3d
 8002bc8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8002bcc:	4b7b      	ldr	r3, [pc, #492]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	897b      	ldrh	r3, [r7, #10]
 8002bd2:	1c59      	adds	r1, r3, #1
 8002bd4:	8179      	strh	r1, [r7, #10]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	2207      	movs	r2, #7
 8002bda:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002bde:	4b77      	ldr	r3, [pc, #476]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	897b      	ldrh	r3, [r7, #10]
 8002be4:	1c59      	adds	r1, r3, #1
 8002be6:	8179      	strh	r1, [r7, #10]
 8002be8:	4413      	add	r3, r2
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8002bf0:	4b72      	ldr	r3, [pc, #456]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	897b      	ldrh	r3, [r7, #10]
 8002bf6:	1c59      	adds	r1, r3, #1
 8002bf8:	8179      	strh	r1, [r7, #10]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	4b70      	ldr	r3, [pc, #448]	@ (8002dc0 <send_DHCP_REQUEST+0x2dc>)
 8002bfe:	7819      	ldrb	r1, [r3, #0]
 8002c00:	1813      	adds	r3, r2, r0
 8002c02:	460a      	mov	r2, r1
 8002c04:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8002c08:	4b6c      	ldr	r3, [pc, #432]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	897b      	ldrh	r3, [r7, #10]
 8002c0e:	1c59      	adds	r1, r3, #1
 8002c10:	8179      	strh	r1, [r7, #10]
 8002c12:	4618      	mov	r0, r3
 8002c14:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc0 <send_DHCP_REQUEST+0x2dc>)
 8002c16:	7859      	ldrb	r1, [r3, #1]
 8002c18:	1813      	adds	r3, r2, r0
 8002c1a:	460a      	mov	r2, r1
 8002c1c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8002c20:	4b66      	ldr	r3, [pc, #408]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	897b      	ldrh	r3, [r7, #10]
 8002c26:	1c59      	adds	r1, r3, #1
 8002c28:	8179      	strh	r1, [r7, #10]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	4b64      	ldr	r3, [pc, #400]	@ (8002dc0 <send_DHCP_REQUEST+0x2dc>)
 8002c2e:	7899      	ldrb	r1, [r3, #2]
 8002c30:	1813      	adds	r3, r2, r0
 8002c32:	460a      	mov	r2, r1
 8002c34:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8002c38:	4b60      	ldr	r3, [pc, #384]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	897b      	ldrh	r3, [r7, #10]
 8002c3e:	1c59      	adds	r1, r3, #1
 8002c40:	8179      	strh	r1, [r7, #10]
 8002c42:	4618      	mov	r0, r3
 8002c44:	4b5e      	ldr	r3, [pc, #376]	@ (8002dc0 <send_DHCP_REQUEST+0x2dc>)
 8002c46:	78d9      	ldrb	r1, [r3, #3]
 8002c48:	1813      	adds	r3, r2, r0
 8002c4a:	460a      	mov	r2, r1
 8002c4c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8002c50:	4b5a      	ldr	r3, [pc, #360]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	897b      	ldrh	r3, [r7, #10]
 8002c56:	1c59      	adds	r1, r3, #1
 8002c58:	8179      	strh	r1, [r7, #10]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	4b58      	ldr	r3, [pc, #352]	@ (8002dc0 <send_DHCP_REQUEST+0x2dc>)
 8002c5e:	7919      	ldrb	r1, [r3, #4]
 8002c60:	1813      	adds	r3, r2, r0
 8002c62:	460a      	mov	r2, r1
 8002c64:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8002c68:	4b54      	ldr	r3, [pc, #336]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	897b      	ldrh	r3, [r7, #10]
 8002c6e:	1c59      	adds	r1, r3, #1
 8002c70:	8179      	strh	r1, [r7, #10]
 8002c72:	4618      	mov	r0, r3
 8002c74:	4b52      	ldr	r3, [pc, #328]	@ (8002dc0 <send_DHCP_REQUEST+0x2dc>)
 8002c76:	7959      	ldrb	r1, [r3, #5]
 8002c78:	1813      	adds	r3, r2, r0
 8002c7a:	460a      	mov	r2, r1
 8002c7c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8002c80:	79fb      	ldrb	r3, [r7, #7]
 8002c82:	2bff      	cmp	r3, #255	@ 0xff
 8002c84:	f040 8084 	bne.w	8002d90 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8002c88:	4b4c      	ldr	r3, [pc, #304]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	897b      	ldrh	r3, [r7, #10]
 8002c8e:	1c59      	adds	r1, r3, #1
 8002c90:	8179      	strh	r1, [r7, #10]
 8002c92:	4413      	add	r3, r2
 8002c94:	2232      	movs	r2, #50	@ 0x32
 8002c96:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8002c9a:	4b48      	ldr	r3, [pc, #288]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	897b      	ldrh	r3, [r7, #10]
 8002ca0:	1c59      	adds	r1, r3, #1
 8002ca2:	8179      	strh	r1, [r7, #10]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8002cac:	4b43      	ldr	r3, [pc, #268]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	897b      	ldrh	r3, [r7, #10]
 8002cb2:	1c59      	adds	r1, r3, #1
 8002cb4:	8179      	strh	r1, [r7, #10]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	4b42      	ldr	r3, [pc, #264]	@ (8002dc4 <send_DHCP_REQUEST+0x2e0>)
 8002cba:	7819      	ldrb	r1, [r3, #0]
 8002cbc:	1813      	adds	r3, r2, r0
 8002cbe:	460a      	mov	r2, r1
 8002cc0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8002cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	897b      	ldrh	r3, [r7, #10]
 8002cca:	1c59      	adds	r1, r3, #1
 8002ccc:	8179      	strh	r1, [r7, #10]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc4 <send_DHCP_REQUEST+0x2e0>)
 8002cd2:	7859      	ldrb	r1, [r3, #1]
 8002cd4:	1813      	adds	r3, r2, r0
 8002cd6:	460a      	mov	r2, r1
 8002cd8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8002cdc:	4b37      	ldr	r3, [pc, #220]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	897b      	ldrh	r3, [r7, #10]
 8002ce2:	1c59      	adds	r1, r3, #1
 8002ce4:	8179      	strh	r1, [r7, #10]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	4b36      	ldr	r3, [pc, #216]	@ (8002dc4 <send_DHCP_REQUEST+0x2e0>)
 8002cea:	7899      	ldrb	r1, [r3, #2]
 8002cec:	1813      	adds	r3, r2, r0
 8002cee:	460a      	mov	r2, r1
 8002cf0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8002cf4:	4b31      	ldr	r3, [pc, #196]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	897b      	ldrh	r3, [r7, #10]
 8002cfa:	1c59      	adds	r1, r3, #1
 8002cfc:	8179      	strh	r1, [r7, #10]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	4b30      	ldr	r3, [pc, #192]	@ (8002dc4 <send_DHCP_REQUEST+0x2e0>)
 8002d02:	78d9      	ldrb	r1, [r3, #3]
 8002d04:	1813      	adds	r3, r2, r0
 8002d06:	460a      	mov	r2, r1
 8002d08:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8002d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	897b      	ldrh	r3, [r7, #10]
 8002d12:	1c59      	adds	r1, r3, #1
 8002d14:	8179      	strh	r1, [r7, #10]
 8002d16:	4413      	add	r3, r2
 8002d18:	2236      	movs	r2, #54	@ 0x36
 8002d1a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8002d1e:	4b27      	ldr	r3, [pc, #156]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	897b      	ldrh	r3, [r7, #10]
 8002d24:	1c59      	adds	r1, r3, #1
 8002d26:	8179      	strh	r1, [r7, #10]
 8002d28:	4413      	add	r3, r2
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8002d30:	4b22      	ldr	r3, [pc, #136]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	897b      	ldrh	r3, [r7, #10]
 8002d36:	1c59      	adds	r1, r3, #1
 8002d38:	8179      	strh	r1, [r7, #10]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	4b22      	ldr	r3, [pc, #136]	@ (8002dc8 <send_DHCP_REQUEST+0x2e4>)
 8002d3e:	7819      	ldrb	r1, [r3, #0]
 8002d40:	1813      	adds	r3, r2, r0
 8002d42:	460a      	mov	r2, r1
 8002d44:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8002d48:	4b1c      	ldr	r3, [pc, #112]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	897b      	ldrh	r3, [r7, #10]
 8002d4e:	1c59      	adds	r1, r3, #1
 8002d50:	8179      	strh	r1, [r7, #10]
 8002d52:	4618      	mov	r0, r3
 8002d54:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc8 <send_DHCP_REQUEST+0x2e4>)
 8002d56:	7859      	ldrb	r1, [r3, #1]
 8002d58:	1813      	adds	r3, r2, r0
 8002d5a:	460a      	mov	r2, r1
 8002d5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8002d60:	4b16      	ldr	r3, [pc, #88]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	897b      	ldrh	r3, [r7, #10]
 8002d66:	1c59      	adds	r1, r3, #1
 8002d68:	8179      	strh	r1, [r7, #10]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	4b16      	ldr	r3, [pc, #88]	@ (8002dc8 <send_DHCP_REQUEST+0x2e4>)
 8002d6e:	7899      	ldrb	r1, [r3, #2]
 8002d70:	1813      	adds	r3, r2, r0
 8002d72:	460a      	mov	r2, r1
 8002d74:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8002d78:	4b10      	ldr	r3, [pc, #64]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	897b      	ldrh	r3, [r7, #10]
 8002d7e:	1c59      	adds	r1, r3, #1
 8002d80:	8179      	strh	r1, [r7, #10]
 8002d82:	4618      	mov	r0, r3
 8002d84:	4b10      	ldr	r3, [pc, #64]	@ (8002dc8 <send_DHCP_REQUEST+0x2e4>)
 8002d86:	78d9      	ldrb	r1, [r3, #3]
 8002d88:	1813      	adds	r3, r2, r0
 8002d8a:	460a      	mov	r2, r1
 8002d8c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8002d90:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	897b      	ldrh	r3, [r7, #10]
 8002d96:	1c59      	adds	r1, r3, #1
 8002d98:	8179      	strh	r1, [r7, #10]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	220c      	movs	r2, #12
 8002d9e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8002da2:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <send_DHCP_REQUEST+0x2d8>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	897b      	ldrh	r3, [r7, #10]
 8002da8:	1c59      	adds	r1, r3, #1
 8002daa:	8179      	strh	r1, [r7, #10]
 8002dac:	4413      	add	r3, r2
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e019      	b.n	8002dee <send_DHCP_REQUEST+0x30a>
 8002dba:	bf00      	nop
 8002dbc:	200058b0 	.word	0x200058b0
 8002dc0:	200058b4 	.word	0x200058b4
 8002dc4:	20005894 	.word	0x20005894
 8002dc8:	20005888 	.word	0x20005888
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8002dcc:	4b86      	ldr	r3, [pc, #536]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	897b      	ldrh	r3, [r7, #10]
 8002dd2:	1c59      	adds	r1, r3, #1
 8002dd4:	8179      	strh	r1, [r7, #10]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	4984      	ldr	r1, [pc, #528]	@ (8002fec <send_DHCP_REQUEST+0x508>)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	440b      	add	r3, r1
 8002dde:	7819      	ldrb	r1, [r3, #0]
 8002de0:	1813      	adds	r3, r2, r0
 8002de2:	460a      	mov	r2, r1
 8002de4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3301      	adds	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	4a7f      	ldr	r2, [pc, #508]	@ (8002fec <send_DHCP_REQUEST+0x508>)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1e8      	bne.n	8002dcc <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8002dfa:	4b7d      	ldr	r3, [pc, #500]	@ (8002ff0 <send_DHCP_REQUEST+0x50c>)
 8002dfc:	78db      	ldrb	r3, [r3, #3]
 8002dfe:	091b      	lsrs	r3, r3, #4
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4b79      	ldr	r3, [pc, #484]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002e04:	681c      	ldr	r4, [r3, #0]
 8002e06:	897b      	ldrh	r3, [r7, #10]
 8002e08:	1c59      	adds	r1, r3, #1
 8002e0a:	8179      	strh	r1, [r7, #10]
 8002e0c:	461d      	mov	r5, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f000 ff24 	bl	8003c5c <NibbleToHex>
 8002e14:	4603      	mov	r3, r0
 8002e16:	461a      	mov	r2, r3
 8002e18:	1963      	adds	r3, r4, r5
 8002e1a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8002e1e:	4b74      	ldr	r3, [pc, #464]	@ (8002ff0 <send_DHCP_REQUEST+0x50c>)
 8002e20:	78da      	ldrb	r2, [r3, #3]
 8002e22:	4b71      	ldr	r3, [pc, #452]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002e24:	681c      	ldr	r4, [r3, #0]
 8002e26:	897b      	ldrh	r3, [r7, #10]
 8002e28:	1c59      	adds	r1, r3, #1
 8002e2a:	8179      	strh	r1, [r7, #10]
 8002e2c:	461d      	mov	r5, r3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	f000 ff14 	bl	8003c5c <NibbleToHex>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	1963      	adds	r3, r4, r5
 8002e3a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8002e3e:	4b6c      	ldr	r3, [pc, #432]	@ (8002ff0 <send_DHCP_REQUEST+0x50c>)
 8002e40:	791b      	ldrb	r3, [r3, #4]
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	4b68      	ldr	r3, [pc, #416]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002e48:	681c      	ldr	r4, [r3, #0]
 8002e4a:	897b      	ldrh	r3, [r7, #10]
 8002e4c:	1c59      	adds	r1, r3, #1
 8002e4e:	8179      	strh	r1, [r7, #10]
 8002e50:	461d      	mov	r5, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f000 ff02 	bl	8003c5c <NibbleToHex>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	1963      	adds	r3, r4, r5
 8002e5e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8002e62:	4b63      	ldr	r3, [pc, #396]	@ (8002ff0 <send_DHCP_REQUEST+0x50c>)
 8002e64:	791a      	ldrb	r2, [r3, #4]
 8002e66:	4b60      	ldr	r3, [pc, #384]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002e68:	681c      	ldr	r4, [r3, #0]
 8002e6a:	897b      	ldrh	r3, [r7, #10]
 8002e6c:	1c59      	adds	r1, r3, #1
 8002e6e:	8179      	strh	r1, [r7, #10]
 8002e70:	461d      	mov	r5, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f000 fef2 	bl	8003c5c <NibbleToHex>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	1963      	adds	r3, r4, r5
 8002e7e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8002e82:	4b5b      	ldr	r3, [pc, #364]	@ (8002ff0 <send_DHCP_REQUEST+0x50c>)
 8002e84:	795b      	ldrb	r3, [r3, #5]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4b57      	ldr	r3, [pc, #348]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002e8c:	681c      	ldr	r4, [r3, #0]
 8002e8e:	897b      	ldrh	r3, [r7, #10]
 8002e90:	1c59      	adds	r1, r3, #1
 8002e92:	8179      	strh	r1, [r7, #10]
 8002e94:	461d      	mov	r5, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f000 fee0 	bl	8003c5c <NibbleToHex>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	1963      	adds	r3, r4, r5
 8002ea2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8002ea6:	4b52      	ldr	r3, [pc, #328]	@ (8002ff0 <send_DHCP_REQUEST+0x50c>)
 8002ea8:	795a      	ldrb	r2, [r3, #5]
 8002eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002eac:	681c      	ldr	r4, [r3, #0]
 8002eae:	897b      	ldrh	r3, [r7, #10]
 8002eb0:	1c59      	adds	r1, r3, #1
 8002eb2:	8179      	strh	r1, [r7, #10]
 8002eb4:	461d      	mov	r5, r3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	f000 fed0 	bl	8003c5c <NibbleToHex>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	1963      	adds	r3, r4, r5
 8002ec2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	b2d9      	uxtb	r1, r3
 8002eca:	4b47      	ldr	r3, [pc, #284]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	8978      	ldrh	r0, [r7, #10]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3307      	adds	r3, #7
 8002ed4:	1ac3      	subs	r3, r0, r3
 8002ed6:	3106      	adds	r1, #6
 8002ed8:	b2c9      	uxtb	r1, r1
 8002eda:	4413      	add	r3, r2
 8002edc:	460a      	mov	r2, r1
 8002ede:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8002ee2:	4b41      	ldr	r3, [pc, #260]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	897b      	ldrh	r3, [r7, #10]
 8002ee8:	1c59      	adds	r1, r3, #1
 8002eea:	8179      	strh	r1, [r7, #10]
 8002eec:	4413      	add	r3, r2
 8002eee:	2237      	movs	r2, #55	@ 0x37
 8002ef0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8002ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	897b      	ldrh	r3, [r7, #10]
 8002efa:	1c59      	adds	r1, r3, #1
 8002efc:	8179      	strh	r1, [r7, #10]
 8002efe:	4413      	add	r3, r2
 8002f00:	2208      	movs	r2, #8
 8002f02:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8002f06:	4b38      	ldr	r3, [pc, #224]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	897b      	ldrh	r3, [r7, #10]
 8002f0c:	1c59      	adds	r1, r3, #1
 8002f0e:	8179      	strh	r1, [r7, #10]
 8002f10:	4413      	add	r3, r2
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8002f18:	4b33      	ldr	r3, [pc, #204]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	897b      	ldrh	r3, [r7, #10]
 8002f1e:	1c59      	adds	r1, r3, #1
 8002f20:	8179      	strh	r1, [r7, #10]
 8002f22:	4413      	add	r3, r2
 8002f24:	2203      	movs	r2, #3
 8002f26:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8002f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	897b      	ldrh	r3, [r7, #10]
 8002f30:	1c59      	adds	r1, r3, #1
 8002f32:	8179      	strh	r1, [r7, #10]
 8002f34:	4413      	add	r3, r2
 8002f36:	2206      	movs	r2, #6
 8002f38:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8002f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	897b      	ldrh	r3, [r7, #10]
 8002f42:	1c59      	adds	r1, r3, #1
 8002f44:	8179      	strh	r1, [r7, #10]
 8002f46:	4413      	add	r3, r2
 8002f48:	220f      	movs	r2, #15
 8002f4a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8002f4e:	4b26      	ldr	r3, [pc, #152]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	897b      	ldrh	r3, [r7, #10]
 8002f54:	1c59      	adds	r1, r3, #1
 8002f56:	8179      	strh	r1, [r7, #10]
 8002f58:	4413      	add	r3, r2
 8002f5a:	223a      	movs	r2, #58	@ 0x3a
 8002f5c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8002f60:	4b21      	ldr	r3, [pc, #132]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	897b      	ldrh	r3, [r7, #10]
 8002f66:	1c59      	adds	r1, r3, #1
 8002f68:	8179      	strh	r1, [r7, #10]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	223b      	movs	r2, #59	@ 0x3b
 8002f6e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8002f72:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	897b      	ldrh	r3, [r7, #10]
 8002f78:	1c59      	adds	r1, r3, #1
 8002f7a:	8179      	strh	r1, [r7, #10]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	221f      	movs	r2, #31
 8002f80:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8002f84:	4b18      	ldr	r3, [pc, #96]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	897b      	ldrh	r3, [r7, #10]
 8002f8a:	1c59      	adds	r1, r3, #1
 8002f8c:	8179      	strh	r1, [r7, #10]
 8002f8e:	4413      	add	r3, r2
 8002f90:	2221      	movs	r2, #33	@ 0x21
 8002f92:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8002f96:	4b14      	ldr	r3, [pc, #80]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	897b      	ldrh	r3, [r7, #10]
 8002f9c:	1c59      	adds	r1, r3, #1
 8002f9e:	8179      	strh	r1, [r7, #10]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	22ff      	movs	r2, #255	@ 0xff
 8002fa4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8002fa8:	897b      	ldrh	r3, [r7, #10]
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e009      	b.n	8002fc2 <send_DHCP_REQUEST+0x4de>
 8002fae:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	33ec      	adds	r3, #236	@ 0xec
 8002fb8:	2200      	movs	r2, #0
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002fc8:	dbf1      	blt.n	8002fae <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002fca:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff4 <send_DHCP_REQUEST+0x510>)
 8002fcc:	7818      	ldrb	r0, [r3, #0]
 8002fce:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <send_DHCP_REQUEST+0x504>)
 8002fd0:	6819      	ldr	r1, [r3, #0]
 8002fd2:	1d3b      	adds	r3, r7, #4
 8002fd4:	2243      	movs	r2, #67	@ 0x43
 8002fd6:	9200      	str	r2, [sp, #0]
 8002fd8:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8002fdc:	f001 fa24 	bl	8004428 <sendto>

}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe8:	200058b0 	.word	0x200058b0
 8002fec:	20000040 	.word	0x20000040
 8002ff0:	200058b4 	.word	0x200058b4
 8002ff4:	20005885 	.word	0x20005885

08002ff8 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8003002:	f7ff fab3 	bl	800256c <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003006:	2304      	movs	r3, #4
 8003008:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800300a:	4b9f      	ldr	r3, [pc, #636]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	330a      	adds	r3, #10
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8003014:	4b9c      	ldr	r3, [pc, #624]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	330a      	adds	r3, #10
 800301a:	3301      	adds	r3, #1
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003020:	4b99      	ldr	r3, [pc, #612]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	897b      	ldrh	r3, [r7, #10]
 8003026:	1c59      	adds	r1, r3, #1
 8003028:	8179      	strh	r1, [r7, #10]
 800302a:	4413      	add	r3, r2
 800302c:	2235      	movs	r2, #53	@ 0x35
 800302e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003032:	4b95      	ldr	r3, [pc, #596]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	897b      	ldrh	r3, [r7, #10]
 8003038:	1c59      	adds	r1, r3, #1
 800303a:	8179      	strh	r1, [r7, #10]
 800303c:	4413      	add	r3, r2
 800303e:	2201      	movs	r2, #1
 8003040:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8003044:	4b90      	ldr	r3, [pc, #576]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	897b      	ldrh	r3, [r7, #10]
 800304a:	1c59      	adds	r1, r3, #1
 800304c:	8179      	strh	r1, [r7, #10]
 800304e:	4413      	add	r3, r2
 8003050:	2204      	movs	r2, #4
 8003052:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003056:	4b8c      	ldr	r3, [pc, #560]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	897b      	ldrh	r3, [r7, #10]
 800305c:	1c59      	adds	r1, r3, #1
 800305e:	8179      	strh	r1, [r7, #10]
 8003060:	4413      	add	r3, r2
 8003062:	223d      	movs	r2, #61	@ 0x3d
 8003064:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8003068:	4b87      	ldr	r3, [pc, #540]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	897b      	ldrh	r3, [r7, #10]
 800306e:	1c59      	adds	r1, r3, #1
 8003070:	8179      	strh	r1, [r7, #10]
 8003072:	4413      	add	r3, r2
 8003074:	2207      	movs	r2, #7
 8003076:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800307a:	4b83      	ldr	r3, [pc, #524]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	897b      	ldrh	r3, [r7, #10]
 8003080:	1c59      	adds	r1, r3, #1
 8003082:	8179      	strh	r1, [r7, #10]
 8003084:	4413      	add	r3, r2
 8003086:	2201      	movs	r2, #1
 8003088:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800308c:	4b7e      	ldr	r3, [pc, #504]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	897b      	ldrh	r3, [r7, #10]
 8003092:	1c59      	adds	r1, r3, #1
 8003094:	8179      	strh	r1, [r7, #10]
 8003096:	4618      	mov	r0, r3
 8003098:	4b7c      	ldr	r3, [pc, #496]	@ (800328c <send_DHCP_DECLINE+0x294>)
 800309a:	7819      	ldrb	r1, [r3, #0]
 800309c:	1813      	adds	r3, r2, r0
 800309e:	460a      	mov	r2, r1
 80030a0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80030a4:	4b78      	ldr	r3, [pc, #480]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	897b      	ldrh	r3, [r7, #10]
 80030aa:	1c59      	adds	r1, r3, #1
 80030ac:	8179      	strh	r1, [r7, #10]
 80030ae:	4618      	mov	r0, r3
 80030b0:	4b76      	ldr	r3, [pc, #472]	@ (800328c <send_DHCP_DECLINE+0x294>)
 80030b2:	7859      	ldrb	r1, [r3, #1]
 80030b4:	1813      	adds	r3, r2, r0
 80030b6:	460a      	mov	r2, r1
 80030b8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80030bc:	4b72      	ldr	r3, [pc, #456]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	897b      	ldrh	r3, [r7, #10]
 80030c2:	1c59      	adds	r1, r3, #1
 80030c4:	8179      	strh	r1, [r7, #10]
 80030c6:	4618      	mov	r0, r3
 80030c8:	4b70      	ldr	r3, [pc, #448]	@ (800328c <send_DHCP_DECLINE+0x294>)
 80030ca:	7899      	ldrb	r1, [r3, #2]
 80030cc:	1813      	adds	r3, r2, r0
 80030ce:	460a      	mov	r2, r1
 80030d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80030d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	897b      	ldrh	r3, [r7, #10]
 80030da:	1c59      	adds	r1, r3, #1
 80030dc:	8179      	strh	r1, [r7, #10]
 80030de:	4618      	mov	r0, r3
 80030e0:	4b6a      	ldr	r3, [pc, #424]	@ (800328c <send_DHCP_DECLINE+0x294>)
 80030e2:	78d9      	ldrb	r1, [r3, #3]
 80030e4:	1813      	adds	r3, r2, r0
 80030e6:	460a      	mov	r2, r1
 80030e8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80030ec:	4b66      	ldr	r3, [pc, #408]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	897b      	ldrh	r3, [r7, #10]
 80030f2:	1c59      	adds	r1, r3, #1
 80030f4:	8179      	strh	r1, [r7, #10]
 80030f6:	4618      	mov	r0, r3
 80030f8:	4b64      	ldr	r3, [pc, #400]	@ (800328c <send_DHCP_DECLINE+0x294>)
 80030fa:	7919      	ldrb	r1, [r3, #4]
 80030fc:	1813      	adds	r3, r2, r0
 80030fe:	460a      	mov	r2, r1
 8003100:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003104:	4b60      	ldr	r3, [pc, #384]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	897b      	ldrh	r3, [r7, #10]
 800310a:	1c59      	adds	r1, r3, #1
 800310c:	8179      	strh	r1, [r7, #10]
 800310e:	4618      	mov	r0, r3
 8003110:	4b5e      	ldr	r3, [pc, #376]	@ (800328c <send_DHCP_DECLINE+0x294>)
 8003112:	7959      	ldrb	r1, [r3, #5]
 8003114:	1813      	adds	r3, r2, r0
 8003116:	460a      	mov	r2, r1
 8003118:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 800311c:	4b5a      	ldr	r3, [pc, #360]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	897b      	ldrh	r3, [r7, #10]
 8003122:	1c59      	adds	r1, r3, #1
 8003124:	8179      	strh	r1, [r7, #10]
 8003126:	4413      	add	r3, r2
 8003128:	2232      	movs	r2, #50	@ 0x32
 800312a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800312e:	4b56      	ldr	r3, [pc, #344]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	897b      	ldrh	r3, [r7, #10]
 8003134:	1c59      	adds	r1, r3, #1
 8003136:	8179      	strh	r1, [r7, #10]
 8003138:	4413      	add	r3, r2
 800313a:	2204      	movs	r2, #4
 800313c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8003140:	4b51      	ldr	r3, [pc, #324]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	897b      	ldrh	r3, [r7, #10]
 8003146:	1c59      	adds	r1, r3, #1
 8003148:	8179      	strh	r1, [r7, #10]
 800314a:	4618      	mov	r0, r3
 800314c:	4b50      	ldr	r3, [pc, #320]	@ (8003290 <send_DHCP_DECLINE+0x298>)
 800314e:	7819      	ldrb	r1, [r3, #0]
 8003150:	1813      	adds	r3, r2, r0
 8003152:	460a      	mov	r2, r1
 8003154:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8003158:	4b4b      	ldr	r3, [pc, #300]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	897b      	ldrh	r3, [r7, #10]
 800315e:	1c59      	adds	r1, r3, #1
 8003160:	8179      	strh	r1, [r7, #10]
 8003162:	4618      	mov	r0, r3
 8003164:	4b4a      	ldr	r3, [pc, #296]	@ (8003290 <send_DHCP_DECLINE+0x298>)
 8003166:	7859      	ldrb	r1, [r3, #1]
 8003168:	1813      	adds	r3, r2, r0
 800316a:	460a      	mov	r2, r1
 800316c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8003170:	4b45      	ldr	r3, [pc, #276]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	897b      	ldrh	r3, [r7, #10]
 8003176:	1c59      	adds	r1, r3, #1
 8003178:	8179      	strh	r1, [r7, #10]
 800317a:	4618      	mov	r0, r3
 800317c:	4b44      	ldr	r3, [pc, #272]	@ (8003290 <send_DHCP_DECLINE+0x298>)
 800317e:	7899      	ldrb	r1, [r3, #2]
 8003180:	1813      	adds	r3, r2, r0
 8003182:	460a      	mov	r2, r1
 8003184:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003188:	4b3f      	ldr	r3, [pc, #252]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	897b      	ldrh	r3, [r7, #10]
 800318e:	1c59      	adds	r1, r3, #1
 8003190:	8179      	strh	r1, [r7, #10]
 8003192:	4618      	mov	r0, r3
 8003194:	4b3e      	ldr	r3, [pc, #248]	@ (8003290 <send_DHCP_DECLINE+0x298>)
 8003196:	78d9      	ldrb	r1, [r3, #3]
 8003198:	1813      	adds	r3, r2, r0
 800319a:	460a      	mov	r2, r1
 800319c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80031a0:	4b39      	ldr	r3, [pc, #228]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	897b      	ldrh	r3, [r7, #10]
 80031a6:	1c59      	adds	r1, r3, #1
 80031a8:	8179      	strh	r1, [r7, #10]
 80031aa:	4413      	add	r3, r2
 80031ac:	2236      	movs	r2, #54	@ 0x36
 80031ae:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 80031b2:	4b35      	ldr	r3, [pc, #212]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	897b      	ldrh	r3, [r7, #10]
 80031b8:	1c59      	adds	r1, r3, #1
 80031ba:	8179      	strh	r1, [r7, #10]
 80031bc:	4413      	add	r3, r2
 80031be:	2204      	movs	r2, #4
 80031c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80031c4:	4b30      	ldr	r3, [pc, #192]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	897b      	ldrh	r3, [r7, #10]
 80031ca:	1c59      	adds	r1, r3, #1
 80031cc:	8179      	strh	r1, [r7, #10]
 80031ce:	4618      	mov	r0, r3
 80031d0:	4b30      	ldr	r3, [pc, #192]	@ (8003294 <send_DHCP_DECLINE+0x29c>)
 80031d2:	7819      	ldrb	r1, [r3, #0]
 80031d4:	1813      	adds	r3, r2, r0
 80031d6:	460a      	mov	r2, r1
 80031d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80031dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	897b      	ldrh	r3, [r7, #10]
 80031e2:	1c59      	adds	r1, r3, #1
 80031e4:	8179      	strh	r1, [r7, #10]
 80031e6:	4618      	mov	r0, r3
 80031e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003294 <send_DHCP_DECLINE+0x29c>)
 80031ea:	7859      	ldrb	r1, [r3, #1]
 80031ec:	1813      	adds	r3, r2, r0
 80031ee:	460a      	mov	r2, r1
 80031f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80031f4:	4b24      	ldr	r3, [pc, #144]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	897b      	ldrh	r3, [r7, #10]
 80031fa:	1c59      	adds	r1, r3, #1
 80031fc:	8179      	strh	r1, [r7, #10]
 80031fe:	4618      	mov	r0, r3
 8003200:	4b24      	ldr	r3, [pc, #144]	@ (8003294 <send_DHCP_DECLINE+0x29c>)
 8003202:	7899      	ldrb	r1, [r3, #2]
 8003204:	1813      	adds	r3, r2, r0
 8003206:	460a      	mov	r2, r1
 8003208:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800320c:	4b1e      	ldr	r3, [pc, #120]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	897b      	ldrh	r3, [r7, #10]
 8003212:	1c59      	adds	r1, r3, #1
 8003214:	8179      	strh	r1, [r7, #10]
 8003216:	4618      	mov	r0, r3
 8003218:	4b1e      	ldr	r3, [pc, #120]	@ (8003294 <send_DHCP_DECLINE+0x29c>)
 800321a:	78d9      	ldrb	r1, [r3, #3]
 800321c:	1813      	adds	r3, r2, r0
 800321e:	460a      	mov	r2, r1
 8003220:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8003224:	4b18      	ldr	r3, [pc, #96]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	897b      	ldrh	r3, [r7, #10]
 800322a:	1c59      	adds	r1, r3, #1
 800322c:	8179      	strh	r1, [r7, #10]
 800322e:	4413      	add	r3, r2
 8003230:	22ff      	movs	r2, #255	@ 0xff
 8003232:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003236:	897b      	ldrh	r3, [r7, #10]
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	e009      	b.n	8003250 <send_DHCP_DECLINE+0x258>
 800323c:	4b12      	ldr	r3, [pc, #72]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	33ec      	adds	r3, #236	@ 0xec
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3301      	adds	r3, #1
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8003256:	dbf1      	blt.n	800323c <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8003258:	23ff      	movs	r3, #255	@ 0xff
 800325a:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 800325c:	23ff      	movs	r3, #255	@ 0xff
 800325e:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8003260:	23ff      	movs	r3, #255	@ 0xff
 8003262:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8003264:	23ff      	movs	r3, #255	@ 0xff
 8003266:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003268:	4b0b      	ldr	r3, [pc, #44]	@ (8003298 <send_DHCP_DECLINE+0x2a0>)
 800326a:	7818      	ldrb	r0, [r3, #0]
 800326c:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <send_DHCP_DECLINE+0x290>)
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	2243      	movs	r2, #67	@ 0x43
 8003274:	9200      	str	r2, [sp, #0]
 8003276:	f44f 7209 	mov.w	r2, #548	@ 0x224
 800327a:	f001 f8d5 	bl	8004428 <sendto>
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	200058b0 	.word	0x200058b0
 800328c:	200058b4 	.word	0x200058b4
 8003290:	20005894 	.word	0x20005894
 8003294:	20005888 	.word	0x20005888
 8003298:	20005885 	.word	0x20005885

0800329c <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b089      	sub	sp, #36	@ 0x24
 80032a0:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 80032a6:	4ba1      	ldr	r3, [pc, #644]	@ (800352c <parseDHCPMSG+0x290>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f001 fe93 	bl	8004fd6 <getSn_RX_RSR>
 80032b0:	4603      	mov	r3, r0
 80032b2:	823b      	strh	r3, [r7, #16]
 80032b4:	8a3b      	ldrh	r3, [r7, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d011      	beq.n	80032de <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 80032ba:	4b9c      	ldr	r3, [pc, #624]	@ (800352c <parseDHCPMSG+0x290>)
 80032bc:	7818      	ldrb	r0, [r3, #0]
 80032be:	4b9c      	ldr	r3, [pc, #624]	@ (8003530 <parseDHCPMSG+0x294>)
 80032c0:	6819      	ldr	r1, [r3, #0]
 80032c2:	1d3c      	adds	r4, r7, #4
 80032c4:	8a3a      	ldrh	r2, [r7, #16]
 80032c6:	1cbb      	adds	r3, r7, #2
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	4623      	mov	r3, r4
 80032cc:	f001 f9e0 	bl	8004690 <recvfrom>
 80032d0:	4603      	mov	r3, r0
 80032d2:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 80032d4:	887b      	ldrh	r3, [r7, #2]
 80032d6:	2b43      	cmp	r3, #67	@ 0x43
 80032d8:	f040 81ed 	bne.w	80036b6 <parseDHCPMSG+0x41a>
 80032dc:	e001      	b.n	80032e2 <parseDHCPMSG+0x46>
   else return 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	e1eb      	b.n	80036ba <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80032e2:	4b93      	ldr	r3, [pc, #588]	@ (8003530 <parseDHCPMSG+0x294>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	7f1a      	ldrb	r2, [r3, #28]
 80032e8:	4b92      	ldr	r3, [pc, #584]	@ (8003534 <parseDHCPMSG+0x298>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d124      	bne.n	800333a <parseDHCPMSG+0x9e>
 80032f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003530 <parseDHCPMSG+0x294>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	7f5a      	ldrb	r2, [r3, #29]
 80032f6:	4b8f      	ldr	r3, [pc, #572]	@ (8003534 <parseDHCPMSG+0x298>)
 80032f8:	785b      	ldrb	r3, [r3, #1]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d11d      	bne.n	800333a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80032fe:	4b8c      	ldr	r3, [pc, #560]	@ (8003530 <parseDHCPMSG+0x294>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	7f9a      	ldrb	r2, [r3, #30]
 8003304:	4b8b      	ldr	r3, [pc, #556]	@ (8003534 <parseDHCPMSG+0x298>)
 8003306:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d116      	bne.n	800333a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 800330c:	4b88      	ldr	r3, [pc, #544]	@ (8003530 <parseDHCPMSG+0x294>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	7fda      	ldrb	r2, [r3, #31]
 8003312:	4b88      	ldr	r3, [pc, #544]	@ (8003534 <parseDHCPMSG+0x298>)
 8003314:	78db      	ldrb	r3, [r3, #3]
 8003316:	429a      	cmp	r2, r3
 8003318:	d10f      	bne.n	800333a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800331a:	4b85      	ldr	r3, [pc, #532]	@ (8003530 <parseDHCPMSG+0x294>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003322:	4b84      	ldr	r3, [pc, #528]	@ (8003534 <parseDHCPMSG+0x298>)
 8003324:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003326:	429a      	cmp	r2, r3
 8003328:	d107      	bne.n	800333a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800332a:	4b81      	ldr	r3, [pc, #516]	@ (8003530 <parseDHCPMSG+0x294>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8003332:	4b80      	ldr	r3, [pc, #512]	@ (8003534 <parseDHCPMSG+0x298>)
 8003334:	795b      	ldrb	r3, [r3, #5]
 8003336:	429a      	cmp	r2, r3
 8003338:	d001      	beq.n	800333e <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 800333a:	2300      	movs	r3, #0
 800333c:	e1bd      	b.n	80036ba <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 800333e:	4b7e      	ldr	r3, [pc, #504]	@ (8003538 <parseDHCPMSG+0x29c>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10b      	bne.n	800335e <parseDHCPMSG+0xc2>
 8003346:	4b7c      	ldr	r3, [pc, #496]	@ (8003538 <parseDHCPMSG+0x29c>)
 8003348:	785b      	ldrb	r3, [r3, #1]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d107      	bne.n	800335e <parseDHCPMSG+0xc2>
 800334e:	4b7a      	ldr	r3, [pc, #488]	@ (8003538 <parseDHCPMSG+0x29c>)
 8003350:	789b      	ldrb	r3, [r3, #2]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d103      	bne.n	800335e <parseDHCPMSG+0xc2>
 8003356:	4b78      	ldr	r3, [pc, #480]	@ (8003538 <parseDHCPMSG+0x29c>)
 8003358:	78db      	ldrb	r3, [r3, #3]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d029      	beq.n	80033b2 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800335e:	793a      	ldrb	r2, [r7, #4]
 8003360:	4b75      	ldr	r3, [pc, #468]	@ (8003538 <parseDHCPMSG+0x29c>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d10e      	bne.n	8003386 <parseDHCPMSG+0xea>
 8003368:	797a      	ldrb	r2, [r7, #5]
 800336a:	4b73      	ldr	r3, [pc, #460]	@ (8003538 <parseDHCPMSG+0x29c>)
 800336c:	785b      	ldrb	r3, [r3, #1]
 800336e:	429a      	cmp	r2, r3
 8003370:	d109      	bne.n	8003386 <parseDHCPMSG+0xea>
 8003372:	79ba      	ldrb	r2, [r7, #6]
 8003374:	4b70      	ldr	r3, [pc, #448]	@ (8003538 <parseDHCPMSG+0x29c>)
 8003376:	789b      	ldrb	r3, [r3, #2]
 8003378:	429a      	cmp	r2, r3
 800337a:	d104      	bne.n	8003386 <parseDHCPMSG+0xea>
 800337c:	79fa      	ldrb	r2, [r7, #7]
 800337e:	4b6e      	ldr	r3, [pc, #440]	@ (8003538 <parseDHCPMSG+0x29c>)
 8003380:	78db      	ldrb	r3, [r3, #3]
 8003382:	429a      	cmp	r2, r3
 8003384:	d015      	beq.n	80033b2 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003386:	793a      	ldrb	r2, [r7, #4]
 8003388:	4b6c      	ldr	r3, [pc, #432]	@ (800353c <parseDHCPMSG+0x2a0>)
 800338a:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800338c:	429a      	cmp	r2, r3
 800338e:	d10e      	bne.n	80033ae <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003390:	797a      	ldrb	r2, [r7, #5]
 8003392:	4b6a      	ldr	r3, [pc, #424]	@ (800353c <parseDHCPMSG+0x2a0>)
 8003394:	785b      	ldrb	r3, [r3, #1]
 8003396:	429a      	cmp	r2, r3
 8003398:	d109      	bne.n	80033ae <parseDHCPMSG+0x112>
 800339a:	79ba      	ldrb	r2, [r7, #6]
 800339c:	4b67      	ldr	r3, [pc, #412]	@ (800353c <parseDHCPMSG+0x2a0>)
 800339e:	789b      	ldrb	r3, [r3, #2]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d104      	bne.n	80033ae <parseDHCPMSG+0x112>
 80033a4:	79fa      	ldrb	r2, [r7, #7]
 80033a6:	4b65      	ldr	r3, [pc, #404]	@ (800353c <parseDHCPMSG+0x2a0>)
 80033a8:	78db      	ldrb	r3, [r3, #3]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d001      	beq.n	80033b2 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e183      	b.n	80036ba <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 80033b2:	4b5f      	ldr	r3, [pc, #380]	@ (8003530 <parseDHCPMSG+0x294>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	33f0      	adds	r3, #240	@ 0xf0
 80033bc:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 80033be:	8a3b      	ldrh	r3, [r7, #16]
 80033c0:	3bf0      	subs	r3, #240	@ 0xf0
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4413      	add	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 80033c8:	e170      	b.n	80036ac <parseDHCPMSG+0x410>

			switch ( *p ) {
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b36      	cmp	r3, #54	@ 0x36
 80033d0:	dc76      	bgt.n	80034c0 <parseDHCPMSG+0x224>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f2c0 815d 	blt.w	8003692 <parseDHCPMSG+0x3f6>
 80033d8:	2b36      	cmp	r3, #54	@ 0x36
 80033da:	f200 815a 	bhi.w	8003692 <parseDHCPMSG+0x3f6>
 80033de:	a201      	add	r2, pc, #4	@ (adr r2, 80033e4 <parseDHCPMSG+0x148>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	080034cd 	.word	0x080034cd
 80033e8:	080034ed 	.word	0x080034ed
 80033ec:	08003693 	.word	0x08003693
 80033f0:	08003545 	.word	0x08003545
 80033f4:	08003693 	.word	0x08003693
 80033f8:	08003693 	.word	0x08003693
 80033fc:	08003591 	.word	0x08003591
 8003400:	08003693 	.word	0x08003693
 8003404:	08003693 	.word	0x08003693
 8003408:	08003693 	.word	0x08003693
 800340c:	08003693 	.word	0x08003693
 8003410:	08003693 	.word	0x08003693
 8003414:	08003693 	.word	0x08003693
 8003418:	08003693 	.word	0x08003693
 800341c:	08003693 	.word	0x08003693
 8003420:	08003693 	.word	0x08003693
 8003424:	08003693 	.word	0x08003693
 8003428:	08003693 	.word	0x08003693
 800342c:	08003693 	.word	0x08003693
 8003430:	08003693 	.word	0x08003693
 8003434:	08003693 	.word	0x08003693
 8003438:	08003693 	.word	0x08003693
 800343c:	08003693 	.word	0x08003693
 8003440:	08003693 	.word	0x08003693
 8003444:	08003693 	.word	0x08003693
 8003448:	08003693 	.word	0x08003693
 800344c:	08003693 	.word	0x08003693
 8003450:	08003693 	.word	0x08003693
 8003454:	08003693 	.word	0x08003693
 8003458:	08003693 	.word	0x08003693
 800345c:	08003693 	.word	0x08003693
 8003460:	08003693 	.word	0x08003693
 8003464:	08003693 	.word	0x08003693
 8003468:	08003693 	.word	0x08003693
 800346c:	08003693 	.word	0x08003693
 8003470:	08003693 	.word	0x08003693
 8003474:	08003693 	.word	0x08003693
 8003478:	08003693 	.word	0x08003693
 800347c:	08003693 	.word	0x08003693
 8003480:	08003693 	.word	0x08003693
 8003484:	08003693 	.word	0x08003693
 8003488:	08003693 	.word	0x08003693
 800348c:	08003693 	.word	0x08003693
 8003490:	08003693 	.word	0x08003693
 8003494:	08003693 	.word	0x08003693
 8003498:	08003693 	.word	0x08003693
 800349c:	08003693 	.word	0x08003693
 80034a0:	08003693 	.word	0x08003693
 80034a4:	08003693 	.word	0x08003693
 80034a8:	08003693 	.word	0x08003693
 80034ac:	08003693 	.word	0x08003693
 80034b0:	080035dd 	.word	0x080035dd
 80034b4:	08003693 	.word	0x08003693
 80034b8:	080034d5 	.word	0x080034d5
 80034bc:	08003639 	.word	0x08003639
 80034c0:	2bff      	cmp	r3, #255	@ 0xff
 80034c2:	f040 80e6 	bne.w	8003692 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	617b      	str	r3, [r7, #20]
   				break;
 80034ca:	e0ef      	b.n	80036ac <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3301      	adds	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]
   				break;
 80034d2:	e0eb      	b.n	80036ac <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	3301      	adds	r3, #1
 80034d8:	617b      	str	r3, [r7, #20]
   				p++;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	3301      	adds	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
   				type = *p++;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	617a      	str	r2, [r7, #20]
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	74fb      	strb	r3, [r7, #19]
   				break;
 80034ea:	e0df      	b.n	80036ac <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	3301      	adds	r3, #1
 80034f0:	617b      	str	r3, [r7, #20]
   				p++;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	3301      	adds	r3, #1
 80034f6:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	617a      	str	r2, [r7, #20]
 80034fe:	781a      	ldrb	r2, [r3, #0]
 8003500:	4b0f      	ldr	r3, [pc, #60]	@ (8003540 <parseDHCPMSG+0x2a4>)
 8003502:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	617a      	str	r2, [r7, #20]
 800350a:	781a      	ldrb	r2, [r3, #0]
 800350c:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <parseDHCPMSG+0x2a4>)
 800350e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	617a      	str	r2, [r7, #20]
 8003516:	781a      	ldrb	r2, [r3, #0]
 8003518:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <parseDHCPMSG+0x2a4>)
 800351a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	617a      	str	r2, [r7, #20]
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <parseDHCPMSG+0x2a4>)
 8003526:	70da      	strb	r2, [r3, #3]
   				break;
 8003528:	e0c0      	b.n	80036ac <parseDHCPMSG+0x410>
 800352a:	bf00      	nop
 800352c:	20005885 	.word	0x20005885
 8003530:	200058b0 	.word	0x200058b0
 8003534:	200058b4 	.word	0x200058b4
 8003538:	20005888 	.word	0x20005888
 800353c:	2000588c 	.word	0x2000588c
 8003540:	2000589c 	.word	0x2000589c
   			case routersOnSubnet :
   				p++;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	3301      	adds	r3, #1
 8003548:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	617a      	str	r2, [r7, #20]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	617a      	str	r2, [r7, #20]
 800355a:	781a      	ldrb	r2, [r3, #0]
 800355c:	4b59      	ldr	r3, [pc, #356]	@ (80036c4 <parseDHCPMSG+0x428>)
 800355e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	617a      	str	r2, [r7, #20]
 8003566:	781a      	ldrb	r2, [r3, #0]
 8003568:	4b56      	ldr	r3, [pc, #344]	@ (80036c4 <parseDHCPMSG+0x428>)
 800356a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	617a      	str	r2, [r7, #20]
 8003572:	781a      	ldrb	r2, [r3, #0]
 8003574:	4b53      	ldr	r3, [pc, #332]	@ (80036c4 <parseDHCPMSG+0x428>)
 8003576:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	617a      	str	r2, [r7, #20]
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	4b50      	ldr	r3, [pc, #320]	@ (80036c4 <parseDHCPMSG+0x428>)
 8003582:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003584:	7afb      	ldrb	r3, [r7, #11]
 8003586:	3b04      	subs	r3, #4
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	4413      	add	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
   				break;
 800358e:	e08d      	b.n	80036ac <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	3301      	adds	r3, #1
 8003594:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	617a      	str	r2, [r7, #20]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	617a      	str	r2, [r7, #20]
 80035a6:	781a      	ldrb	r2, [r3, #0]
 80035a8:	4b47      	ldr	r3, [pc, #284]	@ (80036c8 <parseDHCPMSG+0x42c>)
 80035aa:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	617a      	str	r2, [r7, #20]
 80035b2:	781a      	ldrb	r2, [r3, #0]
 80035b4:	4b44      	ldr	r3, [pc, #272]	@ (80036c8 <parseDHCPMSG+0x42c>)
 80035b6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	617a      	str	r2, [r7, #20]
 80035be:	781a      	ldrb	r2, [r3, #0]
 80035c0:	4b41      	ldr	r3, [pc, #260]	@ (80036c8 <parseDHCPMSG+0x42c>)
 80035c2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	617a      	str	r2, [r7, #20]
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	4b3e      	ldr	r3, [pc, #248]	@ (80036c8 <parseDHCPMSG+0x42c>)
 80035ce:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 80035d0:	7afb      	ldrb	r3, [r7, #11]
 80035d2:	3b04      	subs	r3, #4
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4413      	add	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
   				break;
 80035da:	e067      	b.n	80036ac <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	3301      	adds	r3, #1
 80035e0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	617a      	str	r2, [r7, #20]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	617a      	str	r2, [r7, #20]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b35      	ldr	r3, [pc, #212]	@ (80036cc <parseDHCPMSG+0x430>)
 80035f8:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80035fa:	4b34      	ldr	r3, [pc, #208]	@ (80036cc <parseDHCPMSG+0x430>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	021a      	lsls	r2, r3, #8
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	1c59      	adds	r1, r3, #1
 8003604:	6179      	str	r1, [r7, #20]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	4413      	add	r3, r2
 800360a:	4a30      	ldr	r2, [pc, #192]	@ (80036cc <parseDHCPMSG+0x430>)
 800360c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800360e:	4b2f      	ldr	r3, [pc, #188]	@ (80036cc <parseDHCPMSG+0x430>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	021a      	lsls	r2, r3, #8
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	1c59      	adds	r1, r3, #1
 8003618:	6179      	str	r1, [r7, #20]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	4413      	add	r3, r2
 800361e:	4a2b      	ldr	r2, [pc, #172]	@ (80036cc <parseDHCPMSG+0x430>)
 8003620:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003622:	4b2a      	ldr	r3, [pc, #168]	@ (80036cc <parseDHCPMSG+0x430>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	021a      	lsls	r2, r3, #8
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	1c59      	adds	r1, r3, #1
 800362c:	6179      	str	r1, [r7, #20]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	4413      	add	r3, r2
 8003632:	4a26      	ldr	r2, [pc, #152]	@ (80036cc <parseDHCPMSG+0x430>)
 8003634:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8003636:	e039      	b.n	80036ac <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	3301      	adds	r3, #1
 800363c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	617a      	str	r2, [r7, #20]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	617a      	str	r2, [r7, #20]
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	4b1f      	ldr	r3, [pc, #124]	@ (80036d0 <parseDHCPMSG+0x434>)
 8003652:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	617a      	str	r2, [r7, #20]
 800365a:	781a      	ldrb	r2, [r3, #0]
 800365c:	4b1c      	ldr	r3, [pc, #112]	@ (80036d0 <parseDHCPMSG+0x434>)
 800365e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	617a      	str	r2, [r7, #20]
 8003666:	781a      	ldrb	r2, [r3, #0]
 8003668:	4b19      	ldr	r3, [pc, #100]	@ (80036d0 <parseDHCPMSG+0x434>)
 800366a:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	617a      	str	r2, [r7, #20]
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	4b16      	ldr	r3, [pc, #88]	@ (80036d0 <parseDHCPMSG+0x434>)
 8003676:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8003678:	793a      	ldrb	r2, [r7, #4]
 800367a:	4b16      	ldr	r3, [pc, #88]	@ (80036d4 <parseDHCPMSG+0x438>)
 800367c:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 800367e:	797a      	ldrb	r2, [r7, #5]
 8003680:	4b14      	ldr	r3, [pc, #80]	@ (80036d4 <parseDHCPMSG+0x438>)
 8003682:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8003684:	79ba      	ldrb	r2, [r7, #6]
 8003686:	4b13      	ldr	r3, [pc, #76]	@ (80036d4 <parseDHCPMSG+0x438>)
 8003688:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 800368a:	79fa      	ldrb	r2, [r7, #7]
 800368c:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <parseDHCPMSG+0x438>)
 800368e:	70da      	strb	r2, [r3, #3]
   				break;
 8003690:	e00c      	b.n	80036ac <parseDHCPMSG+0x410>
   			default :
   				p++;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	3301      	adds	r3, #1
 8003696:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	617a      	str	r2, [r7, #20]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 80036a2:	7afb      	ldrb	r3, [r7, #11]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4413      	add	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]
   				break;
 80036aa:	bf00      	nop
		while ( p < e ) {
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	f4ff ae8a 	bcc.w	80033ca <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 80036b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd90      	pop	{r4, r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20005898 	.word	0x20005898
 80036c8:	200058a0 	.word	0x200058a0
 80036cc:	20000038 	.word	0x20000038
 80036d0:	20005888 	.word	0x20005888
 80036d4:	2000588c 	.word	0x2000588c

080036d8 <DHCP_run>:

uint8_t DHCP_run(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 80036de:	4b7f      	ldr	r3, [pc, #508]	@ (80038dc <DHCP_run+0x204>)
 80036e0:	f993 3000 	ldrsb.w	r3, [r3]
 80036e4:	2b06      	cmp	r3, #6
 80036e6:	d101      	bne.n	80036ec <DHCP_run+0x14>
 80036e8:	2305      	movs	r3, #5
 80036ea:	e0f3      	b.n	80038d4 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 80036ec:	4b7c      	ldr	r3, [pc, #496]	@ (80038e0 <DHCP_run+0x208>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	3301      	adds	r3, #1
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 fac8 	bl	8004c90 <WIZCHIP_READ>
 8003700:	4603      	mov	r3, r0
 8003702:	2b22      	cmp	r3, #34	@ 0x22
 8003704:	d006      	beq.n	8003714 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8003706:	4b76      	ldr	r3, [pc, #472]	@ (80038e0 <DHCP_run+0x208>)
 8003708:	7818      	ldrb	r0, [r3, #0]
 800370a:	2300      	movs	r3, #0
 800370c:	2244      	movs	r2, #68	@ 0x44
 800370e:	2102      	movs	r1, #2
 8003710:	f000 fabe 	bl	8003c90 <socket>

	ret = DHCP_RUNNING;
 8003714:	2301      	movs	r3, #1
 8003716:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8003718:	f7ff fdc0 	bl	800329c <parseDHCPMSG>
 800371c:	4603      	mov	r3, r0
 800371e:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8003720:	4b6e      	ldr	r3, [pc, #440]	@ (80038dc <DHCP_run+0x204>)
 8003722:	f993 3000 	ldrsb.w	r3, [r3]
 8003726:	2b04      	cmp	r3, #4
 8003728:	f200 80d0 	bhi.w	80038cc <DHCP_run+0x1f4>
 800372c:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <DHCP_run+0x5c>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003749 	.word	0x08003749
 8003738:	0800376d 	.word	0x0800376d
 800373c:	080037b1 	.word	0x080037b1
 8003740:	08003801 	.word	0x08003801
 8003744:	0800385b 	.word	0x0800385b
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8003748:	4b66      	ldr	r3, [pc, #408]	@ (80038e4 <DHCP_run+0x20c>)
 800374a:	2200      	movs	r2, #0
 800374c:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 800374e:	4b65      	ldr	r3, [pc, #404]	@ (80038e4 <DHCP_run+0x20c>)
 8003750:	2200      	movs	r2, #0
 8003752:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8003754:	4b63      	ldr	r3, [pc, #396]	@ (80038e4 <DHCP_run+0x20c>)
 8003756:	2200      	movs	r2, #0
 8003758:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 800375a:	4b62      	ldr	r3, [pc, #392]	@ (80038e4 <DHCP_run+0x20c>)
 800375c:	2200      	movs	r2, #0
 800375e:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8003760:	f7fe fffa 	bl	8002758 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8003764:	4b5d      	ldr	r3, [pc, #372]	@ (80038dc <DHCP_run+0x204>)
 8003766:	2201      	movs	r2, #1
 8003768:	701a      	strb	r2, [r3, #0]
   		break;
 800376a:	e0b2      	b.n	80038d2 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 800376c:	79bb      	ldrb	r3, [r7, #6]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d119      	bne.n	80037a6 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8003772:	4b5d      	ldr	r3, [pc, #372]	@ (80038e8 <DHCP_run+0x210>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	7c1a      	ldrb	r2, [r3, #16]
 8003778:	4b5a      	ldr	r3, [pc, #360]	@ (80038e4 <DHCP_run+0x20c>)
 800377a:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 800377c:	4b5a      	ldr	r3, [pc, #360]	@ (80038e8 <DHCP_run+0x210>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	7c5a      	ldrb	r2, [r3, #17]
 8003782:	4b58      	ldr	r3, [pc, #352]	@ (80038e4 <DHCP_run+0x20c>)
 8003784:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8003786:	4b58      	ldr	r3, [pc, #352]	@ (80038e8 <DHCP_run+0x210>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	7c9a      	ldrb	r2, [r3, #18]
 800378c:	4b55      	ldr	r3, [pc, #340]	@ (80038e4 <DHCP_run+0x20c>)
 800378e:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8003790:	4b55      	ldr	r3, [pc, #340]	@ (80038e8 <DHCP_run+0x210>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	7cda      	ldrb	r2, [r3, #19]
 8003796:	4b53      	ldr	r3, [pc, #332]	@ (80038e4 <DHCP_run+0x20c>)
 8003798:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 800379a:	f7ff f9a3 	bl	8002ae4 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 800379e:	4b4f      	ldr	r3, [pc, #316]	@ (80038dc <DHCP_run+0x204>)
 80037a0:	2202      	movs	r2, #2
 80037a2:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 80037a4:	e095      	b.n	80038d2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80037a6:	f000 f8b1 	bl	800390c <check_DHCP_timeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
         break;
 80037ae:	e090      	b.n	80038d2 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 80037b0:	79bb      	ldrb	r3, [r7, #6]
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	d116      	bne.n	80037e4 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 80037b6:	f000 f909 	bl	80039cc <check_DHCP_leasedIP>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80037c0:	4b4a      	ldr	r3, [pc, #296]	@ (80038ec <DHCP_run+0x214>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4798      	blx	r3
					reset_DHCP_timeout();
 80037c6:	f000 f9d3 	bl	8003b70 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80037ca:	4b44      	ldr	r3, [pc, #272]	@ (80038dc <DHCP_run+0x204>)
 80037cc:	2203      	movs	r2, #3
 80037ce:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80037d0:	e07f      	b.n	80038d2 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 80037d2:	f000 f9cd 	bl	8003b70 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 80037d6:	4b46      	ldr	r3, [pc, #280]	@ (80038f0 <DHCP_run+0x218>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 80037dc:	4b3f      	ldr	r3, [pc, #252]	@ (80038dc <DHCP_run+0x204>)
 80037de:	2200      	movs	r2, #0
 80037e0:	701a      	strb	r2, [r3, #0]
		break;
 80037e2:	e076      	b.n	80038d2 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80037e4:	79bb      	ldrb	r3, [r7, #6]
 80037e6:	2b06      	cmp	r3, #6
 80037e8:	d105      	bne.n	80037f6 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 80037ea:	f000 f9c1 	bl	8003b70 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80037ee:	4b3b      	ldr	r3, [pc, #236]	@ (80038dc <DHCP_run+0x204>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	701a      	strb	r2, [r3, #0]
		break;
 80037f4:	e06d      	b.n	80038d2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80037f6:	f000 f889 	bl	800390c <check_DHCP_timeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
		break;
 80037fe:	e068      	b.n	80038d2 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8003800:	2304      	movs	r3, #4
 8003802:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8003804:	4b3b      	ldr	r3, [pc, #236]	@ (80038f4 <DHCP_run+0x21c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d060      	beq.n	80038d0 <DHCP_run+0x1f8>
 800380e:	4b39      	ldr	r3, [pc, #228]	@ (80038f4 <DHCP_run+0x21c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	085a      	lsrs	r2, r3, #1
 8003814:	4b38      	ldr	r3, [pc, #224]	@ (80038f8 <DHCP_run+0x220>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	d259      	bcs.n	80038d0 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8003820:	4b30      	ldr	r3, [pc, #192]	@ (80038e4 <DHCP_run+0x20c>)
 8003822:	781a      	ldrb	r2, [r3, #0]
 8003824:	4b35      	ldr	r3, [pc, #212]	@ (80038fc <DHCP_run+0x224>)
 8003826:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8003828:	4b2e      	ldr	r3, [pc, #184]	@ (80038e4 <DHCP_run+0x20c>)
 800382a:	785a      	ldrb	r2, [r3, #1]
 800382c:	4b33      	ldr	r3, [pc, #204]	@ (80038fc <DHCP_run+0x224>)
 800382e:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8003830:	4b2c      	ldr	r3, [pc, #176]	@ (80038e4 <DHCP_run+0x20c>)
 8003832:	789a      	ldrb	r2, [r3, #2]
 8003834:	4b31      	ldr	r3, [pc, #196]	@ (80038fc <DHCP_run+0x224>)
 8003836:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8003838:	4b2a      	ldr	r3, [pc, #168]	@ (80038e4 <DHCP_run+0x20c>)
 800383a:	78da      	ldrb	r2, [r3, #3]
 800383c:	4b2f      	ldr	r3, [pc, #188]	@ (80038fc <DHCP_run+0x224>)
 800383e:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8003840:	4b2f      	ldr	r3, [pc, #188]	@ (8003900 <DHCP_run+0x228>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3301      	adds	r3, #1
 8003846:	4a2e      	ldr	r2, [pc, #184]	@ (8003900 <DHCP_run+0x228>)
 8003848:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 800384a:	f7ff f94b 	bl	8002ae4 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 800384e:	f000 f98f 	bl	8003b70 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8003852:	4b22      	ldr	r3, [pc, #136]	@ (80038dc <DHCP_run+0x204>)
 8003854:	2204      	movs	r2, #4
 8003856:	701a      	strb	r2, [r3, #0]
			}
		break;
 8003858:	e03a      	b.n	80038d0 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 800385a:	2304      	movs	r3, #4
 800385c:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 800385e:	79bb      	ldrb	r3, [r7, #6]
 8003860:	2b05      	cmp	r3, #5
 8003862:	d125      	bne.n	80038b0 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8003864:	4b27      	ldr	r3, [pc, #156]	@ (8003904 <DHCP_run+0x22c>)
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800386a:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <DHCP_run+0x224>)
 800386c:	781a      	ldrb	r2, [r3, #0]
 800386e:	4b1d      	ldr	r3, [pc, #116]	@ (80038e4 <DHCP_run+0x20c>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d111      	bne.n	800389a <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8003876:	4b21      	ldr	r3, [pc, #132]	@ (80038fc <DHCP_run+0x224>)
 8003878:	785a      	ldrb	r2, [r3, #1]
 800387a:	4b1a      	ldr	r3, [pc, #104]	@ (80038e4 <DHCP_run+0x20c>)
 800387c:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800387e:	429a      	cmp	r2, r3
 8003880:	d10b      	bne.n	800389a <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8003882:	4b1e      	ldr	r3, [pc, #120]	@ (80038fc <DHCP_run+0x224>)
 8003884:	789a      	ldrb	r2, [r3, #2]
 8003886:	4b17      	ldr	r3, [pc, #92]	@ (80038e4 <DHCP_run+0x20c>)
 8003888:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d105      	bne.n	800389a <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 800388e:	4b1b      	ldr	r3, [pc, #108]	@ (80038fc <DHCP_run+0x224>)
 8003890:	78da      	ldrb	r2, [r3, #3]
 8003892:	4b14      	ldr	r3, [pc, #80]	@ (80038e4 <DHCP_run+0x20c>)
 8003894:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d004      	beq.n	80038a4 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 800389a:	2303      	movs	r3, #3
 800389c:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 800389e:	4b1a      	ldr	r3, [pc, #104]	@ (8003908 <DHCP_run+0x230>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 80038a4:	f000 f964 	bl	8003b70 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 80038a8:	4b0c      	ldr	r3, [pc, #48]	@ (80038dc <DHCP_run+0x204>)
 80038aa:	2203      	movs	r2, #3
 80038ac:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 80038ae:	e010      	b.n	80038d2 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80038b0:	79bb      	ldrb	r3, [r7, #6]
 80038b2:	2b06      	cmp	r3, #6
 80038b4:	d105      	bne.n	80038c2 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 80038b6:	f000 f95b 	bl	8003b70 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80038ba:	4b08      	ldr	r3, [pc, #32]	@ (80038dc <DHCP_run+0x204>)
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
	   	break;
 80038c0:	e007      	b.n	80038d2 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80038c2:	f000 f823 	bl	800390c <check_DHCP_timeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	71fb      	strb	r3, [r7, #7]
	   	break;
 80038ca:	e002      	b.n	80038d2 <DHCP_run+0x1fa>
		default :
   		break;
 80038cc:	bf00      	nop
 80038ce:	e000      	b.n	80038d2 <DHCP_run+0x1fa>
		break;
 80038d0:	bf00      	nop
	}

	return ret;
 80038d2:	79fb      	ldrb	r3, [r7, #7]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	200058a4 	.word	0x200058a4
 80038e0:	20005885 	.word	0x20005885
 80038e4:	20005894 	.word	0x20005894
 80038e8:	200058b0 	.word	0x200058b0
 80038ec:	20000048 	.word	0x20000048
 80038f0:	20000050 	.word	0x20000050
 80038f4:	20000038 	.word	0x20000038
 80038f8:	200058a8 	.word	0x200058a8
 80038fc:	20005890 	.word	0x20005890
 8003900:	200058ac 	.word	0x200058ac
 8003904:	200058a5 	.word	0x200058a5
 8003908:	2000004c 	.word	0x2000004c

0800390c <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8003912:	2301      	movs	r3, #1
 8003914:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8003916:	4b29      	ldr	r3, [pc, #164]	@ (80039bc <check_DHCP_timeout+0xb0>)
 8003918:	f993 3000 	ldrsb.w	r3, [r3]
 800391c:	2b01      	cmp	r3, #1
 800391e:	dc2d      	bgt.n	800397c <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8003920:	4b27      	ldr	r3, [pc, #156]	@ (80039c0 <check_DHCP_timeout+0xb4>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b27      	ldr	r3, [pc, #156]	@ (80039c4 <check_DHCP_timeout+0xb8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d242      	bcs.n	80039b2 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 800392c:	4b26      	ldr	r3, [pc, #152]	@ (80039c8 <check_DHCP_timeout+0xbc>)
 800392e:	f993 3000 	ldrsb.w	r3, [r3]
 8003932:	2b04      	cmp	r3, #4
 8003934:	d00c      	beq.n	8003950 <check_DHCP_timeout+0x44>
 8003936:	2b04      	cmp	r3, #4
 8003938:	dc0d      	bgt.n	8003956 <check_DHCP_timeout+0x4a>
 800393a:	2b01      	cmp	r3, #1
 800393c:	d002      	beq.n	8003944 <check_DHCP_timeout+0x38>
 800393e:	2b02      	cmp	r3, #2
 8003940:	d003      	beq.n	800394a <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8003942:	e008      	b.n	8003956 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8003944:	f7fe ff08 	bl	8002758 <send_DHCP_DISCOVER>
				break;
 8003948:	e006      	b.n	8003958 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800394a:	f7ff f8cb 	bl	8002ae4 <send_DHCP_REQUEST>
				break;
 800394e:	e003      	b.n	8003958 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8003950:	f7ff f8c8 	bl	8002ae4 <send_DHCP_REQUEST>
				break;
 8003954:	e000      	b.n	8003958 <check_DHCP_timeout+0x4c>
				break;
 8003956:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8003958:	4b1a      	ldr	r3, [pc, #104]	@ (80039c4 <check_DHCP_timeout+0xb8>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 800395e:	4b19      	ldr	r3, [pc, #100]	@ (80039c4 <check_DHCP_timeout+0xb8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	330a      	adds	r3, #10
 8003964:	4a16      	ldr	r2, [pc, #88]	@ (80039c0 <check_DHCP_timeout+0xb4>)
 8003966:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8003968:	4b14      	ldr	r3, [pc, #80]	@ (80039bc <check_DHCP_timeout+0xb0>)
 800396a:	f993 3000 	ldrsb.w	r3, [r3]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	3301      	adds	r3, #1
 8003972:	b2db      	uxtb	r3, r3
 8003974:	b25a      	sxtb	r2, r3
 8003976:	4b11      	ldr	r3, [pc, #68]	@ (80039bc <check_DHCP_timeout+0xb0>)
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e01a      	b.n	80039b2 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 800397c:	4b12      	ldr	r3, [pc, #72]	@ (80039c8 <check_DHCP_timeout+0xbc>)
 800397e:	f993 3000 	ldrsb.w	r3, [r3]
 8003982:	2b04      	cmp	r3, #4
 8003984:	d00c      	beq.n	80039a0 <check_DHCP_timeout+0x94>
 8003986:	2b04      	cmp	r3, #4
 8003988:	dc10      	bgt.n	80039ac <check_DHCP_timeout+0xa0>
 800398a:	2b01      	cmp	r3, #1
 800398c:	d002      	beq.n	8003994 <check_DHCP_timeout+0x88>
 800398e:	2b02      	cmp	r3, #2
 8003990:	d006      	beq.n	80039a0 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8003992:	e00b      	b.n	80039ac <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8003994:	4b0c      	ldr	r3, [pc, #48]	@ (80039c8 <check_DHCP_timeout+0xbc>)
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 800399a:	2300      	movs	r3, #0
 800399c:	71fb      	strb	r3, [r7, #7]
				break;
 800399e:	e006      	b.n	80039ae <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 80039a0:	f7fe feda 	bl	8002758 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 80039a4:	4b08      	ldr	r3, [pc, #32]	@ (80039c8 <check_DHCP_timeout+0xbc>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
				break;
 80039aa:	e000      	b.n	80039ae <check_DHCP_timeout+0xa2>
				break;
 80039ac:	bf00      	nop
		}
		reset_DHCP_timeout();
 80039ae:	f000 f8df 	bl	8003b70 <reset_DHCP_timeout>
	}
	return ret;
 80039b2:	79fb      	ldrb	r3, [r7, #7]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	200058a5 	.word	0x200058a5
 80039c0:	2000003c 	.word	0x2000003c
 80039c4:	200058a8 	.word	0x200058a8
 80039c8:	200058a4 	.word	0x200058a4

080039cc <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80039d2:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80039d6:	f001 f95b 	bl	8004c90 <WIZCHIP_READ>
 80039da:	4603      	mov	r3, r0
 80039dc:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 80039de:	2103      	movs	r1, #3
 80039e0:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80039e4:	f001 f9a0 	bl	8004d28 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 80039e8:	4b13      	ldr	r3, [pc, #76]	@ (8003a38 <check_DHCP_leasedIP+0x6c>)
 80039ea:	7818      	ldrb	r0, [r3, #0]
 80039ec:	f241 3388 	movw	r3, #5000	@ 0x1388
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	4b12      	ldr	r3, [pc, #72]	@ (8003a3c <check_DHCP_leasedIP+0x70>)
 80039f4:	2211      	movs	r2, #17
 80039f6:	4912      	ldr	r1, [pc, #72]	@ (8003a40 <check_DHCP_leasedIP+0x74>)
 80039f8:	f000 fd16 	bl	8004428 <sendto>
 80039fc:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	4619      	mov	r1, r3
 8003a02:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8003a06:	f001 f98f 	bl	8004d28 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	f113 0f0d 	cmn.w	r3, #13
 8003a10:	d101      	bne.n	8003a16 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e00c      	b.n	8003a30 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8003a16:	f7ff faef 	bl	8002ff8 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a44 <check_DHCP_leasedIP+0x78>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8003a20:	bf00      	nop
 8003a22:	4b08      	ldr	r3, [pc, #32]	@ (8003a44 <check_DHCP_leasedIP+0x78>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d9f9      	bls.n	8003a22 <check_DHCP_leasedIP+0x56>

		return 0;
 8003a2e:	2300      	movs	r3, #0
	}
}	
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20005885 	.word	0x20005885
 8003a3c:	20005894 	.word	0x20005894
 8003a40:	08007610 	.word	0x08007610
 8003a44:	200058a8 	.word	0x200058a8

08003a48 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	6039      	str	r1, [r7, #0]
 8003a52:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8003a58:	2206      	movs	r2, #6
 8003a5a:	493f      	ldr	r1, [pc, #252]	@ (8003b58 <DHCP_init+0x110>)
 8003a5c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003a60:	f001 f9b0 	bl	8004dc4 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8003a64:	4b3c      	ldr	r3, [pc, #240]	@ (8003b58 <DHCP_init+0x110>)
 8003a66:	781a      	ldrb	r2, [r3, #0]
 8003a68:	4b3b      	ldr	r3, [pc, #236]	@ (8003b58 <DHCP_init+0x110>)
 8003a6a:	785b      	ldrb	r3, [r3, #1]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	4b39      	ldr	r3, [pc, #228]	@ (8003b58 <DHCP_init+0x110>)
 8003a72:	789b      	ldrb	r3, [r3, #2]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	4b37      	ldr	r3, [pc, #220]	@ (8003b58 <DHCP_init+0x110>)
 8003a7a:	78db      	ldrb	r3, [r3, #3]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	4b35      	ldr	r3, [pc, #212]	@ (8003b58 <DHCP_init+0x110>)
 8003a82:	791b      	ldrb	r3, [r3, #4]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	4b33      	ldr	r3, [pc, #204]	@ (8003b58 <DHCP_init+0x110>)
 8003a8a:	795b      	ldrb	r3, [r3, #5]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d117      	bne.n	8003ac4 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8003a94:	4b30      	ldr	r3, [pc, #192]	@ (8003b58 <DHCP_init+0x110>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8003a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b58 <DHCP_init+0x110>)
 8003a9c:	2208      	movs	r2, #8
 8003a9e:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8003aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8003b58 <DHCP_init+0x110>)
 8003aa2:	22dc      	movs	r2, #220	@ 0xdc
 8003aa4:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8003aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8003b58 <DHCP_init+0x110>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8003aac:	4b2a      	ldr	r3, [pc, #168]	@ (8003b58 <DHCP_init+0x110>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8003ab2:	4b29      	ldr	r3, [pc, #164]	@ (8003b58 <DHCP_init+0x110>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8003ab8:	2206      	movs	r2, #6
 8003aba:	4927      	ldr	r1, [pc, #156]	@ (8003b58 <DHCP_init+0x110>)
 8003abc:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8003ac0:	f001 f9e0 	bl	8004e84 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8003ac4:	4a25      	ldr	r2, [pc, #148]	@ (8003b5c <DHCP_init+0x114>)
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8003aca:	4a25      	ldr	r2, [pc, #148]	@ (8003b60 <DHCP_init+0x118>)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8003ad0:	4b24      	ldr	r3, [pc, #144]	@ (8003b64 <DHCP_init+0x11c>)
 8003ad2:	4a25      	ldr	r2, [pc, #148]	@ (8003b68 <DHCP_init+0x120>)
 8003ad4:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8003ad6:	4b20      	ldr	r3, [pc, #128]	@ (8003b58 <DHCP_init+0x110>)
 8003ad8:	78db      	ldrb	r3, [r3, #3]
 8003ada:	461a      	mov	r2, r3
 8003adc:	4b21      	ldr	r3, [pc, #132]	@ (8003b64 <DHCP_init+0x11c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	4a20      	ldr	r2, [pc, #128]	@ (8003b64 <DHCP_init+0x11c>)
 8003ae4:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8003ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8003b58 <DHCP_init+0x110>)
 8003ae8:	791b      	ldrb	r3, [r3, #4]
 8003aea:	461a      	mov	r2, r3
 8003aec:	4b1d      	ldr	r3, [pc, #116]	@ (8003b64 <DHCP_init+0x11c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4413      	add	r3, r2
 8003af2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b64 <DHCP_init+0x11c>)
 8003af4:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8003af6:	4b18      	ldr	r3, [pc, #96]	@ (8003b58 <DHCP_init+0x110>)
 8003af8:	795b      	ldrb	r3, [r3, #5]
 8003afa:	461a      	mov	r2, r3
 8003afc:	4b19      	ldr	r3, [pc, #100]	@ (8003b64 <DHCP_init+0x11c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4413      	add	r3, r2
 8003b02:	4a18      	ldr	r2, [pc, #96]	@ (8003b64 <DHCP_init+0x11c>)
 8003b04:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8003b06:	4b14      	ldr	r3, [pc, #80]	@ (8003b58 <DHCP_init+0x110>)
 8003b08:	78da      	ldrb	r2, [r3, #3]
 8003b0a:	4b13      	ldr	r3, [pc, #76]	@ (8003b58 <DHCP_init+0x110>)
 8003b0c:	791b      	ldrb	r3, [r3, #4]
 8003b0e:	4053      	eors	r3, r2
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4b11      	ldr	r3, [pc, #68]	@ (8003b58 <DHCP_init+0x110>)
 8003b14:	795b      	ldrb	r3, [r3, #5]
 8003b16:	4053      	eors	r3, r2
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <DHCP_init+0x11c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4413      	add	r3, r2
 8003b22:	4a10      	ldr	r2, [pc, #64]	@ (8003b64 <DHCP_init+0x11c>)
 8003b24:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8003b26:	f107 030c 	add.w	r3, r7, #12
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003b32:	f001 f9a7 	bl	8004e84 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8003b36:	f107 030c 	add.w	r3, r7, #12
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003b42:	f001 f99f 	bl	8004e84 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8003b46:	f000 f813 	bl	8003b70 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8003b4a:	4b08      	ldr	r3, [pc, #32]	@ (8003b6c <DHCP_init+0x124>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	200058b4 	.word	0x200058b4
 8003b5c:	20005885 	.word	0x20005885
 8003b60:	200058b0 	.word	0x200058b0
 8003b64:	200058ac 	.word	0x200058ac
 8003b68:	12345678 	.word	0x12345678
 8003b6c:	200058a4 	.word	0x200058a4

08003b70 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8003b74:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <reset_DHCP_timeout+0x20>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8003b7a:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <reset_DHCP_timeout+0x24>)
 8003b7c:	220a      	movs	r2, #10
 8003b7e:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8003b80:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <reset_DHCP_timeout+0x28>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
}
 8003b86:	bf00      	nop
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	200058a8 	.word	0x200058a8
 8003b94:	2000003c 	.word	0x2000003c
 8003b98:	200058a5 	.word	0x200058a5

08003b9c <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <getIPfromDHCP+0x3c>)
 8003ba6:	781a      	ldrb	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	4a09      	ldr	r2, [pc, #36]	@ (8003bd8 <getIPfromDHCP+0x3c>)
 8003bb2:	7852      	ldrb	r2, [r2, #1]
 8003bb4:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3302      	adds	r3, #2
 8003bba:	4a07      	ldr	r2, [pc, #28]	@ (8003bd8 <getIPfromDHCP+0x3c>)
 8003bbc:	7892      	ldrb	r2, [r2, #2]
 8003bbe:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3303      	adds	r3, #3
 8003bc4:	4a04      	ldr	r2, [pc, #16]	@ (8003bd8 <getIPfromDHCP+0x3c>)
 8003bc6:	78d2      	ldrb	r2, [r2, #3]
 8003bc8:	701a      	strb	r2, [r3, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20005894 	.word	0x20005894

08003bdc <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 8003be4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c18 <getGWfromDHCP+0x3c>)
 8003be6:	781a      	ldrb	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	4a09      	ldr	r2, [pc, #36]	@ (8003c18 <getGWfromDHCP+0x3c>)
 8003bf2:	7852      	ldrb	r2, [r2, #1]
 8003bf4:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	4a07      	ldr	r2, [pc, #28]	@ (8003c18 <getGWfromDHCP+0x3c>)
 8003bfc:	7892      	ldrb	r2, [r2, #2]
 8003bfe:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3303      	adds	r3, #3
 8003c04:	4a04      	ldr	r2, [pc, #16]	@ (8003c18 <getGWfromDHCP+0x3c>)
 8003c06:	78d2      	ldrb	r2, [r2, #3]
 8003c08:	701a      	strb	r2, [r3, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	20005898 	.word	0x20005898

08003c1c <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 8003c24:	4b0c      	ldr	r3, [pc, #48]	@ (8003c58 <getSNfromDHCP+0x3c>)
 8003c26:	781a      	ldrb	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	4a09      	ldr	r2, [pc, #36]	@ (8003c58 <getSNfromDHCP+0x3c>)
 8003c32:	7852      	ldrb	r2, [r2, #1]
 8003c34:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3302      	adds	r3, #2
 8003c3a:	4a07      	ldr	r2, [pc, #28]	@ (8003c58 <getSNfromDHCP+0x3c>)
 8003c3c:	7892      	ldrb	r2, [r2, #2]
 8003c3e:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3303      	adds	r3, #3
 8003c44:	4a04      	ldr	r2, [pc, #16]	@ (8003c58 <getSNfromDHCP+0x3c>)
 8003c46:	78d2      	ldrb	r2, [r2, #3]
 8003c48:	701a      	strb	r2, [r3, #0]
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	2000589c 	.word	0x2000589c

08003c5c <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	2b09      	cmp	r3, #9
 8003c72:	d803      	bhi.n	8003c7c <NibbleToHex+0x20>
    return nibble + '0';
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	3330      	adds	r3, #48	@ 0x30
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	e002      	b.n	8003c82 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8003c7c:	79fb      	ldrb	r3, [r7, #7]
 8003c7e:	3337      	adds	r3, #55	@ 0x37
 8003c80:	b2db      	uxtb	r3, r3
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4604      	mov	r4, r0
 8003c98:	4608      	mov	r0, r1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	71fb      	strb	r3, [r7, #7]
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	71bb      	strb	r3, [r7, #6]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	80bb      	strh	r3, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d902      	bls.n	8003cba <socket+0x2a>
 8003cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb8:	e0f0      	b.n	8003e9c <socket+0x20c>
	switch(protocol)
 8003cba:	79bb      	ldrb	r3, [r7, #6]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d005      	beq.n	8003ccc <socket+0x3c>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	dd11      	ble.n	8003ce8 <socket+0x58>
 8003cc4:	3b02      	subs	r3, #2
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d80e      	bhi.n	8003ce8 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003cca:	e011      	b.n	8003cf0 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8003ccc:	f107 030c 	add.w	r3, r7, #12
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8003cd8:	f001 f874 	bl	8004dc4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d105      	bne.n	8003cee <socket+0x5e>
 8003ce2:	f06f 0302 	mvn.w	r3, #2
 8003ce6:	e0d9      	b.n	8003e9c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003ce8:	f06f 0304 	mvn.w	r3, #4
 8003cec:	e0d6      	b.n	8003e9c <socket+0x20c>
	    break;
 8003cee:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <socket+0x70>
 8003cfa:	f06f 0305 	mvn.w	r3, #5
 8003cfe:	e0cd      	b.n	8003e9c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d028      	beq.n	8003d58 <socket+0xc8>
	{
   	switch(protocol)
 8003d06:	79bb      	ldrb	r3, [r7, #6]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d002      	beq.n	8003d12 <socket+0x82>
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d008      	beq.n	8003d22 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003d10:	e022      	b.n	8003d58 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d11a      	bne.n	8003d52 <socket+0xc2>
 8003d1c:	f06f 0305 	mvn.w	r3, #5
 8003d20:	e0bc      	b.n	8003e9c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d006      	beq.n	8003d3a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	db02      	blt.n	8003d3a <socket+0xaa>
 8003d34:	f06f 0305 	mvn.w	r3, #5
 8003d38:	e0b0      	b.n	8003e9c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d008      	beq.n	8003d56 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8003d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	db04      	blt.n	8003d56 <socket+0xc6>
 8003d4c:	f06f 0305 	mvn.w	r3, #5
 8003d50:	e0a4      	b.n	8003e9c <socket+0x20c>
   	      break;
 8003d52:	bf00      	nop
 8003d54:	e000      	b.n	8003d58 <socket+0xc8>
   	      break;
 8003d56:	bf00      	nop
   	}
   }
	close(sn);
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f8ac 	bl	8003eb8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	3301      	adds	r3, #1
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d6e:	f023 030f 	bic.w	r3, r3, #15
 8003d72:	b25a      	sxtb	r2, r3
 8003d74:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	b25b      	sxtb	r3, r3
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	4619      	mov	r1, r3
 8003d80:	f000 ffd2 	bl	8004d28 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8003d84:	88bb      	ldrh	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d110      	bne.n	8003dac <socket+0x11c>
	{
	   port = sock_any_port++;
 8003d8a:	4b46      	ldr	r3, [pc, #280]	@ (8003ea4 <socket+0x214>)
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	b291      	uxth	r1, r2
 8003d92:	4a44      	ldr	r2, [pc, #272]	@ (8003ea4 <socket+0x214>)
 8003d94:	8011      	strh	r1, [r2, #0]
 8003d96:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003d98:	4b42      	ldr	r3, [pc, #264]	@ (8003ea4 <socket+0x214>)
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d103      	bne.n	8003dac <socket+0x11c>
 8003da4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ea4 <socket+0x214>)
 8003da6:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8003daa:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003dac:	79fb      	ldrb	r3, [r7, #7]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	3301      	adds	r3, #1
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003db8:	461a      	mov	r2, r3
 8003dba:	88bb      	ldrh	r3, [r7, #4]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	f000 ffaf 	bl	8004d28 <WIZCHIP_WRITE>
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	3301      	adds	r3, #1
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	88bb      	ldrh	r3, [r7, #4]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f000 ffa2 	bl	8004d28 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	3301      	adds	r3, #1
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003df0:	2101      	movs	r1, #1
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 ff98 	bl	8004d28 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003df8:	bf00      	nop
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	3301      	adds	r3, #1
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 ff42 	bl	8004c90 <WIZCHIP_READ>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1f3      	bne.n	8003dfa <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	2201      	movs	r2, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	b21b      	sxth	r3, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	b21a      	sxth	r2, r3
 8003e20:	4b21      	ldr	r3, [pc, #132]	@ (8003ea8 <socket+0x218>)
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b21b      	sxth	r3, r3
 8003e26:	4013      	ands	r3, r2
 8003e28:	b21b      	sxth	r3, r3
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea8 <socket+0x218>)
 8003e2e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	f003 0201 	and.w	r2, r3, #1
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	b21a      	sxth	r2, r3
 8003e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea8 <socket+0x218>)
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b21b      	sxth	r3, r3
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b21b      	sxth	r3, r3
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	4b17      	ldr	r3, [pc, #92]	@ (8003ea8 <socket+0x218>)
 8003e4c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	2201      	movs	r2, #1
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	b21b      	sxth	r3, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	b21a      	sxth	r2, r3
 8003e5c:	4b13      	ldr	r3, [pc, #76]	@ (8003eac <socket+0x21c>)
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	b21b      	sxth	r3, r3
 8003e62:	4013      	ands	r3, r2
 8003e64:	b21b      	sxth	r3, r3
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	4b10      	ldr	r3, [pc, #64]	@ (8003eac <socket+0x21c>)
 8003e6a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	4a10      	ldr	r2, [pc, #64]	@ (8003eb0 <socket+0x220>)
 8003e70:	2100      	movs	r1, #0
 8003e72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb4 <socket+0x224>)
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003e7e:	bf00      	nop
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	3301      	adds	r3, #1
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 feff 	bl	8004c90 <WIZCHIP_READ>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f3      	beq.n	8003e80 <socket+0x1f0>
   return (int8_t)sn;
 8003e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd90      	pop	{r4, r7, pc}
 8003ea4:	20000054 	.word	0x20000054
 8003ea8:	200058ba 	.word	0x200058ba
 8003eac:	200058bc 	.word	0x200058bc
 8003eb0:	200058c0 	.word	0x200058c0
 8003eb4:	200058d0 	.word	0x200058d0

08003eb8 <close>:

int8_t close(uint8_t sn)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d902      	bls.n	8003ece <close+0x16>
 8003ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ecc:	e055      	b.n	8003f7a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003eda:	2110      	movs	r1, #16
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 ff23 	bl	8004d28 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003ee2:	bf00      	nop
 8003ee4:	79fb      	ldrb	r3, [r7, #7]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	3301      	adds	r3, #1
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fecd 	bl	8004c90 <WIZCHIP_READ>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f3      	bne.n	8003ee4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	3301      	adds	r3, #1
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003f08:	211f      	movs	r1, #31
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 ff0c 	bl	8004d28 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	2201      	movs	r2, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	b21b      	sxth	r3, r3
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	b21a      	sxth	r2, r3
 8003f1e:	4b19      	ldr	r3, [pc, #100]	@ (8003f84 <close+0xcc>)
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	b21b      	sxth	r3, r3
 8003f24:	4013      	ands	r3, r2
 8003f26:	b21b      	sxth	r3, r3
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	4b16      	ldr	r3, [pc, #88]	@ (8003f84 <close+0xcc>)
 8003f2c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	2201      	movs	r2, #1
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	b21b      	sxth	r3, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	b21a      	sxth	r2, r3
 8003f3c:	4b12      	ldr	r3, [pc, #72]	@ (8003f88 <close+0xd0>)
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b21b      	sxth	r3, r3
 8003f42:	4013      	ands	r3, r2
 8003f44:	b21b      	sxth	r3, r3
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	4b0f      	ldr	r3, [pc, #60]	@ (8003f88 <close+0xd0>)
 8003f4a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8003f8c <close+0xd4>)
 8003f50:	2100      	movs	r1, #0
 8003f52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	4a0d      	ldr	r2, [pc, #52]	@ (8003f90 <close+0xd8>)
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003f5e:	bf00      	nop
 8003f60:	79fb      	ldrb	r3, [r7, #7]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	3301      	adds	r3, #1
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fe8f 	bl	8004c90 <WIZCHIP_READ>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f3      	bne.n	8003f60 <close+0xa8>
	return SOCK_OK;
 8003f78:	2301      	movs	r3, #1
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200058ba 	.word	0x200058ba
 8003f88:	200058bc 	.word	0x200058bc
 8003f8c:	200058c0 	.word	0x200058c0
 8003f90:	200058d0 	.word	0x200058d0

08003f94 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	6039      	str	r1, [r7, #0]
 8003f9e:	71fb      	strb	r3, [r7, #7]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d902      	bls.n	8003fb0 <connect+0x1c>
 8003faa:	f04f 33ff 	mov.w	r3, #4294967295
 8003fae:	e0c6      	b.n	800413e <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003fb0:	79fb      	ldrb	r3, [r7, #7]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fe69 	bl	8004c90 <WIZCHIP_READ>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d002      	beq.n	8003fce <connect+0x3a>
 8003fc8:	f06f 0304 	mvn.w	r3, #4
 8003fcc:	e0b7      	b.n	800413e <connect+0x1aa>
   CHECK_SOCKINIT();
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fe58 	bl	8004c90 <WIZCHIP_READ>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b13      	cmp	r3, #19
 8003fe4:	d002      	beq.n	8003fec <connect+0x58>
 8003fe6:	f06f 0302 	mvn.w	r3, #2
 8003fea:	e0a8      	b.n	800413e <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	3201      	adds	r2, #1
 8003ffa:	7812      	ldrb	r2, [r2, #0]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	021b      	lsls	r3, r3, #8
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	3202      	adds	r2, #2
 8004008:	7812      	ldrb	r2, [r2, #0]
 800400a:	4413      	add	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	021b      	lsls	r3, r3, #8
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	3203      	adds	r2, #3
 8004016:	7812      	ldrb	r2, [r2, #0]
 8004018:	4413      	add	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004022:	d002      	beq.n	800402a <connect+0x96>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d102      	bne.n	8004030 <connect+0x9c>
 800402a:	f06f 030b 	mvn.w	r3, #11
 800402e:	e086      	b.n	800413e <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8004030:	88bb      	ldrh	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d102      	bne.n	800403c <connect+0xa8>
 8004036:	f06f 030a 	mvn.w	r3, #10
 800403a:	e080      	b.n	800413e <connect+0x1aa>
	setSn_DIPR(sn,addr);
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	3301      	adds	r3, #1
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004048:	2204      	movs	r2, #4
 800404a:	6839      	ldr	r1, [r7, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f000 ff19 	bl	8004e84 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	3301      	adds	r3, #1
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800405e:	461a      	mov	r2, r3
 8004060:	88bb      	ldrh	r3, [r7, #4]
 8004062:	0a1b      	lsrs	r3, r3, #8
 8004064:	b29b      	uxth	r3, r3
 8004066:	b2db      	uxtb	r3, r3
 8004068:	4619      	mov	r1, r3
 800406a:	4610      	mov	r0, r2
 800406c:	f000 fe5c 	bl	8004d28 <WIZCHIP_WRITE>
 8004070:	79fb      	ldrb	r3, [r7, #7]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	3301      	adds	r3, #1
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 800407c:	461a      	mov	r2, r3
 800407e:	88bb      	ldrh	r3, [r7, #4]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f000 fe4f 	bl	8004d28 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	3301      	adds	r3, #1
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004096:	2104      	movs	r1, #4
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fe45 	bl	8004d28 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800409e:	bf00      	nop
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	3301      	adds	r3, #1
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 fdef 	bl	8004c90 <WIZCHIP_READ>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f3      	bne.n	80040a0 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80040b8:	4b23      	ldr	r3, [pc, #140]	@ (8004148 <connect+0x1b4>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	fa42 f303 	asr.w	r3, r2, r3
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d02b      	beq.n	8004124 <connect+0x190>
 80040cc:	2300      	movs	r3, #0
 80040ce:	e036      	b.n	800413e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	3301      	adds	r3, #1
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fdd7 	bl	8004c90 <WIZCHIP_READ>
 80040e2:	4603      	mov	r3, r0
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00c      	beq.n	8004106 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	3301      	adds	r3, #1
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80040f8:	2108      	movs	r1, #8
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fe14 	bl	8004d28 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8004100:	f06f 030c 	mvn.w	r3, #12
 8004104:	e01b      	b.n	800413e <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	3301      	adds	r3, #1
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fdbc 	bl	8004c90 <WIZCHIP_READ>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d102      	bne.n	8004124 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 800411e:	f06f 0303 	mvn.w	r3, #3
 8004122:	e00c      	b.n	800413e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	3301      	adds	r3, #1
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fdad 	bl	8004c90 <WIZCHIP_READ>
 8004136:	4603      	mov	r3, r0
 8004138:	2b17      	cmp	r3, #23
 800413a:	d1c9      	bne.n	80040d0 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 800413c:	2301      	movs	r3, #1
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	200058ba 	.word	0x200058ba

0800414c <disconnect>:

int8_t disconnect(uint8_t sn)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d902      	bls.n	8004162 <disconnect+0x16>
 800415c:	f04f 33ff 	mov.w	r3, #4294967295
 8004160:	e062      	b.n	8004228 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	3301      	adds	r3, #1
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fd90 	bl	8004c90 <WIZCHIP_READ>
 8004170:	4603      	mov	r3, r0
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	2b01      	cmp	r3, #1
 8004178:	d002      	beq.n	8004180 <disconnect+0x34>
 800417a:	f06f 0304 	mvn.w	r3, #4
 800417e:	e053      	b.n	8004228 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	3301      	adds	r3, #1
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800418c:	2108      	movs	r1, #8
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fdca 	bl	8004d28 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004194:	bf00      	nop
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	3301      	adds	r3, #1
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fd74 	bl	8004c90 <WIZCHIP_READ>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f3      	bne.n	8004196 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	2201      	movs	r2, #1
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	b21b      	sxth	r3, r3
 80041b8:	43db      	mvns	r3, r3
 80041ba:	b21a      	sxth	r2, r3
 80041bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004230 <disconnect+0xe4>)
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	b21b      	sxth	r3, r3
 80041c2:	4013      	ands	r3, r2
 80041c4:	b21b      	sxth	r3, r3
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	4b19      	ldr	r3, [pc, #100]	@ (8004230 <disconnect+0xe4>)
 80041ca:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80041cc:	4b19      	ldr	r3, [pc, #100]	@ (8004234 <disconnect+0xe8>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	fa42 f303 	asr.w	r3, r2, r3
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d016      	beq.n	800420e <disconnect+0xc2>
 80041e0:	2300      	movs	r3, #0
 80041e2:	e021      	b.n	8004228 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	3301      	adds	r3, #1
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fd4d 	bl	8004c90 <WIZCHIP_READ>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d006      	beq.n	800420e <disconnect+0xc2>
	   {
	      close(sn);
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fe58 	bl	8003eb8 <close>
	      return SOCKERR_TIMEOUT;
 8004208:	f06f 030c 	mvn.w	r3, #12
 800420c:	e00c      	b.n	8004228 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	3301      	adds	r3, #1
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fd38 	bl	8004c90 <WIZCHIP_READ>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1de      	bne.n	80041e4 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8004226:	2301      	movs	r3, #1
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	200058bc 	.word	0x200058bc
 8004234:	200058ba 	.word	0x200058ba

08004238 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	4603      	mov	r3, r0
 8004240:	6039      	str	r1, [r7, #0]
 8004242:	71fb      	strb	r3, [r7, #7]
 8004244:	4613      	mov	r3, r2
 8004246:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8004248:	2300      	movs	r3, #0
 800424a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800424c:	2300      	movs	r3, #0
 800424e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004250:	79fb      	ldrb	r3, [r7, #7]
 8004252:	2b08      	cmp	r3, #8
 8004254:	d902      	bls.n	800425c <send+0x24>
 8004256:	f04f 33ff 	mov.w	r3, #4294967295
 800425a:	e0dd      	b.n	8004418 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	3301      	adds	r3, #1
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fd13 	bl	8004c90 <WIZCHIP_READ>
 800426a:	4603      	mov	r3, r0
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	2b01      	cmp	r3, #1
 8004272:	d002      	beq.n	800427a <send+0x42>
 8004274:	f06f 0304 	mvn.w	r3, #4
 8004278:	e0ce      	b.n	8004418 <send+0x1e0>
   CHECK_SOCKDATA();
 800427a:	88bb      	ldrh	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <send+0x4e>
 8004280:	f06f 030d 	mvn.w	r3, #13
 8004284:	e0c8      	b.n	8004418 <send+0x1e0>
   tmp = getSn_SR(sn);
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	3301      	adds	r3, #1
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fcfc 	bl	8004c90 <WIZCHIP_READ>
 8004298:	4603      	mov	r3, r0
 800429a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b17      	cmp	r3, #23
 80042a0:	d005      	beq.n	80042ae <send+0x76>
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	2b1c      	cmp	r3, #28
 80042a6:	d002      	beq.n	80042ae <send+0x76>
 80042a8:	f06f 0306 	mvn.w	r3, #6
 80042ac:	e0b4      	b.n	8004418 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 80042ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004420 <send+0x1e8>)
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	fa42 f303 	asr.w	r3, r2, r3
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d039      	beq.n	8004336 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	3301      	adds	r3, #1
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fcde 	bl	8004c90 <WIZCHIP_READ>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d019      	beq.n	800431a <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	3301      	adds	r3, #1
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80042f2:	2110      	movs	r1, #16
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fd17 	bl	8004d28 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	2201      	movs	r2, #1
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	b21b      	sxth	r3, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	b21a      	sxth	r2, r3
 8004308:	4b45      	ldr	r3, [pc, #276]	@ (8004420 <send+0x1e8>)
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b21b      	sxth	r3, r3
 800430e:	4013      	ands	r3, r2
 8004310:	b21b      	sxth	r3, r3
 8004312:	b29a      	uxth	r2, r3
 8004314:	4b42      	ldr	r3, [pc, #264]	@ (8004420 <send+0x1e8>)
 8004316:	801a      	strh	r2, [r3, #0]
 8004318:	e00d      	b.n	8004336 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d006      	beq.n	8004332 <send+0xfa>
      {
         close(sn);
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff fdc6 	bl	8003eb8 <close>
         return SOCKERR_TIMEOUT;
 800432c:	f06f 030c 	mvn.w	r3, #12
 8004330:	e072      	b.n	8004418 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8004332:	2300      	movs	r3, #0
 8004334:	e070      	b.n	8004418 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	3301      	adds	r3, #1
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fca4 	bl	8004c90 <WIZCHIP_READ>
 8004348:	4603      	mov	r3, r0
 800434a:	029b      	lsls	r3, r3, #10
 800434c:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800434e:	88ba      	ldrh	r2, [r7, #4]
 8004350:	89bb      	ldrh	r3, [r7, #12]
 8004352:	429a      	cmp	r2, r3
 8004354:	d901      	bls.n	800435a <send+0x122>
 8004356:	89bb      	ldrh	r3, [r7, #12]
 8004358:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fdf1 	bl	8004f44 <getSn_TX_FSR>
 8004362:	4603      	mov	r3, r0
 8004364:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	3301      	adds	r3, #1
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fc8c 	bl	8004c90 <WIZCHIP_READ>
 8004378:	4603      	mov	r3, r0
 800437a:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b17      	cmp	r3, #23
 8004380:	d009      	beq.n	8004396 <send+0x15e>
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	2b1c      	cmp	r3, #28
 8004386:	d006      	beq.n	8004396 <send+0x15e>
      {
         close(sn);
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fd94 	bl	8003eb8 <close>
         return SOCKERR_SOCKSTATUS;
 8004390:	f06f 0306 	mvn.w	r3, #6
 8004394:	e040      	b.n	8004418 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8004396:	4b23      	ldr	r3, [pc, #140]	@ (8004424 <send+0x1ec>)
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	79fb      	ldrb	r3, [r7, #7]
 800439e:	fa42 f303 	asr.w	r3, r2, r3
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <send+0x17e>
 80043aa:	88ba      	ldrh	r2, [r7, #4]
 80043ac:	89bb      	ldrh	r3, [r7, #12]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d901      	bls.n	80043b6 <send+0x17e>
 80043b2:	2300      	movs	r3, #0
 80043b4:	e030      	b.n	8004418 <send+0x1e0>
      if(len <= freesize) break;
 80043b6:	88ba      	ldrh	r2, [r7, #4]
 80043b8:	89bb      	ldrh	r3, [r7, #12]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d900      	bls.n	80043c0 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 80043be:	e7cc      	b.n	800435a <send+0x122>
      if(len <= freesize) break;
 80043c0:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80043c2:	88ba      	ldrh	r2, [r7, #4]
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	6839      	ldr	r1, [r7, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fe4d 	bl	8005068 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80043ce:	79fb      	ldrb	r3, [r7, #7]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	3301      	adds	r3, #1
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80043da:	2120      	movs	r1, #32
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fca3 	bl	8004d28 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80043e2:	bf00      	nop
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	3301      	adds	r3, #1
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fc4d 	bl	8004c90 <WIZCHIP_READ>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f3      	bne.n	80043e4 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	2201      	movs	r2, #1
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	b21a      	sxth	r2, r3
 8004406:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <send+0x1e8>)
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b21b      	sxth	r3, r3
 800440c:	4313      	orrs	r3, r2
 800440e:	b21b      	sxth	r3, r3
 8004410:	b29a      	uxth	r2, r3
 8004412:	4b03      	ldr	r3, [pc, #12]	@ (8004420 <send+0x1e8>)
 8004414:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004416:	88bb      	ldrh	r3, [r7, #4]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	200058bc 	.word	0x200058bc
 8004424:	200058ba 	.word	0x200058ba

08004428 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	4603      	mov	r3, r0
 8004434:	73fb      	strb	r3, [r7, #15]
 8004436:	4613      	mov	r3, r2
 8004438:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800443e:	2300      	movs	r3, #0
 8004440:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	2b08      	cmp	r3, #8
 8004446:	d902      	bls.n	800444e <sendto+0x26>
 8004448:	f04f 33ff 	mov.w	r3, #4294967295
 800444c:	e11a      	b.n	8004684 <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	3301      	adds	r3, #1
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4618      	mov	r0, r3
 8004458:	f000 fc1a 	bl	8004c90 <WIZCHIP_READ>
 800445c:	4603      	mov	r3, r0
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	3b02      	subs	r3, #2
 8004464:	2b02      	cmp	r3, #2
 8004466:	d902      	bls.n	800446e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004468:	f06f 0304 	mvn.w	r3, #4
 800446c:	e10a      	b.n	8004684 <sendto+0x25c>
         break;
 800446e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004470:	89bb      	ldrh	r3, [r7, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <sendto+0x54>
 8004476:	f06f 030d 	mvn.w	r3, #13
 800447a:	e103      	b.n	8004684 <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	3201      	adds	r2, #1
 800448a:	7812      	ldrb	r2, [r2, #0]
 800448c:	4413      	add	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	3202      	adds	r2, #2
 8004498:	7812      	ldrb	r2, [r2, #0]
 800449a:	4413      	add	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	3203      	adds	r2, #3
 80044a6:	7812      	ldrb	r2, [r2, #0]
 80044a8:	4413      	add	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10e      	bne.n	80044d0 <sendto+0xa8>
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	3301      	adds	r3, #1
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fbe8 	bl	8004c90 <WIZCHIP_READ>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d002      	beq.n	80044d0 <sendto+0xa8>
 80044ca:	f06f 030b 	mvn.w	r3, #11
 80044ce:	e0d9      	b.n	8004684 <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80044d0:	8c3b      	ldrh	r3, [r7, #32]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10e      	bne.n	80044f4 <sendto+0xcc>
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	3301      	adds	r3, #1
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fbd6 	bl	8004c90 <WIZCHIP_READ>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d002      	beq.n	80044f4 <sendto+0xcc>
 80044ee:	f06f 030a 	mvn.w	r3, #10
 80044f2:	e0c7      	b.n	8004684 <sendto+0x25c>
   tmp = getSn_SR(sn);
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	3301      	adds	r3, #1
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fbc5 	bl	8004c90 <WIZCHIP_READ>
 8004506:	4603      	mov	r3, r0
 8004508:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800450a:	7dfb      	ldrb	r3, [r7, #23]
 800450c:	2b42      	cmp	r3, #66	@ 0x42
 800450e:	d008      	beq.n	8004522 <sendto+0xfa>
 8004510:	7dfb      	ldrb	r3, [r7, #23]
 8004512:	2b22      	cmp	r3, #34	@ 0x22
 8004514:	d005      	beq.n	8004522 <sendto+0xfa>
 8004516:	7dfb      	ldrb	r3, [r7, #23]
 8004518:	2b32      	cmp	r3, #50	@ 0x32
 800451a:	d002      	beq.n	8004522 <sendto+0xfa>
 800451c:	f06f 0306 	mvn.w	r3, #6
 8004520:	e0b0      	b.n	8004684 <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	3301      	adds	r3, #1
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800452e:	2204      	movs	r2, #4
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4618      	mov	r0, r3
 8004534:	f000 fca6 	bl	8004e84 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	3301      	adds	r3, #1
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004544:	461a      	mov	r2, r3
 8004546:	8c3b      	ldrh	r3, [r7, #32]
 8004548:	0a1b      	lsrs	r3, r3, #8
 800454a:	b29b      	uxth	r3, r3
 800454c:	b2db      	uxtb	r3, r3
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f000 fbe9 	bl	8004d28 <WIZCHIP_WRITE>
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	3301      	adds	r3, #1
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8004562:	461a      	mov	r2, r3
 8004564:	8c3b      	ldrh	r3, [r7, #32]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	4619      	mov	r1, r3
 800456a:	4610      	mov	r0, r2
 800456c:	f000 fbdc 	bl	8004d28 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	3301      	adds	r3, #1
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fb87 	bl	8004c90 <WIZCHIP_READ>
 8004582:	4603      	mov	r3, r0
 8004584:	029b      	lsls	r3, r3, #10
 8004586:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004588:	89ba      	ldrh	r2, [r7, #12]
 800458a:	8abb      	ldrh	r3, [r7, #20]
 800458c:	429a      	cmp	r2, r3
 800458e:	d901      	bls.n	8004594 <sendto+0x16c>
 8004590:	8abb      	ldrh	r3, [r7, #20]
 8004592:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004594:	7bfb      	ldrb	r3, [r7, #15]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fcd4 	bl	8004f44 <getSn_TX_FSR>
 800459c:	4603      	mov	r3, r0
 800459e:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	3301      	adds	r3, #1
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fb6f 	bl	8004c90 <WIZCHIP_READ>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <sendto+0x196>
 80045b8:	f06f 0303 	mvn.w	r3, #3
 80045bc:	e062      	b.n	8004684 <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80045be:	4b33      	ldr	r3, [pc, #204]	@ (800468c <sendto+0x264>)
 80045c0:	881b      	ldrh	r3, [r3, #0]
 80045c2:	461a      	mov	r2, r3
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	fa42 f303 	asr.w	r3, r2, r3
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d005      	beq.n	80045de <sendto+0x1b6>
 80045d2:	89ba      	ldrh	r2, [r7, #12]
 80045d4:	8abb      	ldrh	r3, [r7, #20]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d901      	bls.n	80045de <sendto+0x1b6>
 80045da:	2300      	movs	r3, #0
 80045dc:	e052      	b.n	8004684 <sendto+0x25c>
      if(len <= freesize) break;
 80045de:	89ba      	ldrh	r2, [r7, #12]
 80045e0:	8abb      	ldrh	r3, [r7, #20]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d900      	bls.n	80045e8 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 80045e6:	e7d5      	b.n	8004594 <sendto+0x16c>
      if(len <= freesize) break;
 80045e8:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80045ea:	89ba      	ldrh	r2, [r7, #12]
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fd39 	bl	8005068 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	3301      	adds	r3, #1
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004602:	2120      	movs	r1, #32
 8004604:	4618      	mov	r0, r3
 8004606:	f000 fb8f 	bl	8004d28 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 800460a:	bf00      	nop
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	3301      	adds	r3, #1
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fb39 	bl	8004c90 <WIZCHIP_READ>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f3      	bne.n	800460c <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	3301      	adds	r3, #1
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fb2d 	bl	8004c90 <WIZCHIP_READ>
 8004636:	4603      	mov	r3, r0
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800463e:	7dfb      	ldrb	r3, [r7, #23]
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00c      	beq.n	8004662 <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	3301      	adds	r3, #1
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004654:	2110      	movs	r1, #16
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fb66 	bl	8004d28 <WIZCHIP_WRITE>
         break;
 800465c:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800465e:	89bb      	ldrh	r3, [r7, #12]
 8004660:	e010      	b.n	8004684 <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 8004662:	7dfb      	ldrb	r3, [r7, #23]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0db      	beq.n	8004624 <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	3301      	adds	r3, #1
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004678:	2108      	movs	r1, #8
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fb54 	bl	8004d28 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8004680:	f06f 030c 	mvn.w	r3, #12
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	200058ba 	.word	0x200058ba

08004690 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	4603      	mov	r3, r0
 800469c:	73fb      	strb	r3, [r7, #15]
 800469e:	4613      	mov	r3, r2
 80046a0:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
 80046a8:	2b08      	cmp	r3, #8
 80046aa:	d902      	bls.n	80046b2 <recvfrom+0x22>
 80046ac:	f04f 33ff 	mov.w	r3, #4294967295
 80046b0:	e1d2      	b.n	8004a58 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	3301      	adds	r3, #1
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fae8 	bl	8004c90 <WIZCHIP_READ>
 80046c0:	4603      	mov	r3, r0
 80046c2:	777b      	strb	r3, [r7, #29]
 80046c4:	7f7b      	ldrb	r3, [r7, #29]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	3b02      	subs	r3, #2
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d902      	bls.n	80046d6 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80046d0:	f06f 0304 	mvn.w	r3, #4
 80046d4:	e1c0      	b.n	8004a58 <recvfrom+0x3c8>
         break;
 80046d6:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80046d8:	89bb      	ldrh	r3, [r7, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <recvfrom+0x54>
 80046de:	f06f 030d 	mvn.w	r3, #13
 80046e2:	e1b9      	b.n	8004a58 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	4a87      	ldr	r2, [pc, #540]	@ (8004904 <recvfrom+0x274>)
 80046e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d128      	bne.n	8004742 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fc6f 	bl	8004fd6 <getSn_RX_RSR>
 80046f8:	4603      	mov	r3, r0
 80046fa:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	3301      	adds	r3, #1
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fac1 	bl	8004c90 <WIZCHIP_READ>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <recvfrom+0x8a>
 8004714:	f06f 0303 	mvn.w	r3, #3
 8004718:	e19e      	b.n	8004a58 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800471a:	4b7b      	ldr	r3, [pc, #492]	@ (8004908 <recvfrom+0x278>)
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	fa42 f303 	asr.w	r3, r2, r3
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <recvfrom+0xa8>
 800472e:	8bfb      	ldrh	r3, [r7, #30]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <recvfrom+0xa8>
 8004734:	2300      	movs	r3, #0
 8004736:	e18f      	b.n	8004a58 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8004738:	8bfb      	ldrh	r3, [r7, #30]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d100      	bne.n	8004740 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800473e:	e7d7      	b.n	80046f0 <recvfrom+0x60>
         if(pack_len != 0) break;
 8004740:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8004742:	7f7b      	ldrb	r3, [r7, #29]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	2b04      	cmp	r3, #4
 800474a:	d078      	beq.n	800483e <recvfrom+0x1ae>
 800474c:	2b04      	cmp	r3, #4
 800474e:	f300 8140 	bgt.w	80049d2 <recvfrom+0x342>
 8004752:	2b02      	cmp	r3, #2
 8004754:	d003      	beq.n	800475e <recvfrom+0xce>
 8004756:	2b03      	cmp	r3, #3
 8004758:	f000 80da 	beq.w	8004910 <recvfrom+0x280>
 800475c:	e139      	b.n	80049d2 <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	4a68      	ldr	r2, [pc, #416]	@ (8004904 <recvfrom+0x274>)
 8004762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d151      	bne.n	800480e <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 800476a:	f107 0114 	add.w	r1, r7, #20
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	2208      	movs	r2, #8
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fcd2 	bl	800511c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	3301      	adds	r3, #1
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004784:	2140      	movs	r1, #64	@ 0x40
 8004786:	4618      	mov	r0, r3
 8004788:	f000 face 	bl	8004d28 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800478c:	bf00      	nop
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	3301      	adds	r3, #1
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fa78 	bl	8004c90 <WIZCHIP_READ>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f3      	bne.n	800478e <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80047a6:	7d3a      	ldrb	r2, [r7, #20]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3301      	adds	r3, #1
 80047b0:	7d7a      	ldrb	r2, [r7, #21]
 80047b2:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3302      	adds	r3, #2
 80047b8:	7dba      	ldrb	r2, [r7, #22]
 80047ba:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3303      	adds	r3, #3
 80047c0:	7dfa      	ldrb	r2, [r7, #23]
 80047c2:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80047c4:	7e3b      	ldrb	r3, [r7, #24]
 80047c6:	461a      	mov	r2, r3
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80047cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	021b      	lsls	r3, r3, #8
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	7e7a      	ldrb	r2, [r7, #25]
 80047d6:	4413      	add	r3, r2
 80047d8:	b29a      	uxth	r2, r3
 80047da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047dc:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80047de:	7eba      	ldrb	r2, [r7, #26]
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	4611      	mov	r1, r2
 80047e4:	4a47      	ldr	r2, [pc, #284]	@ (8004904 <recvfrom+0x274>)
 80047e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
 80047ec:	4a45      	ldr	r2, [pc, #276]	@ (8004904 <recvfrom+0x274>)
 80047ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	7efb      	ldrb	r3, [r7, #27]
 80047f8:	4619      	mov	r1, r3
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	440a      	add	r2, r1
 80047fe:	b291      	uxth	r1, r2
 8004800:	4a40      	ldr	r2, [pc, #256]	@ (8004904 <recvfrom+0x274>)
 8004802:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	4a40      	ldr	r2, [pc, #256]	@ (800490c <recvfrom+0x27c>)
 800480a:	2180      	movs	r1, #128	@ 0x80
 800480c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	4a3c      	ldr	r2, [pc, #240]	@ (8004904 <recvfrom+0x274>)
 8004812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004816:	89ba      	ldrh	r2, [r7, #12]
 8004818:	429a      	cmp	r2, r3
 800481a:	d202      	bcs.n	8004822 <recvfrom+0x192>
 800481c:	89bb      	ldrh	r3, [r7, #12]
 800481e:	83fb      	strh	r3, [r7, #30]
 8004820:	e004      	b.n	800482c <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	4a37      	ldr	r2, [pc, #220]	@ (8004904 <recvfrom+0x274>)
 8004826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800482a:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800482c:	8bfb      	ldrh	r3, [r7, #30]
 800482e:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004830:	8bfa      	ldrh	r2, [r7, #30]
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fc70 	bl	800511c <wiz_recv_data>
			break;
 800483c:	e0d5      	b.n	80049ea <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	4a30      	ldr	r2, [pc, #192]	@ (8004904 <recvfrom+0x274>)
 8004842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d145      	bne.n	80048d6 <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 800484a:	f107 0114 	add.w	r1, r7, #20
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	2202      	movs	r2, #2
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fc62 	bl	800511c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	3301      	adds	r3, #1
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004864:	2140      	movs	r1, #64	@ 0x40
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fa5e 	bl	8004d28 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800486c:	bf00      	nop
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	3301      	adds	r3, #1
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fa08 	bl	8004c90 <WIZCHIP_READ>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f3      	bne.n	800486e <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8004886:	7d3a      	ldrb	r2, [r7, #20]
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	4611      	mov	r1, r2
 800488c:	4a1d      	ldr	r2, [pc, #116]	@ (8004904 <recvfrom+0x274>)
 800488e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	4a1b      	ldr	r2, [pc, #108]	@ (8004904 <recvfrom+0x274>)
 8004896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	b29b      	uxth	r3, r3
 800489e:	7d7a      	ldrb	r2, [r7, #21]
 80048a0:	4413      	add	r3, r2
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	3a02      	subs	r2, #2
 80048a8:	b291      	uxth	r1, r2
 80048aa:	4a16      	ldr	r2, [pc, #88]	@ (8004904 <recvfrom+0x274>)
 80048ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	4a14      	ldr	r2, [pc, #80]	@ (8004904 <recvfrom+0x274>)
 80048b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b8:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 80048bc:	4293      	cmp	r3, r2
 80048be:	d906      	bls.n	80048ce <recvfrom+0x23e>
   			{
   			   close(sn);
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff faf8 	bl	8003eb8 <close>
   			   return SOCKFATAL_PACKLEN;
 80048c8:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 80048cc:	e0c4      	b.n	8004a58 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	4a0e      	ldr	r2, [pc, #56]	@ (800490c <recvfrom+0x27c>)
 80048d2:	2180      	movs	r1, #128	@ 0x80
 80048d4:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
 80048d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004904 <recvfrom+0x274>)
 80048da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048de:	89ba      	ldrh	r2, [r7, #12]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d202      	bcs.n	80048ea <recvfrom+0x25a>
 80048e4:	89bb      	ldrh	r3, [r7, #12]
 80048e6:	83fb      	strh	r3, [r7, #30]
 80048e8:	e004      	b.n	80048f4 <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
 80048ec:	4a05      	ldr	r2, [pc, #20]	@ (8004904 <recvfrom+0x274>)
 80048ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048f2:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80048f4:	8bfa      	ldrh	r2, [r7, #30]
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fc0e 	bl	800511c <wiz_recv_data>
		   break;
 8004900:	e073      	b.n	80049ea <recvfrom+0x35a>
 8004902:	bf00      	nop
 8004904:	200058c0 	.word	0x200058c0
 8004908:	200058ba 	.word	0x200058ba
 800490c:	200058d0 	.word	0x200058d0
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	4a53      	ldr	r2, [pc, #332]	@ (8004a60 <recvfrom+0x3d0>)
 8004914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d144      	bne.n	80049a6 <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 800491c:	f107 0114 	add.w	r1, r7, #20
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2206      	movs	r2, #6
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fbf9 	bl	800511c <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800492a:	7bfb      	ldrb	r3, [r7, #15]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	3301      	adds	r3, #1
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004936:	2140      	movs	r1, #64	@ 0x40
 8004938:	4618      	mov	r0, r3
 800493a:	f000 f9f5 	bl	8004d28 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800493e:	bf00      	nop
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	3301      	adds	r3, #1
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800494c:	4618      	mov	r0, r3
 800494e:	f000 f99f 	bl	8004c90 <WIZCHIP_READ>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1f3      	bne.n	8004940 <recvfrom+0x2b0>
   			addr[0] = head[0];
 8004958:	7d3a      	ldrb	r2, [r7, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3301      	adds	r3, #1
 8004962:	7d7a      	ldrb	r2, [r7, #21]
 8004964:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3302      	adds	r3, #2
 800496a:	7dba      	ldrb	r2, [r7, #22]
 800496c:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3303      	adds	r3, #3
 8004972:	7dfa      	ldrb	r2, [r7, #23]
 8004974:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8004976:	7e3a      	ldrb	r2, [r7, #24]
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	4611      	mov	r1, r2
 800497c:	4a38      	ldr	r2, [pc, #224]	@ (8004a60 <recvfrom+0x3d0>)
 800497e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	4a36      	ldr	r2, [pc, #216]	@ (8004a60 <recvfrom+0x3d0>)
 8004986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	b29a      	uxth	r2, r3
 800498e:	7e7b      	ldrb	r3, [r7, #25]
 8004990:	4619      	mov	r1, r3
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	440a      	add	r2, r1
 8004996:	b291      	uxth	r1, r2
 8004998:	4a31      	ldr	r2, [pc, #196]	@ (8004a60 <recvfrom+0x3d0>)
 800499a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	4a30      	ldr	r2, [pc, #192]	@ (8004a64 <recvfrom+0x3d4>)
 80049a2:	2180      	movs	r1, #128	@ 0x80
 80049a4:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	4a2d      	ldr	r2, [pc, #180]	@ (8004a60 <recvfrom+0x3d0>)
 80049aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ae:	89ba      	ldrh	r2, [r7, #12]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d202      	bcs.n	80049ba <recvfrom+0x32a>
 80049b4:	89bb      	ldrh	r3, [r7, #12]
 80049b6:	83fb      	strh	r3, [r7, #30]
 80049b8:	e004      	b.n	80049c4 <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	4a28      	ldr	r2, [pc, #160]	@ (8004a60 <recvfrom+0x3d0>)
 80049be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049c2:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80049c4:	8bfa      	ldrh	r2, [r7, #30]
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fba6 	bl	800511c <wiz_recv_data>
			break;
 80049d0:	e00b      	b.n	80049ea <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80049d2:	8bfa      	ldrh	r2, [r7, #30]
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	4611      	mov	r1, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fbf9 	bl	80051d0 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	491f      	ldr	r1, [pc, #124]	@ (8004a60 <recvfrom+0x3d0>)
 80049e2:	8bfa      	ldrh	r2, [r7, #30]
 80049e4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80049e8:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	3301      	adds	r3, #1
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049f6:	2140      	movs	r1, #64	@ 0x40
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 f995 	bl	8004d28 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80049fe:	bf00      	nop
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	3301      	adds	r3, #1
 8004a06:	00db      	lsls	r3, r3, #3
 8004a08:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f93f 	bl	8004c90 <WIZCHIP_READ>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f3      	bne.n	8004a00 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	4a11      	ldr	r2, [pc, #68]	@ (8004a60 <recvfrom+0x3d0>)
 8004a1c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	8bfa      	ldrh	r2, [r7, #30]
 8004a24:	1a8a      	subs	r2, r1, r2
 8004a26:	b291      	uxth	r1, r2
 8004a28:	4a0d      	ldr	r2, [pc, #52]	@ (8004a60 <recvfrom+0x3d0>)
 8004a2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	4a0b      	ldr	r2, [pc, #44]	@ (8004a60 <recvfrom+0x3d0>)
 8004a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d009      	beq.n	8004a4e <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	4a09      	ldr	r2, [pc, #36]	@ (8004a64 <recvfrom+0x3d4>)
 8004a3e:	5cd2      	ldrb	r2, [r2, r3]
 8004a40:	7bfb      	ldrb	r3, [r7, #15]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	b2d1      	uxtb	r1, r2
 8004a48:	4a06      	ldr	r2, [pc, #24]	@ (8004a64 <recvfrom+0x3d4>)
 8004a4a:	54d1      	strb	r1, [r2, r3]
 8004a4c:	e003      	b.n	8004a56 <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	4a04      	ldr	r2, [pc, #16]	@ (8004a64 <recvfrom+0x3d4>)
 8004a52:	2100      	movs	r1, #0
 8004a54:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8004a56:	8bfb      	ldrh	r3, [r7, #30]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	200058c0 	.word	0x200058c0
 8004a64:	200058d0 	.word	0x200058d0

08004a68 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8004a68:	b590      	push	{r4, r7, lr}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	603a      	str	r2, [r7, #0]
 8004a72:	71fb      	strb	r3, [r7, #7]
 8004a74:	460b      	mov	r3, r1
 8004a76:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d902      	bls.n	8004a84 <getsockopt+0x1c>
 8004a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a82:	e0fd      	b.n	8004c80 <getsockopt+0x218>
   switch(sotype)
 8004a84:	79bb      	ldrb	r3, [r7, #6]
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	f200 80f6 	bhi.w	8004c78 <getsockopt+0x210>
 8004a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a94 <getsockopt+0x2c>)
 8004a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a92:	bf00      	nop
 8004a94:	08004ac9 	.word	0x08004ac9
 8004a98:	08004ae5 	.word	0x08004ae5
 8004a9c:	08004b01 	.word	0x08004b01
 8004aa0:	08004b1d 	.word	0x08004b1d
 8004aa4:	08004b53 	.word	0x08004b53
 8004aa8:	08004b6b 	.word	0x08004b6b
 8004aac:	08004c79 	.word	0x08004c79
 8004ab0:	08004ba1 	.word	0x08004ba1
 8004ab4:	08004bdb 	.word	0x08004bdb
 8004ab8:	08004bed 	.word	0x08004bed
 8004abc:	08004bff 	.word	0x08004bff
 8004ac0:	08004c1b 	.word	0x08004c1b
 8004ac4:	08004c53 	.word	0x08004c53
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	3301      	adds	r3, #1
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 f8dd 	bl	8004c90 <WIZCHIP_READ>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f023 030f 	bic.w	r3, r3, #15
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	701a      	strb	r2, [r3, #0]
         break;
 8004ae2:	e0cc      	b.n	8004c7e <getsockopt+0x216>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	3301      	adds	r3, #1
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	f503 53b0 	add.w	r3, r3, #5632	@ 0x1600
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 f8cd 	bl	8004c90 <WIZCHIP_READ>
 8004af6:	4603      	mov	r3, r0
 8004af8:	461a      	mov	r2, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	701a      	strb	r2, [r3, #0]
         break;
 8004afe:	e0be      	b.n	8004c7e <getsockopt+0x216>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 8004b00:	79fb      	ldrb	r3, [r7, #7]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	3301      	adds	r3, #1
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	f503 53a8 	add.w	r3, r3, #5376	@ 0x1500
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 f8bf 	bl	8004c90 <WIZCHIP_READ>
 8004b12:	4603      	mov	r3, r0
 8004b14:	461a      	mov	r2, r3
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	701a      	strb	r2, [r3, #0]
         break;
 8004b1a:	e0b0      	b.n	8004c7e <getsockopt+0x216>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 8004b1c:	79fb      	ldrb	r3, [r7, #7]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	3301      	adds	r3, #1
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	f503 5390 	add.w	r3, r3, #4608	@ 0x1200
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 f8b1 	bl	8004c90 <WIZCHIP_READ>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	b29c      	uxth	r4, r3
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	3301      	adds	r3, #1
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	f503 5398 	add.w	r3, r3, #4864	@ 0x1300
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 f8a5 	bl	8004c90 <WIZCHIP_READ>
 8004b46:	4603      	mov	r3, r0
 8004b48:	4423      	add	r3, r4
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	801a      	strh	r2, [r3, #0]
         break;
 8004b50:	e095      	b.n	8004c7e <getsockopt+0x216>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	3301      	adds	r3, #1
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8004b5e:	2204      	movs	r2, #4
 8004b60:	6839      	ldr	r1, [r7, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 f92e 	bl	8004dc4 <WIZCHIP_READ_BUF>
         break;
 8004b68:	e089      	b.n	8004c7e <getsockopt+0x216>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	3301      	adds	r3, #1
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 f88a 	bl	8004c90 <WIZCHIP_READ>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	b29c      	uxth	r4, r3
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	3301      	adds	r3, #1
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f87e 	bl	8004c90 <WIZCHIP_READ>
 8004b94:	4603      	mov	r3, r0
 8004b96:	4423      	add	r3, r4
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	801a      	strh	r2, [r3, #0]
         break;
 8004b9e:	e06e      	b.n	8004c7e <getsockopt+0x216>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 8004ba0:	79fb      	ldrb	r3, [r7, #7]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 f871 	bl	8004c90 <WIZCHIP_READ>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d002      	beq.n	8004bbe <getsockopt+0x156>
 8004bb8:	f06f 0304 	mvn.w	r3, #4
 8004bbc:	e060      	b.n	8004c80 <getsockopt+0x218>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 8004bbe:	79fb      	ldrb	r3, [r7, #7]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	f503 533c 	add.w	r3, r3, #12032	@ 0x2f00
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 f860 	bl	8004c90 <WIZCHIP_READ>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	801a      	strh	r2, [r3, #0]
         break;
 8004bd8:	e051      	b.n	8004c7e <getsockopt+0x216>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 8004bda:	79fb      	ldrb	r3, [r7, #7]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f9b1 	bl	8004f44 <getSn_TX_FSR>
 8004be2:	4603      	mov	r3, r0
 8004be4:	461a      	mov	r2, r3
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	801a      	strh	r2, [r3, #0]
         break;
 8004bea:	e048      	b.n	8004c7e <getsockopt+0x216>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f9f1 	bl	8004fd6 <getSn_RX_RSR>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	801a      	strh	r2, [r3, #0]
         break;
 8004bfc:	e03f      	b.n	8004c7e <getsockopt+0x216>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	3301      	adds	r3, #1
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 f840 	bl	8004c90 <WIZCHIP_READ>
 8004c10:	4603      	mov	r3, r0
 8004c12:	461a      	mov	r2, r3
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	701a      	strb	r2, [r3, #0]
         break;
 8004c18:	e031      	b.n	8004c7e <getsockopt+0x216>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	3301      	adds	r3, #1
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f834 	bl	8004c90 <WIZCHIP_READ>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d008      	beq.n	8004c44 <getsockopt+0x1dc>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 f9ce 	bl	8004fd6 <getSn_RX_RSR>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 8004c42:	e01c      	b.n	8004c7e <getsockopt+0x216>
            *(uint16_t*)arg = sock_remained_size[sn];
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	4a10      	ldr	r2, [pc, #64]	@ (8004c88 <getsockopt+0x220>)
 8004c48:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	801a      	strh	r2, [r3, #0]
         break;
 8004c50:	e015      	b.n	8004c7e <getsockopt+0x216>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	3301      	adds	r3, #1
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 f818 	bl	8004c90 <WIZCHIP_READ>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d102      	bne.n	8004c6c <getsockopt+0x204>
             return SOCKERR_SOCKMODE;
 8004c66:	f06f 0304 	mvn.w	r3, #4
 8004c6a:	e009      	b.n	8004c80 <getsockopt+0x218>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	4a07      	ldr	r2, [pc, #28]	@ (8004c8c <getsockopt+0x224>)
 8004c70:	5cd2      	ldrb	r2, [r2, r3]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	701a      	strb	r2, [r3, #0]
         break;
 8004c76:	e002      	b.n	8004c7e <getsockopt+0x216>
      default:
         return SOCKERR_SOCKOPT;
 8004c78:	f06f 0301 	mvn.w	r3, #1
 8004c7c:	e000      	b.n	8004c80 <getsockopt+0x218>
   }
   return SOCK_OK;
 8004c7e:	2301      	movs	r3, #1
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd90      	pop	{r4, r7, pc}
 8004c88:	200058c0 	.word	0x200058c0
 8004c8c:	200058d0 	.word	0x200058d0

08004c90 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8004c98:	4b22      	ldr	r3, [pc, #136]	@ (8004d24 <WIZCHIP_READ+0x94>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004c9e:	4b21      	ldr	r3, [pc, #132]	@ (8004d24 <WIZCHIP_READ+0x94>)
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8004d24 <WIZCHIP_READ+0x94>)
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <WIZCHIP_READ+0x24>
 8004cac:	4b1d      	ldr	r3, [pc, #116]	@ (8004d24 <WIZCHIP_READ+0x94>)
 8004cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d114      	bne.n	8004cde <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004cb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d24 <WIZCHIP_READ+0x94>)
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	0c12      	lsrs	r2, r2, #16
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004cc2:	4b18      	ldr	r3, [pc, #96]	@ (8004d24 <WIZCHIP_READ+0x94>)
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	0a12      	lsrs	r2, r2, #8
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004cd0:	4b14      	ldr	r3, [pc, #80]	@ (8004d24 <WIZCHIP_READ+0x94>)
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4798      	blx	r3
 8004cdc:	e011      	b.n	8004d02 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0c1b      	lsrs	r3, r3, #16
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	0a1b      	lsrs	r3, r3, #8
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8004d24 <WIZCHIP_READ+0x94>)
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf8:	f107 020c 	add.w	r2, r7, #12
 8004cfc:	2103      	movs	r1, #3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8004d02:	4b08      	ldr	r3, [pc, #32]	@ (8004d24 <WIZCHIP_READ+0x94>)
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	4798      	blx	r3
 8004d08:	4603      	mov	r3, r0
 8004d0a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8004d0c:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <WIZCHIP_READ+0x94>)
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004d12:	4b04      	ldr	r3, [pc, #16]	@ (8004d24 <WIZCHIP_READ+0x94>)
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	4798      	blx	r3
   return ret;
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000058 	.word	0x20000058

08004d28 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004d34:	4b22      	ldr	r3, [pc, #136]	@ (8004dc0 <WIZCHIP_WRITE+0x98>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004d3a:	4b21      	ldr	r3, [pc, #132]	@ (8004dc0 <WIZCHIP_WRITE+0x98>)
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f043 0304 	orr.w	r3, r3, #4
 8004d46:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004d48:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc0 <WIZCHIP_WRITE+0x98>)
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d119      	bne.n	8004d84 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004d50:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc0 <WIZCHIP_WRITE+0x98>)
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	0c12      	lsrs	r2, r2, #16
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004d5e:	4b18      	ldr	r3, [pc, #96]	@ (8004dc0 <WIZCHIP_WRITE+0x98>)
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	0a12      	lsrs	r2, r2, #8
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	4610      	mov	r0, r2
 8004d6a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004d6c:	4b14      	ldr	r3, [pc, #80]	@ (8004dc0 <WIZCHIP_WRITE+0x98>)
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	4610      	mov	r0, r2
 8004d76:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8004d78:	4b11      	ldr	r3, [pc, #68]	@ (8004dc0 <WIZCHIP_WRITE+0x98>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	78fa      	ldrb	r2, [r7, #3]
 8004d7e:	4610      	mov	r0, r2
 8004d80:	4798      	blx	r3
 8004d82:	e013      	b.n	8004dac <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	0c1b      	lsrs	r3, r3, #16
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	0a1b      	lsrs	r3, r3, #8
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8004d9e:	4b08      	ldr	r3, [pc, #32]	@ (8004dc0 <WIZCHIP_WRITE+0x98>)
 8004da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da2:	f107 020c 	add.w	r2, r7, #12
 8004da6:	2104      	movs	r1, #4
 8004da8:	4610      	mov	r0, r2
 8004daa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004dac:	4b04      	ldr	r3, [pc, #16]	@ (8004dc0 <WIZCHIP_WRITE+0x98>)
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004db2:	4b03      	ldr	r3, [pc, #12]	@ (8004dc0 <WIZCHIP_WRITE+0x98>)
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	4798      	blx	r3
}
 8004db8:	bf00      	nop
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	20000058 	.word	0x20000058

08004dc4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004dc4:	b590      	push	{r4, r7, lr}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8004e80 <WIZCHIP_READ_BUF+0xbc>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004dd8:	4b29      	ldr	r3, [pc, #164]	@ (8004e80 <WIZCHIP_READ_BUF+0xbc>)
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004dde:	4b28      	ldr	r3, [pc, #160]	@ (8004e80 <WIZCHIP_READ_BUF+0xbc>)
 8004de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <WIZCHIP_READ_BUF+0x2a>
 8004de6:	4b26      	ldr	r3, [pc, #152]	@ (8004e80 <WIZCHIP_READ_BUF+0xbc>)
 8004de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d126      	bne.n	8004e3c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004dee:	4b24      	ldr	r3, [pc, #144]	@ (8004e80 <WIZCHIP_READ_BUF+0xbc>)
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	0c12      	lsrs	r2, r2, #16
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	4610      	mov	r0, r2
 8004dfa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004dfc:	4b20      	ldr	r3, [pc, #128]	@ (8004e80 <WIZCHIP_READ_BUF+0xbc>)
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	0a12      	lsrs	r2, r2, #8
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	4610      	mov	r0, r2
 8004e08:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004e80 <WIZCHIP_READ_BUF+0xbc>)
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	4610      	mov	r0, r2
 8004e14:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004e16:	2300      	movs	r3, #0
 8004e18:	82fb      	strh	r3, [r7, #22]
 8004e1a:	e00a      	b.n	8004e32 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004e1c:	4b18      	ldr	r3, [pc, #96]	@ (8004e80 <WIZCHIP_READ_BUF+0xbc>)
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	8afa      	ldrh	r2, [r7, #22]
 8004e22:	68b9      	ldr	r1, [r7, #8]
 8004e24:	188c      	adds	r4, r1, r2
 8004e26:	4798      	blx	r3
 8004e28:	4603      	mov	r3, r0
 8004e2a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004e2c:	8afb      	ldrh	r3, [r7, #22]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	82fb      	strh	r3, [r7, #22]
 8004e32:	8afa      	ldrh	r2, [r7, #22]
 8004e34:	88fb      	ldrh	r3, [r7, #6]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d3f0      	bcc.n	8004e1c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004e3a:	e017      	b.n	8004e6c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	0c1b      	lsrs	r3, r3, #16
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	0a1b      	lsrs	r3, r3, #8
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004e52:	4b0b      	ldr	r3, [pc, #44]	@ (8004e80 <WIZCHIP_READ_BUF+0xbc>)
 8004e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e56:	f107 0210 	add.w	r2, r7, #16
 8004e5a:	2103      	movs	r1, #3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8004e60:	4b07      	ldr	r3, [pc, #28]	@ (8004e80 <WIZCHIP_READ_BUF+0xbc>)
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	88fa      	ldrh	r2, [r7, #6]
 8004e66:	4611      	mov	r1, r2
 8004e68:	68b8      	ldr	r0, [r7, #8]
 8004e6a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004e6c:	4b04      	ldr	r3, [pc, #16]	@ (8004e80 <WIZCHIP_READ_BUF+0xbc>)
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004e72:	4b03      	ldr	r3, [pc, #12]	@ (8004e80 <WIZCHIP_READ_BUF+0xbc>)
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	4798      	blx	r3
}
 8004e78:	bf00      	nop
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd90      	pop	{r4, r7, pc}
 8004e80:	20000058 	.word	0x20000058

08004e84 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004e92:	4b2b      	ldr	r3, [pc, #172]	@ (8004f40 <WIZCHIP_WRITE_BUF+0xbc>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004e98:	4b29      	ldr	r3, [pc, #164]	@ (8004f40 <WIZCHIP_WRITE_BUF+0xbc>)
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f043 0304 	orr.w	r3, r3, #4
 8004ea4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004ea6:	4b26      	ldr	r3, [pc, #152]	@ (8004f40 <WIZCHIP_WRITE_BUF+0xbc>)
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d126      	bne.n	8004efc <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004eae:	4b24      	ldr	r3, [pc, #144]	@ (8004f40 <WIZCHIP_WRITE_BUF+0xbc>)
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	0c12      	lsrs	r2, r2, #16
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	4610      	mov	r0, r2
 8004eba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004ebc:	4b20      	ldr	r3, [pc, #128]	@ (8004f40 <WIZCHIP_WRITE_BUF+0xbc>)
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	0a12      	lsrs	r2, r2, #8
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004eca:	4b1d      	ldr	r3, [pc, #116]	@ (8004f40 <WIZCHIP_WRITE_BUF+0xbc>)
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	82fb      	strh	r3, [r7, #22]
 8004eda:	e00a      	b.n	8004ef2 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8004edc:	4b18      	ldr	r3, [pc, #96]	@ (8004f40 <WIZCHIP_WRITE_BUF+0xbc>)
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	8afa      	ldrh	r2, [r7, #22]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	7812      	ldrb	r2, [r2, #0]
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004eec:	8afb      	ldrh	r3, [r7, #22]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	82fb      	strh	r3, [r7, #22]
 8004ef2:	8afa      	ldrh	r2, [r7, #22]
 8004ef4:	88fb      	ldrh	r3, [r7, #6]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d3f0      	bcc.n	8004edc <WIZCHIP_WRITE_BUF+0x58>
 8004efa:	e017      	b.n	8004f2c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	0c1b      	lsrs	r3, r3, #16
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004f12:	4b0b      	ldr	r3, [pc, #44]	@ (8004f40 <WIZCHIP_WRITE_BUF+0xbc>)
 8004f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f16:	f107 0210 	add.w	r2, r7, #16
 8004f1a:	2103      	movs	r1, #3
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8004f20:	4b07      	ldr	r3, [pc, #28]	@ (8004f40 <WIZCHIP_WRITE_BUF+0xbc>)
 8004f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f24:	88fa      	ldrh	r2, [r7, #6]
 8004f26:	4611      	mov	r1, r2
 8004f28:	68b8      	ldr	r0, [r7, #8]
 8004f2a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004f2c:	4b04      	ldr	r3, [pc, #16]	@ (8004f40 <WIZCHIP_WRITE_BUF+0xbc>)
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004f32:	4b03      	ldr	r3, [pc, #12]	@ (8004f40 <WIZCHIP_WRITE_BUF+0xbc>)
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	4798      	blx	r3
}
 8004f38:	bf00      	nop
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	20000058 	.word	0x20000058

08004f44 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004f44:	b590      	push	{r4, r7, lr}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	81fb      	strh	r3, [r7, #14]
 8004f52:	2300      	movs	r3, #0
 8004f54:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff fe94 	bl	8004c90 <WIZCHIP_READ>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004f6c:	89bb      	ldrh	r3, [r7, #12]
 8004f6e:	021b      	lsls	r3, r3, #8
 8004f70:	b29c      	uxth	r4, r3
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	3301      	adds	r3, #1
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fe86 	bl	8004c90 <WIZCHIP_READ>
 8004f84:	4603      	mov	r3, r0
 8004f86:	4423      	add	r3, r4
 8004f88:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004f8a:	89bb      	ldrh	r3, [r7, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d019      	beq.n	8004fc4 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	3301      	adds	r3, #1
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff fe77 	bl	8004c90 <WIZCHIP_READ>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004fa6:	89fb      	ldrh	r3, [r7, #14]
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	b29c      	uxth	r4, r3
 8004fac:	79fb      	ldrb	r3, [r7, #7]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fe69 	bl	8004c90 <WIZCHIP_READ>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4423      	add	r3, r4
 8004fc2:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004fc4:	89fa      	ldrh	r2, [r7, #14]
 8004fc6:	89bb      	ldrh	r3, [r7, #12]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d1c4      	bne.n	8004f56 <getSn_TX_FSR+0x12>
   return val;
 8004fcc:	89fb      	ldrh	r3, [r7, #14]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd90      	pop	{r4, r7, pc}

08004fd6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8004fd6:	b590      	push	{r4, r7, lr}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	4603      	mov	r3, r0
 8004fde:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	81fb      	strh	r3, [r7, #14]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	3301      	adds	r3, #1
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff fe4b 	bl	8004c90 <WIZCHIP_READ>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8004ffe:	89bb      	ldrh	r3, [r7, #12]
 8005000:	021b      	lsls	r3, r3, #8
 8005002:	b29c      	uxth	r4, r3
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	3301      	adds	r3, #1
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff fe3d 	bl	8004c90 <WIZCHIP_READ>
 8005016:	4603      	mov	r3, r0
 8005018:	4423      	add	r3, r4
 800501a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800501c:	89bb      	ldrh	r3, [r7, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d019      	beq.n	8005056 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	3301      	adds	r3, #1
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fe2e 	bl	8004c90 <WIZCHIP_READ>
 8005034:	4603      	mov	r3, r0
 8005036:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8005038:	89fb      	ldrh	r3, [r7, #14]
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	b29c      	uxth	r4, r3
 800503e:	79fb      	ldrb	r3, [r7, #7]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	3301      	adds	r3, #1
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fe20 	bl	8004c90 <WIZCHIP_READ>
 8005050:	4603      	mov	r3, r0
 8005052:	4423      	add	r3, r4
 8005054:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005056:	89fa      	ldrh	r2, [r7, #14]
 8005058:	89bb      	ldrh	r3, [r7, #12]
 800505a:	429a      	cmp	r2, r3
 800505c:	d1c4      	bne.n	8004fe8 <getSn_RX_RSR+0x12>
   return val;
 800505e:	89fb      	ldrh	r3, [r7, #14]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	bd90      	pop	{r4, r7, pc}

08005068 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	6039      	str	r1, [r7, #0]
 8005072:	71fb      	strb	r3, [r7, #7]
 8005074:	4613      	mov	r3, r2
 8005076:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8005080:	88bb      	ldrh	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d046      	beq.n	8005114 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	3301      	adds	r3, #1
 800508c:	00db      	lsls	r3, r3, #3
 800508e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff fdfc 	bl	8004c90 <WIZCHIP_READ>
 8005098:	4603      	mov	r3, r0
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	b29c      	uxth	r4, r3
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	3301      	adds	r3, #1
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fdf0 	bl	8004c90 <WIZCHIP_READ>
 80050b0:	4603      	mov	r3, r0
 80050b2:	4423      	add	r3, r4
 80050b4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80050b6:	89fb      	ldrh	r3, [r7, #14]
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	79fa      	ldrb	r2, [r7, #7]
 80050bc:	0092      	lsls	r2, r2, #2
 80050be:	3202      	adds	r2, #2
 80050c0:	00d2      	lsls	r2, r2, #3
 80050c2:	4413      	add	r3, r2
 80050c4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80050c6:	88bb      	ldrh	r3, [r7, #4]
 80050c8:	461a      	mov	r2, r3
 80050ca:	6839      	ldr	r1, [r7, #0]
 80050cc:	68b8      	ldr	r0, [r7, #8]
 80050ce:	f7ff fed9 	bl	8004e84 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80050d2:	89fa      	ldrh	r2, [r7, #14]
 80050d4:	88bb      	ldrh	r3, [r7, #4]
 80050d6:	4413      	add	r3, r2
 80050d8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	3301      	adds	r3, #1
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80050e6:	461a      	mov	r2, r3
 80050e8:	89fb      	ldrh	r3, [r7, #14]
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f7ff fe18 	bl	8004d28 <WIZCHIP_WRITE>
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	3301      	adds	r3, #1
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8005104:	461a      	mov	r2, r3
 8005106:	89fb      	ldrh	r3, [r7, #14]
 8005108:	b2db      	uxtb	r3, r3
 800510a:	4619      	mov	r1, r3
 800510c:	4610      	mov	r0, r2
 800510e:	f7ff fe0b 	bl	8004d28 <WIZCHIP_WRITE>
 8005112:	e000      	b.n	8005116 <wiz_send_data+0xae>
   if(len == 0)  return;
 8005114:	bf00      	nop
}
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	bd90      	pop	{r4, r7, pc}

0800511c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800511c:	b590      	push	{r4, r7, lr}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	4603      	mov	r3, r0
 8005124:	6039      	str	r1, [r7, #0]
 8005126:	71fb      	strb	r3, [r7, #7]
 8005128:	4613      	mov	r3, r2
 800512a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8005134:	88bb      	ldrh	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d046      	beq.n	80051c8 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	3301      	adds	r3, #1
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff fda2 	bl	8004c90 <WIZCHIP_READ>
 800514c:	4603      	mov	r3, r0
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	b29c      	uxth	r4, r3
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	3301      	adds	r3, #1
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff fd96 	bl	8004c90 <WIZCHIP_READ>
 8005164:	4603      	mov	r3, r0
 8005166:	4423      	add	r3, r4
 8005168:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800516a:	89fb      	ldrh	r3, [r7, #14]
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	79fa      	ldrb	r2, [r7, #7]
 8005170:	0092      	lsls	r2, r2, #2
 8005172:	3203      	adds	r2, #3
 8005174:	00d2      	lsls	r2, r2, #3
 8005176:	4413      	add	r3, r2
 8005178:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800517a:	88bb      	ldrh	r3, [r7, #4]
 800517c:	461a      	mov	r2, r3
 800517e:	6839      	ldr	r1, [r7, #0]
 8005180:	68b8      	ldr	r0, [r7, #8]
 8005182:	f7ff fe1f 	bl	8004dc4 <WIZCHIP_READ_BUF>
   ptr += len;
 8005186:	89fa      	ldrh	r2, [r7, #14]
 8005188:	88bb      	ldrh	r3, [r7, #4]
 800518a:	4413      	add	r3, r2
 800518c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	3301      	adds	r3, #1
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800519a:	461a      	mov	r2, r3
 800519c:	89fb      	ldrh	r3, [r7, #14]
 800519e:	0a1b      	lsrs	r3, r3, #8
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	4619      	mov	r1, r3
 80051a6:	4610      	mov	r0, r2
 80051a8:	f7ff fdbe 	bl	8004d28 <WIZCHIP_WRITE>
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	3301      	adds	r3, #1
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80051b8:	461a      	mov	r2, r3
 80051ba:	89fb      	ldrh	r3, [r7, #14]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	4619      	mov	r1, r3
 80051c0:	4610      	mov	r0, r2
 80051c2:	f7ff fdb1 	bl	8004d28 <WIZCHIP_WRITE>
 80051c6:	e000      	b.n	80051ca <wiz_recv_data+0xae>
   if(len == 0) return;
 80051c8:	bf00      	nop
}
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd90      	pop	{r4, r7, pc}

080051d0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	460a      	mov	r2, r1
 80051da:	71fb      	strb	r3, [r7, #7]
 80051dc:	4613      	mov	r3, r2
 80051de:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	3301      	adds	r3, #1
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff fd4d 	bl	8004c90 <WIZCHIP_READ>
 80051f6:	4603      	mov	r3, r0
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	b29c      	uxth	r4, r3
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	3301      	adds	r3, #1
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff fd41 	bl	8004c90 <WIZCHIP_READ>
 800520e:	4603      	mov	r3, r0
 8005210:	4423      	add	r3, r4
 8005212:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8005214:	89fa      	ldrh	r2, [r7, #14]
 8005216:	88bb      	ldrh	r3, [r7, #4]
 8005218:	4413      	add	r3, r2
 800521a:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 800521c:	79fb      	ldrb	r3, [r7, #7]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	3301      	adds	r3, #1
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005228:	461a      	mov	r2, r3
 800522a:	89fb      	ldrh	r3, [r7, #14]
 800522c:	0a1b      	lsrs	r3, r3, #8
 800522e:	b29b      	uxth	r3, r3
 8005230:	b2db      	uxtb	r3, r3
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f7ff fd77 	bl	8004d28 <WIZCHIP_WRITE>
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	3301      	adds	r3, #1
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005246:	461a      	mov	r2, r3
 8005248:	89fb      	ldrh	r3, [r7, #14]
 800524a:	b2db      	uxtb	r3, r3
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f7ff fd6a 	bl	8004d28 <WIZCHIP_WRITE>
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	bd90      	pop	{r4, r7, pc}

0800525c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
 8005260:	bf00      	nop
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800526a:	b480      	push	{r7}
 800526c:	af00      	add	r7, sp, #0
 800526e:	bf00      	nop
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
 800527c:	bf00      	nop
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005286:	b480      	push	{r7}
 8005288:	af00      	add	r7, sp, #0
 800528a:	bf00      	nop
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	4618      	mov	r0, r3
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	460b      	mov	r3, r1
 80052b8:	70fb      	strb	r3, [r7, #3]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	78fa      	ldrb	r2, [r7, #3]
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	2300      	movs	r3, #0
 80052d2:	4618      	mov	r0, r3
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	71fb      	strb	r3, [r7, #7]
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	807b      	strh	r3, [r7, #2]
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	460b      	mov	r3, r1
 8005314:	807b      	strh	r3, [r7, #2]
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
	...

08005324 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <reg_wizchip_cs_cbfunc+0x16>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800533a:	4b0a      	ldr	r3, [pc, #40]	@ (8005364 <reg_wizchip_cs_cbfunc+0x40>)
 800533c:	4a0a      	ldr	r2, [pc, #40]	@ (8005368 <reg_wizchip_cs_cbfunc+0x44>)
 800533e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005340:	4b08      	ldr	r3, [pc, #32]	@ (8005364 <reg_wizchip_cs_cbfunc+0x40>)
 8005342:	4a0a      	ldr	r2, [pc, #40]	@ (800536c <reg_wizchip_cs_cbfunc+0x48>)
 8005344:	619a      	str	r2, [r3, #24]
 8005346:	e006      	b.n	8005356 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005348:	4a06      	ldr	r2, [pc, #24]	@ (8005364 <reg_wizchip_cs_cbfunc+0x40>)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 800534e:	4a05      	ldr	r2, [pc, #20]	@ (8005364 <reg_wizchip_cs_cbfunc+0x40>)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	6193      	str	r3, [r2, #24]
   }
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000058 	.word	0x20000058
 8005368:	08005279 	.word	0x08005279
 800536c:	08005287 	.word	0x08005287

08005370 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800537a:	bf00      	nop
 800537c:	4b0f      	ldr	r3, [pc, #60]	@ (80053bc <reg_wizchip_spi_cbfunc+0x4c>)
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f9      	beq.n	800537c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <reg_wizchip_spi_cbfunc+0x24>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005394:	4b09      	ldr	r3, [pc, #36]	@ (80053bc <reg_wizchip_spi_cbfunc+0x4c>)
 8005396:	4a0a      	ldr	r2, [pc, #40]	@ (80053c0 <reg_wizchip_spi_cbfunc+0x50>)
 8005398:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800539a:	4b08      	ldr	r3, [pc, #32]	@ (80053bc <reg_wizchip_spi_cbfunc+0x4c>)
 800539c:	4a09      	ldr	r2, [pc, #36]	@ (80053c4 <reg_wizchip_spi_cbfunc+0x54>)
 800539e:	621a      	str	r2, [r3, #32]
 80053a0:	e006      	b.n	80053b0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80053a2:	4a06      	ldr	r2, [pc, #24]	@ (80053bc <reg_wizchip_spi_cbfunc+0x4c>)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80053a8:	4a04      	ldr	r2, [pc, #16]	@ (80053bc <reg_wizchip_spi_cbfunc+0x4c>)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6213      	str	r3, [r2, #32]
   }
}
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	20000058 	.word	0x20000058
 80053c0:	080052cd 	.word	0x080052cd
 80053c4:	080052dd 	.word	0x080052dd

080053c8 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80053d2:	bf00      	nop
 80053d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005414 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f9      	beq.n	80053d4 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <reg_wizchip_spiburst_cbfunc+0x24>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d106      	bne.n	80053fa <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80053ec:	4b09      	ldr	r3, [pc, #36]	@ (8005414 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80053ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005418 <reg_wizchip_spiburst_cbfunc+0x50>)
 80053f0:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80053f2:	4b08      	ldr	r3, [pc, #32]	@ (8005414 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80053f4:	4a09      	ldr	r2, [pc, #36]	@ (800541c <reg_wizchip_spiburst_cbfunc+0x54>)
 80053f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80053f8:	e006      	b.n	8005408 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80053fa:	4a06      	ldr	r2, [pc, #24]	@ (8005414 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8005400:	4a04      	ldr	r2, [pc, #16]	@ (8005414 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8005406:	bf00      	nop
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	20000058 	.word	0x20000058
 8005418:	080052f3 	.word	0x080052f3
 800541c:	0800530b 	.word	0x0800530b

08005420 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005420:	b590      	push	{r4, r7, lr}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	6039      	str	r1, [r7, #0]
 800542a:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	2300      	movs	r3, #0
 8005436:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	2b0f      	cmp	r3, #15
 800543c:	f200 80c5 	bhi.w	80055ca <ctlwizchip+0x1aa>
 8005440:	a201      	add	r2, pc, #4	@ (adr r2, 8005448 <ctlwizchip+0x28>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	08005489 	.word	0x08005489
 800544c:	0800548f 	.word	0x0800548f
 8005450:	080054bb 	.word	0x080054bb
 8005454:	080054af 	.word	0x080054af
 8005458:	080054c9 	.word	0x080054c9
 800545c:	080054d5 	.word	0x080054d5
 8005460:	080054e3 	.word	0x080054e3
 8005464:	08005509 	.word	0x08005509
 8005468:	0800552b 	.word	0x0800552b
 800546c:	0800556f 	.word	0x0800556f
 8005470:	08005575 	.word	0x08005575
 8005474:	0800557d 	.word	0x0800557d
 8005478:	080055d1 	.word	0x080055d1
 800547c:	08005585 	.word	0x08005585
 8005480:	08005593 	.word	0x08005593
 8005484:	080055af 	.word	0x080055af
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005488:	f000 f8aa 	bl	80055e0 <wizchip_sw_reset>
         break;
 800548c:	e0a1      	b.n	80055d2 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d004      	beq.n	800549e <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3308      	adds	r3, #8
 800549c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4611      	mov	r1, r2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 f8e7 	bl	8005678 <wizchip_init>
 80054aa:	4603      	mov	r3, r0
 80054ac:	e092      	b.n	80055d4 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 f96c 	bl	8005790 <wizchip_clrinterrupt>
         break;
 80054b8:	e08b      	b.n	80055d2 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80054ba:	f000 f99d 	bl	80057f8 <wizchip_getinterrupt>
 80054be:	4603      	mov	r3, r0
 80054c0:	461a      	mov	r2, r3
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	801a      	strh	r2, [r3, #0]
         break;
 80054c6:	e084      	b.n	80055d2 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 f9b8 	bl	8005842 <wizchip_setinterruptmask>
         break;         
 80054d2:	e07e      	b.n	80055d2 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80054d4:	f000 f9d0 	bl	8005878 <wizchip_getinterruptmask>
 80054d8:	4603      	mov	r3, r0
 80054da:	461a      	mov	r2, r3
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	801a      	strh	r2, [r3, #0]
         break;
 80054e0:	e077      	b.n	80055d2 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	0a1b      	lsrs	r3, r3, #8
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	4619      	mov	r1, r3
 80054ee:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 80054f2:	f7ff fc19 	bl	8004d28 <WIZCHIP_WRITE>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	4619      	mov	r1, r3
 80054fe:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005502:	f7ff fc11 	bl	8004d28 <WIZCHIP_WRITE>
         break;
 8005506:	e064      	b.n	80055d2 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8005508:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 800550c:	f7ff fbc0 	bl	8004c90 <WIZCHIP_READ>
 8005510:	4603      	mov	r3, r0
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	b29c      	uxth	r4, r3
 8005516:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800551a:	f7ff fbb9 	bl	8004c90 <WIZCHIP_READ>
 800551e:	4603      	mov	r3, r0
 8005520:	4423      	add	r3, r4
 8005522:	b29a      	uxth	r2, r3
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	801a      	strh	r2, [r3, #0]
         break;
 8005528:	e053      	b.n	80055d2 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800552a:	4b2c      	ldr	r3, [pc, #176]	@ (80055dc <ctlwizchip+0x1bc>)
 800552c:	789a      	ldrb	r2, [r3, #2]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	4a29      	ldr	r2, [pc, #164]	@ (80055dc <ctlwizchip+0x1bc>)
 8005538:	78d2      	ldrb	r2, [r2, #3]
 800553a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	3302      	adds	r3, #2
 8005540:	4a26      	ldr	r2, [pc, #152]	@ (80055dc <ctlwizchip+0x1bc>)
 8005542:	7912      	ldrb	r2, [r2, #4]
 8005544:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	3303      	adds	r3, #3
 800554a:	4a24      	ldr	r2, [pc, #144]	@ (80055dc <ctlwizchip+0x1bc>)
 800554c:	7952      	ldrb	r2, [r2, #5]
 800554e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	3304      	adds	r3, #4
 8005554:	4a21      	ldr	r2, [pc, #132]	@ (80055dc <ctlwizchip+0x1bc>)
 8005556:	7992      	ldrb	r2, [r2, #6]
 8005558:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	3305      	adds	r3, #5
 800555e:	4a1f      	ldr	r2, [pc, #124]	@ (80055dc <ctlwizchip+0x1bc>)
 8005560:	79d2      	ldrb	r2, [r2, #7]
 8005562:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	3306      	adds	r3, #6
 8005568:	2200      	movs	r2, #0
 800556a:	701a      	strb	r2, [r3, #0]
         break;
 800556c:	e031      	b.n	80055d2 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 800556e:	f000 f9d5 	bl	800591c <wizphy_reset>
         break;
 8005572:	e02e      	b.n	80055d2 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8005574:	6838      	ldr	r0, [r7, #0]
 8005576:	f000 f9f8 	bl	800596a <wizphy_setphyconf>
         break;
 800557a:	e02a      	b.n	80055d2 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 800557c:	6838      	ldr	r0, [r7, #0]
 800557e:	f000 fa37 	bl	80059f0 <wizphy_getphyconf>
         break;
 8005582:	e026      	b.n	80055d2 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fa9b 	bl	8005ac4 <wizphy_setphypmode>
 800558e:	4603      	mov	r3, r0
 8005590:	e020      	b.n	80055d4 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8005592:	f000 f9aa 	bl	80058ea <wizphy_getphypmode>
 8005596:	4603      	mov	r3, r0
 8005598:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800559a:	7dfb      	ldrb	r3, [r7, #23]
 800559c:	2bff      	cmp	r3, #255	@ 0xff
 800559e:	d102      	bne.n	80055a6 <ctlwizchip+0x186>
 80055a0:	f04f 33ff 	mov.w	r3, #4294967295
 80055a4:	e016      	b.n	80055d4 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	7dfa      	ldrb	r2, [r7, #23]
 80055aa:	701a      	strb	r2, [r3, #0]
         break;
 80055ac:	e011      	b.n	80055d2 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80055ae:	f000 f986 	bl	80058be <wizphy_getphylink>
 80055b2:	4603      	mov	r3, r0
 80055b4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80055b6:	7dfb      	ldrb	r3, [r7, #23]
 80055b8:	2bff      	cmp	r3, #255	@ 0xff
 80055ba:	d102      	bne.n	80055c2 <ctlwizchip+0x1a2>
 80055bc:	f04f 33ff 	mov.w	r3, #4294967295
 80055c0:	e008      	b.n	80055d4 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	7dfa      	ldrb	r2, [r7, #23]
 80055c6:	701a      	strb	r2, [r3, #0]
         break;
 80055c8:	e003      	b.n	80055d2 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 80055ca:	f04f 33ff 	mov.w	r3, #4294967295
 80055ce:	e001      	b.n	80055d4 <ctlwizchip+0x1b4>
         break;
 80055d0:	bf00      	nop
   }
   return 0;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd90      	pop	{r4, r7, pc}
 80055dc:	20000058 	.word	0x20000058

080055e0 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80055e6:	1d3b      	adds	r3, r7, #4
 80055e8:	2206      	movs	r2, #6
 80055ea:	4619      	mov	r1, r3
 80055ec:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80055f0:	f7ff fbe8 	bl	8004dc4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80055f4:	f107 0314 	add.w	r3, r7, #20
 80055f8:	2204      	movs	r2, #4
 80055fa:	4619      	mov	r1, r3
 80055fc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005600:	f7ff fbe0 	bl	8004dc4 <WIZCHIP_READ_BUF>
 8005604:	f107 0310 	add.w	r3, r7, #16
 8005608:	2204      	movs	r2, #4
 800560a:	4619      	mov	r1, r3
 800560c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005610:	f7ff fbd8 	bl	8004dc4 <WIZCHIP_READ_BUF>
 8005614:	f107 030c 	add.w	r3, r7, #12
 8005618:	2204      	movs	r2, #4
 800561a:	4619      	mov	r1, r3
 800561c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005620:	f7ff fbd0 	bl	8004dc4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005624:	2180      	movs	r1, #128	@ 0x80
 8005626:	2000      	movs	r0, #0
 8005628:	f7ff fb7e 	bl	8004d28 <WIZCHIP_WRITE>
   getMR(); // for delay
 800562c:	2000      	movs	r0, #0
 800562e:	f7ff fb2f 	bl	8004c90 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005632:	1d3b      	adds	r3, r7, #4
 8005634:	2206      	movs	r2, #6
 8005636:	4619      	mov	r1, r3
 8005638:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800563c:	f7ff fc22 	bl	8004e84 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005640:	f107 0314 	add.w	r3, r7, #20
 8005644:	2204      	movs	r2, #4
 8005646:	4619      	mov	r1, r3
 8005648:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800564c:	f7ff fc1a 	bl	8004e84 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005650:	f107 0310 	add.w	r3, r7, #16
 8005654:	2204      	movs	r2, #4
 8005656:	4619      	mov	r1, r3
 8005658:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800565c:	f7ff fc12 	bl	8004e84 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005660:	f107 030c 	add.w	r3, r7, #12
 8005664:	2204      	movs	r2, #4
 8005666:	4619      	mov	r1, r3
 8005668:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800566c:	f7ff fc0a 	bl	8004e84 <WIZCHIP_WRITE_BUF>
}
 8005670:	bf00      	nop
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005682:	2300      	movs	r3, #0
 8005684:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005686:	f7ff ffab 	bl	80055e0 <wizchip_sw_reset>
   if(txsize)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d03b      	beq.n	8005708 <wizchip_init+0x90>
   {
      tmp = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005694:	2300      	movs	r3, #0
 8005696:	73fb      	strb	r3, [r7, #15]
 8005698:	e015      	b.n	80056c6 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800569a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	4413      	add	r3, r2
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	7bbb      	ldrb	r3, [r7, #14]
 80056a6:	4413      	add	r3, r2
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80056ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056b0:	2b10      	cmp	r3, #16
 80056b2:	dd02      	ble.n	80056ba <wizchip_init+0x42>
 80056b4:	f04f 33ff 	mov.w	r3, #4294967295
 80056b8:	e066      	b.n	8005788 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80056ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	3301      	adds	r3, #1
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	73fb      	strb	r3, [r7, #15]
 80056c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ca:	2b07      	cmp	r3, #7
 80056cc:	dde5      	ble.n	800569a <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80056ce:	2300      	movs	r3, #0
 80056d0:	73fb      	strb	r3, [r7, #15]
 80056d2:	e015      	b.n	8005700 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80056d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	3301      	adds	r3, #1
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80056e2:	4618      	mov	r0, r3
 80056e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	4413      	add	r3, r2
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	4619      	mov	r1, r3
 80056f0:	f7ff fb1a 	bl	8004d28 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80056f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	3301      	adds	r3, #1
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	73fb      	strb	r3, [r7, #15]
 8005700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005704:	2b07      	cmp	r3, #7
 8005706:	dde5      	ble.n	80056d4 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d03b      	beq.n	8005786 <wizchip_init+0x10e>
   {
      tmp = 0;
 800570e:	2300      	movs	r3, #0
 8005710:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005712:	2300      	movs	r3, #0
 8005714:	73fb      	strb	r3, [r7, #15]
 8005716:	e015      	b.n	8005744 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8005718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	4413      	add	r3, r2
 8005720:	781a      	ldrb	r2, [r3, #0]
 8005722:	7bbb      	ldrb	r3, [r7, #14]
 8005724:	4413      	add	r3, r2
 8005726:	b2db      	uxtb	r3, r3
 8005728:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800572a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800572e:	2b10      	cmp	r3, #16
 8005730:	dd02      	ble.n	8005738 <wizchip_init+0xc0>
 8005732:	f04f 33ff 	mov.w	r3, #4294967295
 8005736:	e027      	b.n	8005788 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800573c:	b2db      	uxtb	r3, r3
 800573e:	3301      	adds	r3, #1
 8005740:	b2db      	uxtb	r3, r3
 8005742:	73fb      	strb	r3, [r7, #15]
 8005744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005748:	2b07      	cmp	r3, #7
 800574a:	dde5      	ble.n	8005718 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800574c:	2300      	movs	r3, #0
 800574e:	73fb      	strb	r3, [r7, #15]
 8005750:	e015      	b.n	800577e <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8005752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	3301      	adds	r3, #1
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8005760:	4618      	mov	r0, r3
 8005762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	4413      	add	r3, r2
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	4619      	mov	r1, r3
 800576e:	f7ff fadb 	bl	8004d28 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005776:	b2db      	uxtb	r3, r3
 8005778:	3301      	adds	r3, #1
 800577a:	b2db      	uxtb	r3, r3
 800577c:	73fb      	strb	r3, [r7, #15]
 800577e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005782:	2b07      	cmp	r3, #7
 8005784:	dde5      	ble.n	8005752 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	4603      	mov	r3, r0
 8005798:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800579a:	88fb      	ldrh	r3, [r7, #6]
 800579c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	0a1b      	lsrs	r3, r3, #8
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
 80057a8:	f023 030f 	bic.w	r3, r3, #15
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	4619      	mov	r1, r3
 80057b0:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80057b4:	f7ff fab8 	bl	8004d28 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]
 80057bc:	e014      	b.n	80057e8 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 80057be:	7bba      	ldrb	r2, [r7, #14]
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	fa42 f303 	asr.w	r3, r2, r3
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d009      	beq.n	80057e2 <wizchip_clrinterrupt+0x52>
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	3301      	adds	r3, #1
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80057da:	211f      	movs	r1, #31
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff faa3 	bl	8004d28 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	3301      	adds	r3, #1
 80057e6:	73fb      	strb	r3, [r7, #15]
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	2b07      	cmp	r3, #7
 80057ec:	d9e7      	bls.n	80057be <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80057ee:	bf00      	nop
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80057fe:	2300      	movs	r3, #0
 8005800:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800580a:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 800580e:	f7ff fa3f 	bl	8004c90 <WIZCHIP_READ>
 8005812:	4603      	mov	r3, r0
 8005814:	f023 030f 	bic.w	r3, r3, #15
 8005818:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800581a:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 800581e:	f7ff fa37 	bl	8004c90 <WIZCHIP_READ>
 8005822:	4603      	mov	r3, r0
 8005824:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8005826:	79bb      	ldrb	r3, [r7, #6]
 8005828:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800582a:	88bb      	ldrh	r3, [r7, #4]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	b29a      	uxth	r2, r3
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	b29b      	uxth	r3, r3
 8005834:	4413      	add	r3, r2
 8005836:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8005838:	88bb      	ldrh	r3, [r7, #4]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b084      	sub	sp, #16
 8005846:	af00      	add	r7, sp, #0
 8005848:	4603      	mov	r3, r0
 800584a:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 800584c:	88fb      	ldrh	r3, [r7, #6]
 800584e:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	0a1b      	lsrs	r3, r3, #8
 8005854:	b29b      	uxth	r3, r3
 8005856:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	4619      	mov	r1, r3
 800585c:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8005860:	f7ff fa62 	bl	8004d28 <WIZCHIP_WRITE>
   setSIMR(simr);
 8005864:	7bbb      	ldrb	r3, [r7, #14]
 8005866:	4619      	mov	r1, r3
 8005868:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800586c:	f7ff fa5c 	bl	8004d28 <WIZCHIP_WRITE>
#endif   
}
 8005870:	bf00      	nop
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800588a:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 800588e:	f7ff f9ff 	bl	8004c90 <WIZCHIP_READ>
 8005892:	4603      	mov	r3, r0
 8005894:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8005896:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800589a:	f7ff f9f9 	bl	8004c90 <WIZCHIP_READ>
 800589e:	4603      	mov	r3, r0
 80058a0:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80058a2:	79bb      	ldrb	r3, [r7, #6]
 80058a4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80058a6:	88bb      	ldrh	r3, [r7, #4]
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	4413      	add	r3, r2
 80058b2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80058b4:	88bb      	ldrh	r3, [r7, #4]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80058c4:	2300      	movs	r3, #0
 80058c6:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80058c8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80058cc:	f7ff f9e0 	bl	8004c90 <WIZCHIP_READ>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80058da:	2301      	movs	r3, #1
 80058dc:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80058de:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80058f0:	2300      	movs	r3, #0
 80058f2:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80058f4:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80058f8:	f7ff f9ca 	bl	8004c90 <WIZCHIP_READ>
 80058fc:	4603      	mov	r3, r0
 80058fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005902:	2b30      	cmp	r3, #48	@ 0x30
 8005904:	d102      	bne.n	800590c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8005906:	2301      	movs	r3, #1
 8005908:	71fb      	strb	r3, [r7, #7]
 800590a:	e001      	b.n	8005910 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800590c:	2300      	movs	r3, #0
 800590e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8005910:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8005922:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005926:	f7ff f9b3 	bl	8004c90 <WIZCHIP_READ>
 800592a:	4603      	mov	r3, r0
 800592c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005934:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8005936:	79fb      	ldrb	r3, [r7, #7]
 8005938:	4619      	mov	r1, r3
 800593a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800593e:	f7ff f9f3 	bl	8004d28 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8005942:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005946:	f7ff f9a3 	bl	8004c90 <WIZCHIP_READ>
 800594a:	4603      	mov	r3, r0
 800594c:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005954:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	4619      	mov	r1, r3
 800595a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800595e:	f7ff f9e3 	bl	8004d28 <WIZCHIP_WRITE>
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d104      	bne.n	8005988 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005984:	73fb      	strb	r3, [r7, #15]
 8005986:	e003      	b.n	8005990 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800598e:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d104      	bne.n	80059a2 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800599e:	73fb      	strb	r3, [r7, #15]
 80059a0:	e019      	b.n	80059d6 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	78db      	ldrb	r3, [r3, #3]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d10d      	bne.n	80059c6 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	789b      	ldrb	r3, [r3, #2]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d104      	bne.n	80059bc <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
 80059b4:	f043 0318 	orr.w	r3, r3, #24
 80059b8:	73fb      	strb	r3, [r7, #15]
 80059ba:	e00c      	b.n	80059d6 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	f043 0308 	orr.w	r3, r3, #8
 80059c2:	73fb      	strb	r3, [r7, #15]
 80059c4:	e007      	b.n	80059d6 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	789b      	ldrb	r3, [r3, #2]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d103      	bne.n	80059d6 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	f043 0310 	orr.w	r3, r3, #16
 80059d4:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	4619      	mov	r1, r3
 80059da:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80059de:	f7ff f9a3 	bl	8004d28 <WIZCHIP_WRITE>
   wizphy_reset();
 80059e2:	f7ff ff9b 	bl	800591c <wizphy_reset>
}
 80059e6:	bf00      	nop
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80059fc:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005a00:	f7ff f946 	bl	8004c90 <WIZCHIP_READ>
 8005a04:	4603      	mov	r3, r0
 8005a06:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	119b      	asrs	r3, r3, #6
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
 8005a1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	d001      	beq.n	8005a26 <wizphy_getphyconf+0x36>
 8005a22:	2b38      	cmp	r3, #56	@ 0x38
 8005a24:	d103      	bne.n	8005a2e <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	705a      	strb	r2, [r3, #1]
         break;
 8005a2c:	e003      	b.n	8005a36 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	705a      	strb	r2, [r3, #1]
         break;
 8005a34:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
 8005a38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a3c:	3b10      	subs	r3, #16
 8005a3e:	2b10      	cmp	r3, #16
 8005a40:	bf8c      	ite	hi
 8005a42:	2201      	movhi	r2, #1
 8005a44:	2200      	movls	r2, #0
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	2a00      	cmp	r2, #0
 8005a4a:	d10f      	bne.n	8005a6c <wizphy_getphyconf+0x7c>
 8005a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005abc <wizphy_getphyconf+0xcc>)
 8005a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bf14      	ite	ne
 8005a5a:	2301      	movne	r3, #1
 8005a5c:	2300      	moveq	r3, #0
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	709a      	strb	r2, [r3, #2]
         break;
 8005a6a:	e003      	b.n	8005a74 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	709a      	strb	r2, [r3, #2]
         break;
 8005a72:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a7a:	3b08      	subs	r3, #8
 8005a7c:	2b18      	cmp	r3, #24
 8005a7e:	bf8c      	ite	hi
 8005a80:	2201      	movhi	r2, #1
 8005a82:	2200      	movls	r2, #0
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	2a00      	cmp	r2, #0
 8005a88:	d10f      	bne.n	8005aaa <wizphy_getphyconf+0xba>
 8005a8a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ac0 <wizphy_getphyconf+0xd0>)
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	70da      	strb	r2, [r3, #3]
         break;
 8005aa8:	e003      	b.n	8005ab2 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	70da      	strb	r2, [r3, #3]
         break;
 8005ab0:	bf00      	nop
   }
}
 8005ab2:	bf00      	nop
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	00010101 	.word	0x00010101
 8005ac0:	01010001 	.word	0x01010001

08005ac4 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8005ad2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005ad6:	f7ff f8db 	bl	8004c90 <WIZCHIP_READ>
 8005ada:	4603      	mov	r3, r0
 8005adc:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
 8005ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d102      	bne.n	8005aee <wizphy_setphypmode+0x2a>
 8005ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8005aec:	e030      	b.n	8005b50 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8005af4:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8005af6:	79fb      	ldrb	r3, [r7, #7]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d104      	bne.n	8005b06 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8005b02:	73fb      	strb	r3, [r7, #15]
 8005b04:	e003      	b.n	8005b0e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
 8005b08:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8005b0c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	4619      	mov	r1, r3
 8005b12:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005b16:	f7ff f907 	bl	8004d28 <WIZCHIP_WRITE>
   wizphy_reset();
 8005b1a:	f7ff feff 	bl	800591c <wizphy_reset>
   tmp = getPHYCFGR();
 8005b1e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8005b22:	f7ff f8b5 	bl	8004c90 <WIZCHIP_READ>
 8005b26:	4603      	mov	r3, r0
 8005b28:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8005b2a:	79fb      	ldrb	r3, [r7, #7]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d106      	bne.n	8005b3e <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d008      	beq.n	8005b4c <wizphy_setphypmode+0x88>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e008      	b.n	8005b50 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
 8005b40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <wizphy_setphypmode+0x88>
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e001      	b.n	8005b50 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8005b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2206      	movs	r2, #6
 8005b64:	4619      	mov	r1, r3
 8005b66:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005b6a:	f7ff f98b 	bl	8004e84 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	330e      	adds	r3, #14
 8005b72:	2204      	movs	r2, #4
 8005b74:	4619      	mov	r1, r3
 8005b76:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005b7a:	f7ff f983 	bl	8004e84 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	330a      	adds	r3, #10
 8005b82:	2204      	movs	r2, #4
 8005b84:	4619      	mov	r1, r3
 8005b86:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005b8a:	f7ff f97b 	bl	8004e84 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3306      	adds	r3, #6
 8005b92:	2204      	movs	r2, #4
 8005b94:	4619      	mov	r1, r3
 8005b96:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005b9a:	f7ff f973 	bl	8004e84 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	7c9a      	ldrb	r2, [r3, #18]
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <wizchip_setnetinfo+0x78>)
 8005ba4:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	7cda      	ldrb	r2, [r3, #19]
 8005baa:	4b09      	ldr	r3, [pc, #36]	@ (8005bd0 <wizchip_setnetinfo+0x78>)
 8005bac:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	7d1a      	ldrb	r2, [r3, #20]
 8005bb2:	4b07      	ldr	r3, [pc, #28]	@ (8005bd0 <wizchip_setnetinfo+0x78>)
 8005bb4:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	7d5a      	ldrb	r2, [r3, #21]
 8005bba:	4b05      	ldr	r3, [pc, #20]	@ (8005bd0 <wizchip_setnetinfo+0x78>)
 8005bbc:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	7d9a      	ldrb	r2, [r3, #22]
 8005bc2:	4b04      	ldr	r3, [pc, #16]	@ (8005bd4 <wizchip_setnetinfo+0x7c>)
 8005bc4:	701a      	strb	r2, [r3, #0]
}
 8005bc6:	bf00      	nop
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	200058d8 	.word	0x200058d8
 8005bd4:	200058dc 	.word	0x200058dc

08005bd8 <malloc>:
 8005bd8:	4b02      	ldr	r3, [pc, #8]	@ (8005be4 <malloc+0xc>)
 8005bda:	4601      	mov	r1, r0
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	f000 b825 	b.w	8005c2c <_malloc_r>
 8005be2:	bf00      	nop
 8005be4:	20000090 	.word	0x20000090

08005be8 <sbrk_aligned>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	4e0f      	ldr	r6, [pc, #60]	@ (8005c28 <sbrk_aligned+0x40>)
 8005bec:	460c      	mov	r4, r1
 8005bee:	6831      	ldr	r1, [r6, #0]
 8005bf0:	4605      	mov	r5, r0
 8005bf2:	b911      	cbnz	r1, 8005bfa <sbrk_aligned+0x12>
 8005bf4:	f000 fb72 	bl	80062dc <_sbrk_r>
 8005bf8:	6030      	str	r0, [r6, #0]
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f000 fb6d 	bl	80062dc <_sbrk_r>
 8005c02:	1c43      	adds	r3, r0, #1
 8005c04:	d103      	bne.n	8005c0e <sbrk_aligned+0x26>
 8005c06:	f04f 34ff 	mov.w	r4, #4294967295
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	bd70      	pop	{r4, r5, r6, pc}
 8005c0e:	1cc4      	adds	r4, r0, #3
 8005c10:	f024 0403 	bic.w	r4, r4, #3
 8005c14:	42a0      	cmp	r0, r4
 8005c16:	d0f8      	beq.n	8005c0a <sbrk_aligned+0x22>
 8005c18:	1a21      	subs	r1, r4, r0
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f000 fb5e 	bl	80062dc <_sbrk_r>
 8005c20:	3001      	adds	r0, #1
 8005c22:	d1f2      	bne.n	8005c0a <sbrk_aligned+0x22>
 8005c24:	e7ef      	b.n	8005c06 <sbrk_aligned+0x1e>
 8005c26:	bf00      	nop
 8005c28:	200058e0 	.word	0x200058e0

08005c2c <_malloc_r>:
 8005c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c30:	1ccd      	adds	r5, r1, #3
 8005c32:	f025 0503 	bic.w	r5, r5, #3
 8005c36:	3508      	adds	r5, #8
 8005c38:	2d0c      	cmp	r5, #12
 8005c3a:	bf38      	it	cc
 8005c3c:	250c      	movcc	r5, #12
 8005c3e:	2d00      	cmp	r5, #0
 8005c40:	4606      	mov	r6, r0
 8005c42:	db01      	blt.n	8005c48 <_malloc_r+0x1c>
 8005c44:	42a9      	cmp	r1, r5
 8005c46:	d904      	bls.n	8005c52 <_malloc_r+0x26>
 8005c48:	230c      	movs	r3, #12
 8005c4a:	6033      	str	r3, [r6, #0]
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d28 <_malloc_r+0xfc>
 8005c56:	f000 f869 	bl	8005d2c <__malloc_lock>
 8005c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c5e:	461c      	mov	r4, r3
 8005c60:	bb44      	cbnz	r4, 8005cb4 <_malloc_r+0x88>
 8005c62:	4629      	mov	r1, r5
 8005c64:	4630      	mov	r0, r6
 8005c66:	f7ff ffbf 	bl	8005be8 <sbrk_aligned>
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	d158      	bne.n	8005d22 <_malloc_r+0xf6>
 8005c70:	f8d8 4000 	ldr.w	r4, [r8]
 8005c74:	4627      	mov	r7, r4
 8005c76:	2f00      	cmp	r7, #0
 8005c78:	d143      	bne.n	8005d02 <_malloc_r+0xd6>
 8005c7a:	2c00      	cmp	r4, #0
 8005c7c:	d04b      	beq.n	8005d16 <_malloc_r+0xea>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	4639      	mov	r1, r7
 8005c82:	4630      	mov	r0, r6
 8005c84:	eb04 0903 	add.w	r9, r4, r3
 8005c88:	f000 fb28 	bl	80062dc <_sbrk_r>
 8005c8c:	4581      	cmp	r9, r0
 8005c8e:	d142      	bne.n	8005d16 <_malloc_r+0xea>
 8005c90:	6821      	ldr	r1, [r4, #0]
 8005c92:	1a6d      	subs	r5, r5, r1
 8005c94:	4629      	mov	r1, r5
 8005c96:	4630      	mov	r0, r6
 8005c98:	f7ff ffa6 	bl	8005be8 <sbrk_aligned>
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d03a      	beq.n	8005d16 <_malloc_r+0xea>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	442b      	add	r3, r5
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	f8d8 3000 	ldr.w	r3, [r8]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	bb62      	cbnz	r2, 8005d08 <_malloc_r+0xdc>
 8005cae:	f8c8 7000 	str.w	r7, [r8]
 8005cb2:	e00f      	b.n	8005cd4 <_malloc_r+0xa8>
 8005cb4:	6822      	ldr	r2, [r4, #0]
 8005cb6:	1b52      	subs	r2, r2, r5
 8005cb8:	d420      	bmi.n	8005cfc <_malloc_r+0xd0>
 8005cba:	2a0b      	cmp	r2, #11
 8005cbc:	d917      	bls.n	8005cee <_malloc_r+0xc2>
 8005cbe:	1961      	adds	r1, r4, r5
 8005cc0:	42a3      	cmp	r3, r4
 8005cc2:	6025      	str	r5, [r4, #0]
 8005cc4:	bf18      	it	ne
 8005cc6:	6059      	strne	r1, [r3, #4]
 8005cc8:	6863      	ldr	r3, [r4, #4]
 8005cca:	bf08      	it	eq
 8005ccc:	f8c8 1000 	streq.w	r1, [r8]
 8005cd0:	5162      	str	r2, [r4, r5]
 8005cd2:	604b      	str	r3, [r1, #4]
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	f000 f82f 	bl	8005d38 <__malloc_unlock>
 8005cda:	f104 000b 	add.w	r0, r4, #11
 8005cde:	1d23      	adds	r3, r4, #4
 8005ce0:	f020 0007 	bic.w	r0, r0, #7
 8005ce4:	1ac2      	subs	r2, r0, r3
 8005ce6:	bf1c      	itt	ne
 8005ce8:	1a1b      	subne	r3, r3, r0
 8005cea:	50a3      	strne	r3, [r4, r2]
 8005cec:	e7af      	b.n	8005c4e <_malloc_r+0x22>
 8005cee:	6862      	ldr	r2, [r4, #4]
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	bf0c      	ite	eq
 8005cf4:	f8c8 2000 	streq.w	r2, [r8]
 8005cf8:	605a      	strne	r2, [r3, #4]
 8005cfa:	e7eb      	b.n	8005cd4 <_malloc_r+0xa8>
 8005cfc:	4623      	mov	r3, r4
 8005cfe:	6864      	ldr	r4, [r4, #4]
 8005d00:	e7ae      	b.n	8005c60 <_malloc_r+0x34>
 8005d02:	463c      	mov	r4, r7
 8005d04:	687f      	ldr	r7, [r7, #4]
 8005d06:	e7b6      	b.n	8005c76 <_malloc_r+0x4a>
 8005d08:	461a      	mov	r2, r3
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	42a3      	cmp	r3, r4
 8005d0e:	d1fb      	bne.n	8005d08 <_malloc_r+0xdc>
 8005d10:	2300      	movs	r3, #0
 8005d12:	6053      	str	r3, [r2, #4]
 8005d14:	e7de      	b.n	8005cd4 <_malloc_r+0xa8>
 8005d16:	230c      	movs	r3, #12
 8005d18:	6033      	str	r3, [r6, #0]
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f000 f80c 	bl	8005d38 <__malloc_unlock>
 8005d20:	e794      	b.n	8005c4c <_malloc_r+0x20>
 8005d22:	6005      	str	r5, [r0, #0]
 8005d24:	e7d6      	b.n	8005cd4 <_malloc_r+0xa8>
 8005d26:	bf00      	nop
 8005d28:	200058e4 	.word	0x200058e4

08005d2c <__malloc_lock>:
 8005d2c:	4801      	ldr	r0, [pc, #4]	@ (8005d34 <__malloc_lock+0x8>)
 8005d2e:	f000 bb22 	b.w	8006376 <__retarget_lock_acquire_recursive>
 8005d32:	bf00      	nop
 8005d34:	20005a28 	.word	0x20005a28

08005d38 <__malloc_unlock>:
 8005d38:	4801      	ldr	r0, [pc, #4]	@ (8005d40 <__malloc_unlock+0x8>)
 8005d3a:	f000 bb1d 	b.w	8006378 <__retarget_lock_release_recursive>
 8005d3e:	bf00      	nop
 8005d40:	20005a28 	.word	0x20005a28

08005d44 <rand>:
 8005d44:	4b16      	ldr	r3, [pc, #88]	@ (8005da0 <rand+0x5c>)
 8005d46:	b510      	push	{r4, lr}
 8005d48:	681c      	ldr	r4, [r3, #0]
 8005d4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005d4c:	b9b3      	cbnz	r3, 8005d7c <rand+0x38>
 8005d4e:	2018      	movs	r0, #24
 8005d50:	f7ff ff42 	bl	8005bd8 <malloc>
 8005d54:	4602      	mov	r2, r0
 8005d56:	6320      	str	r0, [r4, #48]	@ 0x30
 8005d58:	b920      	cbnz	r0, 8005d64 <rand+0x20>
 8005d5a:	4b12      	ldr	r3, [pc, #72]	@ (8005da4 <rand+0x60>)
 8005d5c:	4812      	ldr	r0, [pc, #72]	@ (8005da8 <rand+0x64>)
 8005d5e:	2152      	movs	r1, #82	@ 0x52
 8005d60:	f000 fb22 	bl	80063a8 <__assert_func>
 8005d64:	4911      	ldr	r1, [pc, #68]	@ (8005dac <rand+0x68>)
 8005d66:	4b12      	ldr	r3, [pc, #72]	@ (8005db0 <rand+0x6c>)
 8005d68:	e9c0 1300 	strd	r1, r3, [r0]
 8005d6c:	4b11      	ldr	r3, [pc, #68]	@ (8005db4 <rand+0x70>)
 8005d6e:	6083      	str	r3, [r0, #8]
 8005d70:	230b      	movs	r3, #11
 8005d72:	8183      	strh	r3, [r0, #12]
 8005d74:	2100      	movs	r1, #0
 8005d76:	2001      	movs	r0, #1
 8005d78:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005d7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005d7e:	480e      	ldr	r0, [pc, #56]	@ (8005db8 <rand+0x74>)
 8005d80:	690b      	ldr	r3, [r1, #16]
 8005d82:	694c      	ldr	r4, [r1, #20]
 8005d84:	4a0d      	ldr	r2, [pc, #52]	@ (8005dbc <rand+0x78>)
 8005d86:	4358      	muls	r0, r3
 8005d88:	fb02 0004 	mla	r0, r2, r4, r0
 8005d8c:	fba3 3202 	umull	r3, r2, r3, r2
 8005d90:	3301      	adds	r3, #1
 8005d92:	eb40 0002 	adc.w	r0, r0, r2
 8005d96:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005d9a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005d9e:	bd10      	pop	{r4, pc}
 8005da0:	20000090 	.word	0x20000090
 8005da4:	08007622 	.word	0x08007622
 8005da8:	08007639 	.word	0x08007639
 8005dac:	abcd330e 	.word	0xabcd330e
 8005db0:	e66d1234 	.word	0xe66d1234
 8005db4:	0005deec 	.word	0x0005deec
 8005db8:	5851f42d 	.word	0x5851f42d
 8005dbc:	4c957f2d 	.word	0x4c957f2d

08005dc0 <std>:
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	b510      	push	{r4, lr}
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8005dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dce:	6083      	str	r3, [r0, #8]
 8005dd0:	8181      	strh	r1, [r0, #12]
 8005dd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005dd4:	81c2      	strh	r2, [r0, #14]
 8005dd6:	6183      	str	r3, [r0, #24]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	2208      	movs	r2, #8
 8005ddc:	305c      	adds	r0, #92	@ 0x5c
 8005dde:	f000 fa21 	bl	8006224 <memset>
 8005de2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e18 <std+0x58>)
 8005de4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005de6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e1c <std+0x5c>)
 8005de8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005dea:	4b0d      	ldr	r3, [pc, #52]	@ (8005e20 <std+0x60>)
 8005dec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005dee:	4b0d      	ldr	r3, [pc, #52]	@ (8005e24 <std+0x64>)
 8005df0:	6323      	str	r3, [r4, #48]	@ 0x30
 8005df2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e28 <std+0x68>)
 8005df4:	6224      	str	r4, [r4, #32]
 8005df6:	429c      	cmp	r4, r3
 8005df8:	d006      	beq.n	8005e08 <std+0x48>
 8005dfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005dfe:	4294      	cmp	r4, r2
 8005e00:	d002      	beq.n	8005e08 <std+0x48>
 8005e02:	33d0      	adds	r3, #208	@ 0xd0
 8005e04:	429c      	cmp	r4, r3
 8005e06:	d105      	bne.n	8005e14 <std+0x54>
 8005e08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e10:	f000 bab0 	b.w	8006374 <__retarget_lock_init_recursive>
 8005e14:	bd10      	pop	{r4, pc}
 8005e16:	bf00      	nop
 8005e18:	08006075 	.word	0x08006075
 8005e1c:	08006097 	.word	0x08006097
 8005e20:	080060cf 	.word	0x080060cf
 8005e24:	080060f3 	.word	0x080060f3
 8005e28:	200058e8 	.word	0x200058e8

08005e2c <stdio_exit_handler>:
 8005e2c:	4a02      	ldr	r2, [pc, #8]	@ (8005e38 <stdio_exit_handler+0xc>)
 8005e2e:	4903      	ldr	r1, [pc, #12]	@ (8005e3c <stdio_exit_handler+0x10>)
 8005e30:	4803      	ldr	r0, [pc, #12]	@ (8005e40 <stdio_exit_handler+0x14>)
 8005e32:	f000 b869 	b.w	8005f08 <_fwalk_sglue>
 8005e36:	bf00      	nop
 8005e38:	20000084 	.word	0x20000084
 8005e3c:	08006dd1 	.word	0x08006dd1
 8005e40:	20000094 	.word	0x20000094

08005e44 <cleanup_stdio>:
 8005e44:	6841      	ldr	r1, [r0, #4]
 8005e46:	4b0c      	ldr	r3, [pc, #48]	@ (8005e78 <cleanup_stdio+0x34>)
 8005e48:	4299      	cmp	r1, r3
 8005e4a:	b510      	push	{r4, lr}
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	d001      	beq.n	8005e54 <cleanup_stdio+0x10>
 8005e50:	f000 ffbe 	bl	8006dd0 <_fflush_r>
 8005e54:	68a1      	ldr	r1, [r4, #8]
 8005e56:	4b09      	ldr	r3, [pc, #36]	@ (8005e7c <cleanup_stdio+0x38>)
 8005e58:	4299      	cmp	r1, r3
 8005e5a:	d002      	beq.n	8005e62 <cleanup_stdio+0x1e>
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f000 ffb7 	bl	8006dd0 <_fflush_r>
 8005e62:	68e1      	ldr	r1, [r4, #12]
 8005e64:	4b06      	ldr	r3, [pc, #24]	@ (8005e80 <cleanup_stdio+0x3c>)
 8005e66:	4299      	cmp	r1, r3
 8005e68:	d004      	beq.n	8005e74 <cleanup_stdio+0x30>
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e70:	f000 bfae 	b.w	8006dd0 <_fflush_r>
 8005e74:	bd10      	pop	{r4, pc}
 8005e76:	bf00      	nop
 8005e78:	200058e8 	.word	0x200058e8
 8005e7c:	20005950 	.word	0x20005950
 8005e80:	200059b8 	.word	0x200059b8

08005e84 <global_stdio_init.part.0>:
 8005e84:	b510      	push	{r4, lr}
 8005e86:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb4 <global_stdio_init.part.0+0x30>)
 8005e88:	4c0b      	ldr	r4, [pc, #44]	@ (8005eb8 <global_stdio_init.part.0+0x34>)
 8005e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8005ebc <global_stdio_init.part.0+0x38>)
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	4620      	mov	r0, r4
 8005e90:	2200      	movs	r2, #0
 8005e92:	2104      	movs	r1, #4
 8005e94:	f7ff ff94 	bl	8005dc0 <std>
 8005e98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	2109      	movs	r1, #9
 8005ea0:	f7ff ff8e 	bl	8005dc0 <std>
 8005ea4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eae:	2112      	movs	r1, #18
 8005eb0:	f7ff bf86 	b.w	8005dc0 <std>
 8005eb4:	20005a20 	.word	0x20005a20
 8005eb8:	200058e8 	.word	0x200058e8
 8005ebc:	08005e2d 	.word	0x08005e2d

08005ec0 <__sfp_lock_acquire>:
 8005ec0:	4801      	ldr	r0, [pc, #4]	@ (8005ec8 <__sfp_lock_acquire+0x8>)
 8005ec2:	f000 ba58 	b.w	8006376 <__retarget_lock_acquire_recursive>
 8005ec6:	bf00      	nop
 8005ec8:	20005a29 	.word	0x20005a29

08005ecc <__sfp_lock_release>:
 8005ecc:	4801      	ldr	r0, [pc, #4]	@ (8005ed4 <__sfp_lock_release+0x8>)
 8005ece:	f000 ba53 	b.w	8006378 <__retarget_lock_release_recursive>
 8005ed2:	bf00      	nop
 8005ed4:	20005a29 	.word	0x20005a29

08005ed8 <__sinit>:
 8005ed8:	b510      	push	{r4, lr}
 8005eda:	4604      	mov	r4, r0
 8005edc:	f7ff fff0 	bl	8005ec0 <__sfp_lock_acquire>
 8005ee0:	6a23      	ldr	r3, [r4, #32]
 8005ee2:	b11b      	cbz	r3, 8005eec <__sinit+0x14>
 8005ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee8:	f7ff bff0 	b.w	8005ecc <__sfp_lock_release>
 8005eec:	4b04      	ldr	r3, [pc, #16]	@ (8005f00 <__sinit+0x28>)
 8005eee:	6223      	str	r3, [r4, #32]
 8005ef0:	4b04      	ldr	r3, [pc, #16]	@ (8005f04 <__sinit+0x2c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f5      	bne.n	8005ee4 <__sinit+0xc>
 8005ef8:	f7ff ffc4 	bl	8005e84 <global_stdio_init.part.0>
 8005efc:	e7f2      	b.n	8005ee4 <__sinit+0xc>
 8005efe:	bf00      	nop
 8005f00:	08005e45 	.word	0x08005e45
 8005f04:	20005a20 	.word	0x20005a20

08005f08 <_fwalk_sglue>:
 8005f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f0c:	4607      	mov	r7, r0
 8005f0e:	4688      	mov	r8, r1
 8005f10:	4614      	mov	r4, r2
 8005f12:	2600      	movs	r6, #0
 8005f14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f18:	f1b9 0901 	subs.w	r9, r9, #1
 8005f1c:	d505      	bpl.n	8005f2a <_fwalk_sglue+0x22>
 8005f1e:	6824      	ldr	r4, [r4, #0]
 8005f20:	2c00      	cmp	r4, #0
 8005f22:	d1f7      	bne.n	8005f14 <_fwalk_sglue+0xc>
 8005f24:	4630      	mov	r0, r6
 8005f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f2a:	89ab      	ldrh	r3, [r5, #12]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d907      	bls.n	8005f40 <_fwalk_sglue+0x38>
 8005f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f34:	3301      	adds	r3, #1
 8005f36:	d003      	beq.n	8005f40 <_fwalk_sglue+0x38>
 8005f38:	4629      	mov	r1, r5
 8005f3a:	4638      	mov	r0, r7
 8005f3c:	47c0      	blx	r8
 8005f3e:	4306      	orrs	r6, r0
 8005f40:	3568      	adds	r5, #104	@ 0x68
 8005f42:	e7e9      	b.n	8005f18 <_fwalk_sglue+0x10>

08005f44 <iprintf>:
 8005f44:	b40f      	push	{r0, r1, r2, r3}
 8005f46:	b507      	push	{r0, r1, r2, lr}
 8005f48:	4906      	ldr	r1, [pc, #24]	@ (8005f64 <iprintf+0x20>)
 8005f4a:	ab04      	add	r3, sp, #16
 8005f4c:	6808      	ldr	r0, [r1, #0]
 8005f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f52:	6881      	ldr	r1, [r0, #8]
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	f000 fc11 	bl	800677c <_vfiprintf_r>
 8005f5a:	b003      	add	sp, #12
 8005f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f60:	b004      	add	sp, #16
 8005f62:	4770      	bx	lr
 8005f64:	20000090 	.word	0x20000090

08005f68 <putchar>:
 8005f68:	4b02      	ldr	r3, [pc, #8]	@ (8005f74 <putchar+0xc>)
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	6882      	ldr	r2, [r0, #8]
 8005f70:	f000 bfca 	b.w	8006f08 <_putc_r>
 8005f74:	20000090 	.word	0x20000090

08005f78 <_puts_r>:
 8005f78:	6a03      	ldr	r3, [r0, #32]
 8005f7a:	b570      	push	{r4, r5, r6, lr}
 8005f7c:	6884      	ldr	r4, [r0, #8]
 8005f7e:	4605      	mov	r5, r0
 8005f80:	460e      	mov	r6, r1
 8005f82:	b90b      	cbnz	r3, 8005f88 <_puts_r+0x10>
 8005f84:	f7ff ffa8 	bl	8005ed8 <__sinit>
 8005f88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f8a:	07db      	lsls	r3, r3, #31
 8005f8c:	d405      	bmi.n	8005f9a <_puts_r+0x22>
 8005f8e:	89a3      	ldrh	r3, [r4, #12]
 8005f90:	0598      	lsls	r0, r3, #22
 8005f92:	d402      	bmi.n	8005f9a <_puts_r+0x22>
 8005f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f96:	f000 f9ee 	bl	8006376 <__retarget_lock_acquire_recursive>
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	0719      	lsls	r1, r3, #28
 8005f9e:	d502      	bpl.n	8005fa6 <_puts_r+0x2e>
 8005fa0:	6923      	ldr	r3, [r4, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d135      	bne.n	8006012 <_puts_r+0x9a>
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	4628      	mov	r0, r5
 8005faa:	f000 f8e5 	bl	8006178 <__swsetup_r>
 8005fae:	b380      	cbz	r0, 8006012 <_puts_r+0x9a>
 8005fb0:	f04f 35ff 	mov.w	r5, #4294967295
 8005fb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fb6:	07da      	lsls	r2, r3, #31
 8005fb8:	d405      	bmi.n	8005fc6 <_puts_r+0x4e>
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	059b      	lsls	r3, r3, #22
 8005fbe:	d402      	bmi.n	8005fc6 <_puts_r+0x4e>
 8005fc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fc2:	f000 f9d9 	bl	8006378 <__retarget_lock_release_recursive>
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	da04      	bge.n	8005fd8 <_puts_r+0x60>
 8005fce:	69a2      	ldr	r2, [r4, #24]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	dc17      	bgt.n	8006004 <_puts_r+0x8c>
 8005fd4:	290a      	cmp	r1, #10
 8005fd6:	d015      	beq.n	8006004 <_puts_r+0x8c>
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	6022      	str	r2, [r4, #0]
 8005fde:	7019      	strb	r1, [r3, #0]
 8005fe0:	68a3      	ldr	r3, [r4, #8]
 8005fe2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	60a3      	str	r3, [r4, #8]
 8005fea:	2900      	cmp	r1, #0
 8005fec:	d1ed      	bne.n	8005fca <_puts_r+0x52>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	da11      	bge.n	8006016 <_puts_r+0x9e>
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	210a      	movs	r1, #10
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f000 f87f 	bl	80060fa <__swbuf_r>
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d0d7      	beq.n	8005fb0 <_puts_r+0x38>
 8006000:	250a      	movs	r5, #10
 8006002:	e7d7      	b.n	8005fb4 <_puts_r+0x3c>
 8006004:	4622      	mov	r2, r4
 8006006:	4628      	mov	r0, r5
 8006008:	f000 f877 	bl	80060fa <__swbuf_r>
 800600c:	3001      	adds	r0, #1
 800600e:	d1e7      	bne.n	8005fe0 <_puts_r+0x68>
 8006010:	e7ce      	b.n	8005fb0 <_puts_r+0x38>
 8006012:	3e01      	subs	r6, #1
 8006014:	e7e4      	b.n	8005fe0 <_puts_r+0x68>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	6022      	str	r2, [r4, #0]
 800601c:	220a      	movs	r2, #10
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	e7ee      	b.n	8006000 <_puts_r+0x88>
	...

08006024 <puts>:
 8006024:	4b02      	ldr	r3, [pc, #8]	@ (8006030 <puts+0xc>)
 8006026:	4601      	mov	r1, r0
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	f7ff bfa5 	b.w	8005f78 <_puts_r>
 800602e:	bf00      	nop
 8006030:	20000090 	.word	0x20000090

08006034 <siprintf>:
 8006034:	b40e      	push	{r1, r2, r3}
 8006036:	b500      	push	{lr}
 8006038:	b09c      	sub	sp, #112	@ 0x70
 800603a:	ab1d      	add	r3, sp, #116	@ 0x74
 800603c:	9002      	str	r0, [sp, #8]
 800603e:	9006      	str	r0, [sp, #24]
 8006040:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006044:	4809      	ldr	r0, [pc, #36]	@ (800606c <siprintf+0x38>)
 8006046:	9107      	str	r1, [sp, #28]
 8006048:	9104      	str	r1, [sp, #16]
 800604a:	4909      	ldr	r1, [pc, #36]	@ (8006070 <siprintf+0x3c>)
 800604c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006050:	9105      	str	r1, [sp, #20]
 8006052:	6800      	ldr	r0, [r0, #0]
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	a902      	add	r1, sp, #8
 8006058:	f000 fa6a 	bl	8006530 <_svfiprintf_r>
 800605c:	9b02      	ldr	r3, [sp, #8]
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
 8006062:	b01c      	add	sp, #112	@ 0x70
 8006064:	f85d eb04 	ldr.w	lr, [sp], #4
 8006068:	b003      	add	sp, #12
 800606a:	4770      	bx	lr
 800606c:	20000090 	.word	0x20000090
 8006070:	ffff0208 	.word	0xffff0208

08006074 <__sread>:
 8006074:	b510      	push	{r4, lr}
 8006076:	460c      	mov	r4, r1
 8006078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800607c:	f000 f91c 	bl	80062b8 <_read_r>
 8006080:	2800      	cmp	r0, #0
 8006082:	bfab      	itete	ge
 8006084:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006086:	89a3      	ldrhlt	r3, [r4, #12]
 8006088:	181b      	addge	r3, r3, r0
 800608a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800608e:	bfac      	ite	ge
 8006090:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006092:	81a3      	strhlt	r3, [r4, #12]
 8006094:	bd10      	pop	{r4, pc}

08006096 <__swrite>:
 8006096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609a:	461f      	mov	r7, r3
 800609c:	898b      	ldrh	r3, [r1, #12]
 800609e:	05db      	lsls	r3, r3, #23
 80060a0:	4605      	mov	r5, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	4616      	mov	r6, r2
 80060a6:	d505      	bpl.n	80060b4 <__swrite+0x1e>
 80060a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ac:	2302      	movs	r3, #2
 80060ae:	2200      	movs	r2, #0
 80060b0:	f000 f8f0 	bl	8006294 <_lseek_r>
 80060b4:	89a3      	ldrh	r3, [r4, #12]
 80060b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060be:	81a3      	strh	r3, [r4, #12]
 80060c0:	4632      	mov	r2, r6
 80060c2:	463b      	mov	r3, r7
 80060c4:	4628      	mov	r0, r5
 80060c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060ca:	f000 b917 	b.w	80062fc <_write_r>

080060ce <__sseek>:
 80060ce:	b510      	push	{r4, lr}
 80060d0:	460c      	mov	r4, r1
 80060d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d6:	f000 f8dd 	bl	8006294 <_lseek_r>
 80060da:	1c43      	adds	r3, r0, #1
 80060dc:	89a3      	ldrh	r3, [r4, #12]
 80060de:	bf15      	itete	ne
 80060e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060ea:	81a3      	strheq	r3, [r4, #12]
 80060ec:	bf18      	it	ne
 80060ee:	81a3      	strhne	r3, [r4, #12]
 80060f0:	bd10      	pop	{r4, pc}

080060f2 <__sclose>:
 80060f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f6:	f000 b8bd 	b.w	8006274 <_close_r>

080060fa <__swbuf_r>:
 80060fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fc:	460e      	mov	r6, r1
 80060fe:	4614      	mov	r4, r2
 8006100:	4605      	mov	r5, r0
 8006102:	b118      	cbz	r0, 800610c <__swbuf_r+0x12>
 8006104:	6a03      	ldr	r3, [r0, #32]
 8006106:	b90b      	cbnz	r3, 800610c <__swbuf_r+0x12>
 8006108:	f7ff fee6 	bl	8005ed8 <__sinit>
 800610c:	69a3      	ldr	r3, [r4, #24]
 800610e:	60a3      	str	r3, [r4, #8]
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	071a      	lsls	r2, r3, #28
 8006114:	d501      	bpl.n	800611a <__swbuf_r+0x20>
 8006116:	6923      	ldr	r3, [r4, #16]
 8006118:	b943      	cbnz	r3, 800612c <__swbuf_r+0x32>
 800611a:	4621      	mov	r1, r4
 800611c:	4628      	mov	r0, r5
 800611e:	f000 f82b 	bl	8006178 <__swsetup_r>
 8006122:	b118      	cbz	r0, 800612c <__swbuf_r+0x32>
 8006124:	f04f 37ff 	mov.w	r7, #4294967295
 8006128:	4638      	mov	r0, r7
 800612a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	6922      	ldr	r2, [r4, #16]
 8006130:	1a98      	subs	r0, r3, r2
 8006132:	6963      	ldr	r3, [r4, #20]
 8006134:	b2f6      	uxtb	r6, r6
 8006136:	4283      	cmp	r3, r0
 8006138:	4637      	mov	r7, r6
 800613a:	dc05      	bgt.n	8006148 <__swbuf_r+0x4e>
 800613c:	4621      	mov	r1, r4
 800613e:	4628      	mov	r0, r5
 8006140:	f000 fe46 	bl	8006dd0 <_fflush_r>
 8006144:	2800      	cmp	r0, #0
 8006146:	d1ed      	bne.n	8006124 <__swbuf_r+0x2a>
 8006148:	68a3      	ldr	r3, [r4, #8]
 800614a:	3b01      	subs	r3, #1
 800614c:	60a3      	str	r3, [r4, #8]
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	6022      	str	r2, [r4, #0]
 8006154:	701e      	strb	r6, [r3, #0]
 8006156:	6962      	ldr	r2, [r4, #20]
 8006158:	1c43      	adds	r3, r0, #1
 800615a:	429a      	cmp	r2, r3
 800615c:	d004      	beq.n	8006168 <__swbuf_r+0x6e>
 800615e:	89a3      	ldrh	r3, [r4, #12]
 8006160:	07db      	lsls	r3, r3, #31
 8006162:	d5e1      	bpl.n	8006128 <__swbuf_r+0x2e>
 8006164:	2e0a      	cmp	r6, #10
 8006166:	d1df      	bne.n	8006128 <__swbuf_r+0x2e>
 8006168:	4621      	mov	r1, r4
 800616a:	4628      	mov	r0, r5
 800616c:	f000 fe30 	bl	8006dd0 <_fflush_r>
 8006170:	2800      	cmp	r0, #0
 8006172:	d0d9      	beq.n	8006128 <__swbuf_r+0x2e>
 8006174:	e7d6      	b.n	8006124 <__swbuf_r+0x2a>
	...

08006178 <__swsetup_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4b29      	ldr	r3, [pc, #164]	@ (8006220 <__swsetup_r+0xa8>)
 800617c:	4605      	mov	r5, r0
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	460c      	mov	r4, r1
 8006182:	b118      	cbz	r0, 800618c <__swsetup_r+0x14>
 8006184:	6a03      	ldr	r3, [r0, #32]
 8006186:	b90b      	cbnz	r3, 800618c <__swsetup_r+0x14>
 8006188:	f7ff fea6 	bl	8005ed8 <__sinit>
 800618c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006190:	0719      	lsls	r1, r3, #28
 8006192:	d422      	bmi.n	80061da <__swsetup_r+0x62>
 8006194:	06da      	lsls	r2, r3, #27
 8006196:	d407      	bmi.n	80061a8 <__swsetup_r+0x30>
 8006198:	2209      	movs	r2, #9
 800619a:	602a      	str	r2, [r5, #0]
 800619c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061a0:	81a3      	strh	r3, [r4, #12]
 80061a2:	f04f 30ff 	mov.w	r0, #4294967295
 80061a6:	e033      	b.n	8006210 <__swsetup_r+0x98>
 80061a8:	0758      	lsls	r0, r3, #29
 80061aa:	d512      	bpl.n	80061d2 <__swsetup_r+0x5a>
 80061ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061ae:	b141      	cbz	r1, 80061c2 <__swsetup_r+0x4a>
 80061b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80061b4:	4299      	cmp	r1, r3
 80061b6:	d002      	beq.n	80061be <__swsetup_r+0x46>
 80061b8:	4628      	mov	r0, r5
 80061ba:	f000 f913 	bl	80063e4 <_free_r>
 80061be:	2300      	movs	r3, #0
 80061c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80061c2:	89a3      	ldrh	r3, [r4, #12]
 80061c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80061c8:	81a3      	strh	r3, [r4, #12]
 80061ca:	2300      	movs	r3, #0
 80061cc:	6063      	str	r3, [r4, #4]
 80061ce:	6923      	ldr	r3, [r4, #16]
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	89a3      	ldrh	r3, [r4, #12]
 80061d4:	f043 0308 	orr.w	r3, r3, #8
 80061d8:	81a3      	strh	r3, [r4, #12]
 80061da:	6923      	ldr	r3, [r4, #16]
 80061dc:	b94b      	cbnz	r3, 80061f2 <__swsetup_r+0x7a>
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061e8:	d003      	beq.n	80061f2 <__swsetup_r+0x7a>
 80061ea:	4621      	mov	r1, r4
 80061ec:	4628      	mov	r0, r5
 80061ee:	f000 fe4f 	bl	8006e90 <__smakebuf_r>
 80061f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061f6:	f013 0201 	ands.w	r2, r3, #1
 80061fa:	d00a      	beq.n	8006212 <__swsetup_r+0x9a>
 80061fc:	2200      	movs	r2, #0
 80061fe:	60a2      	str	r2, [r4, #8]
 8006200:	6962      	ldr	r2, [r4, #20]
 8006202:	4252      	negs	r2, r2
 8006204:	61a2      	str	r2, [r4, #24]
 8006206:	6922      	ldr	r2, [r4, #16]
 8006208:	b942      	cbnz	r2, 800621c <__swsetup_r+0xa4>
 800620a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800620e:	d1c5      	bne.n	800619c <__swsetup_r+0x24>
 8006210:	bd38      	pop	{r3, r4, r5, pc}
 8006212:	0799      	lsls	r1, r3, #30
 8006214:	bf58      	it	pl
 8006216:	6962      	ldrpl	r2, [r4, #20]
 8006218:	60a2      	str	r2, [r4, #8]
 800621a:	e7f4      	b.n	8006206 <__swsetup_r+0x8e>
 800621c:	2000      	movs	r0, #0
 800621e:	e7f7      	b.n	8006210 <__swsetup_r+0x98>
 8006220:	20000090 	.word	0x20000090

08006224 <memset>:
 8006224:	4402      	add	r2, r0
 8006226:	4603      	mov	r3, r0
 8006228:	4293      	cmp	r3, r2
 800622a:	d100      	bne.n	800622e <memset+0xa>
 800622c:	4770      	bx	lr
 800622e:	f803 1b01 	strb.w	r1, [r3], #1
 8006232:	e7f9      	b.n	8006228 <memset+0x4>

08006234 <strchr>:
 8006234:	b2c9      	uxtb	r1, r1
 8006236:	4603      	mov	r3, r0
 8006238:	4618      	mov	r0, r3
 800623a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800623e:	b112      	cbz	r2, 8006246 <strchr+0x12>
 8006240:	428a      	cmp	r2, r1
 8006242:	d1f9      	bne.n	8006238 <strchr+0x4>
 8006244:	4770      	bx	lr
 8006246:	2900      	cmp	r1, #0
 8006248:	bf18      	it	ne
 800624a:	2000      	movne	r0, #0
 800624c:	4770      	bx	lr

0800624e <strncpy>:
 800624e:	b510      	push	{r4, lr}
 8006250:	3901      	subs	r1, #1
 8006252:	4603      	mov	r3, r0
 8006254:	b132      	cbz	r2, 8006264 <strncpy+0x16>
 8006256:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800625a:	f803 4b01 	strb.w	r4, [r3], #1
 800625e:	3a01      	subs	r2, #1
 8006260:	2c00      	cmp	r4, #0
 8006262:	d1f7      	bne.n	8006254 <strncpy+0x6>
 8006264:	441a      	add	r2, r3
 8006266:	2100      	movs	r1, #0
 8006268:	4293      	cmp	r3, r2
 800626a:	d100      	bne.n	800626e <strncpy+0x20>
 800626c:	bd10      	pop	{r4, pc}
 800626e:	f803 1b01 	strb.w	r1, [r3], #1
 8006272:	e7f9      	b.n	8006268 <strncpy+0x1a>

08006274 <_close_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4d06      	ldr	r5, [pc, #24]	@ (8006290 <_close_r+0x1c>)
 8006278:	2300      	movs	r3, #0
 800627a:	4604      	mov	r4, r0
 800627c:	4608      	mov	r0, r1
 800627e:	602b      	str	r3, [r5, #0]
 8006280:	f7fb fdc8 	bl	8001e14 <_close>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_close_r+0x1a>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	b103      	cbz	r3, 800628e <_close_r+0x1a>
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	20005a24 	.word	0x20005a24

08006294 <_lseek_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	4d07      	ldr	r5, [pc, #28]	@ (80062b4 <_lseek_r+0x20>)
 8006298:	4604      	mov	r4, r0
 800629a:	4608      	mov	r0, r1
 800629c:	4611      	mov	r1, r2
 800629e:	2200      	movs	r2, #0
 80062a0:	602a      	str	r2, [r5, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	f7fb fddd 	bl	8001e62 <_lseek>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d102      	bne.n	80062b2 <_lseek_r+0x1e>
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	b103      	cbz	r3, 80062b2 <_lseek_r+0x1e>
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	bd38      	pop	{r3, r4, r5, pc}
 80062b4:	20005a24 	.word	0x20005a24

080062b8 <_read_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4d07      	ldr	r5, [pc, #28]	@ (80062d8 <_read_r+0x20>)
 80062bc:	4604      	mov	r4, r0
 80062be:	4608      	mov	r0, r1
 80062c0:	4611      	mov	r1, r2
 80062c2:	2200      	movs	r2, #0
 80062c4:	602a      	str	r2, [r5, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f7fb fd6b 	bl	8001da2 <_read>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d102      	bne.n	80062d6 <_read_r+0x1e>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	b103      	cbz	r3, 80062d6 <_read_r+0x1e>
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	20005a24 	.word	0x20005a24

080062dc <_sbrk_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4d06      	ldr	r5, [pc, #24]	@ (80062f8 <_sbrk_r+0x1c>)
 80062e0:	2300      	movs	r3, #0
 80062e2:	4604      	mov	r4, r0
 80062e4:	4608      	mov	r0, r1
 80062e6:	602b      	str	r3, [r5, #0]
 80062e8:	f7fb fdc8 	bl	8001e7c <_sbrk>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_sbrk_r+0x1a>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_sbrk_r+0x1a>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	20005a24 	.word	0x20005a24

080062fc <_write_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	4d07      	ldr	r5, [pc, #28]	@ (800631c <_write_r+0x20>)
 8006300:	4604      	mov	r4, r0
 8006302:	4608      	mov	r0, r1
 8006304:	4611      	mov	r1, r2
 8006306:	2200      	movs	r2, #0
 8006308:	602a      	str	r2, [r5, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	f7fb fd66 	bl	8001ddc <_write>
 8006310:	1c43      	adds	r3, r0, #1
 8006312:	d102      	bne.n	800631a <_write_r+0x1e>
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	b103      	cbz	r3, 800631a <_write_r+0x1e>
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	bd38      	pop	{r3, r4, r5, pc}
 800631c:	20005a24 	.word	0x20005a24

08006320 <__errno>:
 8006320:	4b01      	ldr	r3, [pc, #4]	@ (8006328 <__errno+0x8>)
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	20000090 	.word	0x20000090

0800632c <__libc_init_array>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	4d0d      	ldr	r5, [pc, #52]	@ (8006364 <__libc_init_array+0x38>)
 8006330:	4c0d      	ldr	r4, [pc, #52]	@ (8006368 <__libc_init_array+0x3c>)
 8006332:	1b64      	subs	r4, r4, r5
 8006334:	10a4      	asrs	r4, r4, #2
 8006336:	2600      	movs	r6, #0
 8006338:	42a6      	cmp	r6, r4
 800633a:	d109      	bne.n	8006350 <__libc_init_array+0x24>
 800633c:	4d0b      	ldr	r5, [pc, #44]	@ (800636c <__libc_init_array+0x40>)
 800633e:	4c0c      	ldr	r4, [pc, #48]	@ (8006370 <__libc_init_array+0x44>)
 8006340:	f000 fed4 	bl	80070ec <_init>
 8006344:	1b64      	subs	r4, r4, r5
 8006346:	10a4      	asrs	r4, r4, #2
 8006348:	2600      	movs	r6, #0
 800634a:	42a6      	cmp	r6, r4
 800634c:	d105      	bne.n	800635a <__libc_init_array+0x2e>
 800634e:	bd70      	pop	{r4, r5, r6, pc}
 8006350:	f855 3b04 	ldr.w	r3, [r5], #4
 8006354:	4798      	blx	r3
 8006356:	3601      	adds	r6, #1
 8006358:	e7ee      	b.n	8006338 <__libc_init_array+0xc>
 800635a:	f855 3b04 	ldr.w	r3, [r5], #4
 800635e:	4798      	blx	r3
 8006360:	3601      	adds	r6, #1
 8006362:	e7f2      	b.n	800634a <__libc_init_array+0x1e>
 8006364:	08007708 	.word	0x08007708
 8006368:	08007708 	.word	0x08007708
 800636c:	08007708 	.word	0x08007708
 8006370:	0800770c 	.word	0x0800770c

08006374 <__retarget_lock_init_recursive>:
 8006374:	4770      	bx	lr

08006376 <__retarget_lock_acquire_recursive>:
 8006376:	4770      	bx	lr

08006378 <__retarget_lock_release_recursive>:
 8006378:	4770      	bx	lr

0800637a <strcpy>:
 800637a:	4603      	mov	r3, r0
 800637c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006380:	f803 2b01 	strb.w	r2, [r3], #1
 8006384:	2a00      	cmp	r2, #0
 8006386:	d1f9      	bne.n	800637c <strcpy+0x2>
 8006388:	4770      	bx	lr

0800638a <memcpy>:
 800638a:	440a      	add	r2, r1
 800638c:	4291      	cmp	r1, r2
 800638e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006392:	d100      	bne.n	8006396 <memcpy+0xc>
 8006394:	4770      	bx	lr
 8006396:	b510      	push	{r4, lr}
 8006398:	f811 4b01 	ldrb.w	r4, [r1], #1
 800639c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063a0:	4291      	cmp	r1, r2
 80063a2:	d1f9      	bne.n	8006398 <memcpy+0xe>
 80063a4:	bd10      	pop	{r4, pc}
	...

080063a8 <__assert_func>:
 80063a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063aa:	4614      	mov	r4, r2
 80063ac:	461a      	mov	r2, r3
 80063ae:	4b09      	ldr	r3, [pc, #36]	@ (80063d4 <__assert_func+0x2c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4605      	mov	r5, r0
 80063b4:	68d8      	ldr	r0, [r3, #12]
 80063b6:	b954      	cbnz	r4, 80063ce <__assert_func+0x26>
 80063b8:	4b07      	ldr	r3, [pc, #28]	@ (80063d8 <__assert_func+0x30>)
 80063ba:	461c      	mov	r4, r3
 80063bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063c0:	9100      	str	r1, [sp, #0]
 80063c2:	462b      	mov	r3, r5
 80063c4:	4905      	ldr	r1, [pc, #20]	@ (80063dc <__assert_func+0x34>)
 80063c6:	f000 fd2b 	bl	8006e20 <fiprintf>
 80063ca:	f000 fe0d 	bl	8006fe8 <abort>
 80063ce:	4b04      	ldr	r3, [pc, #16]	@ (80063e0 <__assert_func+0x38>)
 80063d0:	e7f4      	b.n	80063bc <__assert_func+0x14>
 80063d2:	bf00      	nop
 80063d4:	20000090 	.word	0x20000090
 80063d8:	080076cc 	.word	0x080076cc
 80063dc:	0800769e 	.word	0x0800769e
 80063e0:	08007691 	.word	0x08007691

080063e4 <_free_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4605      	mov	r5, r0
 80063e8:	2900      	cmp	r1, #0
 80063ea:	d041      	beq.n	8006470 <_free_r+0x8c>
 80063ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063f0:	1f0c      	subs	r4, r1, #4
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bfb8      	it	lt
 80063f6:	18e4      	addlt	r4, r4, r3
 80063f8:	f7ff fc98 	bl	8005d2c <__malloc_lock>
 80063fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006474 <_free_r+0x90>)
 80063fe:	6813      	ldr	r3, [r2, #0]
 8006400:	b933      	cbnz	r3, 8006410 <_free_r+0x2c>
 8006402:	6063      	str	r3, [r4, #4]
 8006404:	6014      	str	r4, [r2, #0]
 8006406:	4628      	mov	r0, r5
 8006408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800640c:	f7ff bc94 	b.w	8005d38 <__malloc_unlock>
 8006410:	42a3      	cmp	r3, r4
 8006412:	d908      	bls.n	8006426 <_free_r+0x42>
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	1821      	adds	r1, r4, r0
 8006418:	428b      	cmp	r3, r1
 800641a:	bf01      	itttt	eq
 800641c:	6819      	ldreq	r1, [r3, #0]
 800641e:	685b      	ldreq	r3, [r3, #4]
 8006420:	1809      	addeq	r1, r1, r0
 8006422:	6021      	streq	r1, [r4, #0]
 8006424:	e7ed      	b.n	8006402 <_free_r+0x1e>
 8006426:	461a      	mov	r2, r3
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	b10b      	cbz	r3, 8006430 <_free_r+0x4c>
 800642c:	42a3      	cmp	r3, r4
 800642e:	d9fa      	bls.n	8006426 <_free_r+0x42>
 8006430:	6811      	ldr	r1, [r2, #0]
 8006432:	1850      	adds	r0, r2, r1
 8006434:	42a0      	cmp	r0, r4
 8006436:	d10b      	bne.n	8006450 <_free_r+0x6c>
 8006438:	6820      	ldr	r0, [r4, #0]
 800643a:	4401      	add	r1, r0
 800643c:	1850      	adds	r0, r2, r1
 800643e:	4283      	cmp	r3, r0
 8006440:	6011      	str	r1, [r2, #0]
 8006442:	d1e0      	bne.n	8006406 <_free_r+0x22>
 8006444:	6818      	ldr	r0, [r3, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	6053      	str	r3, [r2, #4]
 800644a:	4408      	add	r0, r1
 800644c:	6010      	str	r0, [r2, #0]
 800644e:	e7da      	b.n	8006406 <_free_r+0x22>
 8006450:	d902      	bls.n	8006458 <_free_r+0x74>
 8006452:	230c      	movs	r3, #12
 8006454:	602b      	str	r3, [r5, #0]
 8006456:	e7d6      	b.n	8006406 <_free_r+0x22>
 8006458:	6820      	ldr	r0, [r4, #0]
 800645a:	1821      	adds	r1, r4, r0
 800645c:	428b      	cmp	r3, r1
 800645e:	bf04      	itt	eq
 8006460:	6819      	ldreq	r1, [r3, #0]
 8006462:	685b      	ldreq	r3, [r3, #4]
 8006464:	6063      	str	r3, [r4, #4]
 8006466:	bf04      	itt	eq
 8006468:	1809      	addeq	r1, r1, r0
 800646a:	6021      	streq	r1, [r4, #0]
 800646c:	6054      	str	r4, [r2, #4]
 800646e:	e7ca      	b.n	8006406 <_free_r+0x22>
 8006470:	bd38      	pop	{r3, r4, r5, pc}
 8006472:	bf00      	nop
 8006474:	200058e4 	.word	0x200058e4

08006478 <__ssputs_r>:
 8006478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800647c:	688e      	ldr	r6, [r1, #8]
 800647e:	461f      	mov	r7, r3
 8006480:	42be      	cmp	r6, r7
 8006482:	680b      	ldr	r3, [r1, #0]
 8006484:	4682      	mov	sl, r0
 8006486:	460c      	mov	r4, r1
 8006488:	4690      	mov	r8, r2
 800648a:	d82d      	bhi.n	80064e8 <__ssputs_r+0x70>
 800648c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006490:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006494:	d026      	beq.n	80064e4 <__ssputs_r+0x6c>
 8006496:	6965      	ldr	r5, [r4, #20]
 8006498:	6909      	ldr	r1, [r1, #16]
 800649a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800649e:	eba3 0901 	sub.w	r9, r3, r1
 80064a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064a6:	1c7b      	adds	r3, r7, #1
 80064a8:	444b      	add	r3, r9
 80064aa:	106d      	asrs	r5, r5, #1
 80064ac:	429d      	cmp	r5, r3
 80064ae:	bf38      	it	cc
 80064b0:	461d      	movcc	r5, r3
 80064b2:	0553      	lsls	r3, r2, #21
 80064b4:	d527      	bpl.n	8006506 <__ssputs_r+0x8e>
 80064b6:	4629      	mov	r1, r5
 80064b8:	f7ff fbb8 	bl	8005c2c <_malloc_r>
 80064bc:	4606      	mov	r6, r0
 80064be:	b360      	cbz	r0, 800651a <__ssputs_r+0xa2>
 80064c0:	6921      	ldr	r1, [r4, #16]
 80064c2:	464a      	mov	r2, r9
 80064c4:	f7ff ff61 	bl	800638a <memcpy>
 80064c8:	89a3      	ldrh	r3, [r4, #12]
 80064ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d2:	81a3      	strh	r3, [r4, #12]
 80064d4:	6126      	str	r6, [r4, #16]
 80064d6:	6165      	str	r5, [r4, #20]
 80064d8:	444e      	add	r6, r9
 80064da:	eba5 0509 	sub.w	r5, r5, r9
 80064de:	6026      	str	r6, [r4, #0]
 80064e0:	60a5      	str	r5, [r4, #8]
 80064e2:	463e      	mov	r6, r7
 80064e4:	42be      	cmp	r6, r7
 80064e6:	d900      	bls.n	80064ea <__ssputs_r+0x72>
 80064e8:	463e      	mov	r6, r7
 80064ea:	6820      	ldr	r0, [r4, #0]
 80064ec:	4632      	mov	r2, r6
 80064ee:	4641      	mov	r1, r8
 80064f0:	f000 fd3e 	bl	8006f70 <memmove>
 80064f4:	68a3      	ldr	r3, [r4, #8]
 80064f6:	1b9b      	subs	r3, r3, r6
 80064f8:	60a3      	str	r3, [r4, #8]
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	4433      	add	r3, r6
 80064fe:	6023      	str	r3, [r4, #0]
 8006500:	2000      	movs	r0, #0
 8006502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006506:	462a      	mov	r2, r5
 8006508:	f000 fd75 	bl	8006ff6 <_realloc_r>
 800650c:	4606      	mov	r6, r0
 800650e:	2800      	cmp	r0, #0
 8006510:	d1e0      	bne.n	80064d4 <__ssputs_r+0x5c>
 8006512:	6921      	ldr	r1, [r4, #16]
 8006514:	4650      	mov	r0, sl
 8006516:	f7ff ff65 	bl	80063e4 <_free_r>
 800651a:	230c      	movs	r3, #12
 800651c:	f8ca 3000 	str.w	r3, [sl]
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006526:	81a3      	strh	r3, [r4, #12]
 8006528:	f04f 30ff 	mov.w	r0, #4294967295
 800652c:	e7e9      	b.n	8006502 <__ssputs_r+0x8a>
	...

08006530 <_svfiprintf_r>:
 8006530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	4698      	mov	r8, r3
 8006536:	898b      	ldrh	r3, [r1, #12]
 8006538:	061b      	lsls	r3, r3, #24
 800653a:	b09d      	sub	sp, #116	@ 0x74
 800653c:	4607      	mov	r7, r0
 800653e:	460d      	mov	r5, r1
 8006540:	4614      	mov	r4, r2
 8006542:	d510      	bpl.n	8006566 <_svfiprintf_r+0x36>
 8006544:	690b      	ldr	r3, [r1, #16]
 8006546:	b973      	cbnz	r3, 8006566 <_svfiprintf_r+0x36>
 8006548:	2140      	movs	r1, #64	@ 0x40
 800654a:	f7ff fb6f 	bl	8005c2c <_malloc_r>
 800654e:	6028      	str	r0, [r5, #0]
 8006550:	6128      	str	r0, [r5, #16]
 8006552:	b930      	cbnz	r0, 8006562 <_svfiprintf_r+0x32>
 8006554:	230c      	movs	r3, #12
 8006556:	603b      	str	r3, [r7, #0]
 8006558:	f04f 30ff 	mov.w	r0, #4294967295
 800655c:	b01d      	add	sp, #116	@ 0x74
 800655e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006562:	2340      	movs	r3, #64	@ 0x40
 8006564:	616b      	str	r3, [r5, #20]
 8006566:	2300      	movs	r3, #0
 8006568:	9309      	str	r3, [sp, #36]	@ 0x24
 800656a:	2320      	movs	r3, #32
 800656c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006570:	f8cd 800c 	str.w	r8, [sp, #12]
 8006574:	2330      	movs	r3, #48	@ 0x30
 8006576:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006714 <_svfiprintf_r+0x1e4>
 800657a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800657e:	f04f 0901 	mov.w	r9, #1
 8006582:	4623      	mov	r3, r4
 8006584:	469a      	mov	sl, r3
 8006586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800658a:	b10a      	cbz	r2, 8006590 <_svfiprintf_r+0x60>
 800658c:	2a25      	cmp	r2, #37	@ 0x25
 800658e:	d1f9      	bne.n	8006584 <_svfiprintf_r+0x54>
 8006590:	ebba 0b04 	subs.w	fp, sl, r4
 8006594:	d00b      	beq.n	80065ae <_svfiprintf_r+0x7e>
 8006596:	465b      	mov	r3, fp
 8006598:	4622      	mov	r2, r4
 800659a:	4629      	mov	r1, r5
 800659c:	4638      	mov	r0, r7
 800659e:	f7ff ff6b 	bl	8006478 <__ssputs_r>
 80065a2:	3001      	adds	r0, #1
 80065a4:	f000 80a7 	beq.w	80066f6 <_svfiprintf_r+0x1c6>
 80065a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065aa:	445a      	add	r2, fp
 80065ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80065ae:	f89a 3000 	ldrb.w	r3, [sl]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 809f 	beq.w	80066f6 <_svfiprintf_r+0x1c6>
 80065b8:	2300      	movs	r3, #0
 80065ba:	f04f 32ff 	mov.w	r2, #4294967295
 80065be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065c2:	f10a 0a01 	add.w	sl, sl, #1
 80065c6:	9304      	str	r3, [sp, #16]
 80065c8:	9307      	str	r3, [sp, #28]
 80065ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80065d0:	4654      	mov	r4, sl
 80065d2:	2205      	movs	r2, #5
 80065d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d8:	484e      	ldr	r0, [pc, #312]	@ (8006714 <_svfiprintf_r+0x1e4>)
 80065da:	f7f9 fe19 	bl	8000210 <memchr>
 80065de:	9a04      	ldr	r2, [sp, #16]
 80065e0:	b9d8      	cbnz	r0, 800661a <_svfiprintf_r+0xea>
 80065e2:	06d0      	lsls	r0, r2, #27
 80065e4:	bf44      	itt	mi
 80065e6:	2320      	movmi	r3, #32
 80065e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065ec:	0711      	lsls	r1, r2, #28
 80065ee:	bf44      	itt	mi
 80065f0:	232b      	movmi	r3, #43	@ 0x2b
 80065f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065f6:	f89a 3000 	ldrb.w	r3, [sl]
 80065fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80065fc:	d015      	beq.n	800662a <_svfiprintf_r+0xfa>
 80065fe:	9a07      	ldr	r2, [sp, #28]
 8006600:	4654      	mov	r4, sl
 8006602:	2000      	movs	r0, #0
 8006604:	f04f 0c0a 	mov.w	ip, #10
 8006608:	4621      	mov	r1, r4
 800660a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800660e:	3b30      	subs	r3, #48	@ 0x30
 8006610:	2b09      	cmp	r3, #9
 8006612:	d94b      	bls.n	80066ac <_svfiprintf_r+0x17c>
 8006614:	b1b0      	cbz	r0, 8006644 <_svfiprintf_r+0x114>
 8006616:	9207      	str	r2, [sp, #28]
 8006618:	e014      	b.n	8006644 <_svfiprintf_r+0x114>
 800661a:	eba0 0308 	sub.w	r3, r0, r8
 800661e:	fa09 f303 	lsl.w	r3, r9, r3
 8006622:	4313      	orrs	r3, r2
 8006624:	9304      	str	r3, [sp, #16]
 8006626:	46a2      	mov	sl, r4
 8006628:	e7d2      	b.n	80065d0 <_svfiprintf_r+0xa0>
 800662a:	9b03      	ldr	r3, [sp, #12]
 800662c:	1d19      	adds	r1, r3, #4
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	9103      	str	r1, [sp, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	bfbb      	ittet	lt
 8006636:	425b      	neglt	r3, r3
 8006638:	f042 0202 	orrlt.w	r2, r2, #2
 800663c:	9307      	strge	r3, [sp, #28]
 800663e:	9307      	strlt	r3, [sp, #28]
 8006640:	bfb8      	it	lt
 8006642:	9204      	strlt	r2, [sp, #16]
 8006644:	7823      	ldrb	r3, [r4, #0]
 8006646:	2b2e      	cmp	r3, #46	@ 0x2e
 8006648:	d10a      	bne.n	8006660 <_svfiprintf_r+0x130>
 800664a:	7863      	ldrb	r3, [r4, #1]
 800664c:	2b2a      	cmp	r3, #42	@ 0x2a
 800664e:	d132      	bne.n	80066b6 <_svfiprintf_r+0x186>
 8006650:	9b03      	ldr	r3, [sp, #12]
 8006652:	1d1a      	adds	r2, r3, #4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	9203      	str	r2, [sp, #12]
 8006658:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800665c:	3402      	adds	r4, #2
 800665e:	9305      	str	r3, [sp, #20]
 8006660:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006724 <_svfiprintf_r+0x1f4>
 8006664:	7821      	ldrb	r1, [r4, #0]
 8006666:	2203      	movs	r2, #3
 8006668:	4650      	mov	r0, sl
 800666a:	f7f9 fdd1 	bl	8000210 <memchr>
 800666e:	b138      	cbz	r0, 8006680 <_svfiprintf_r+0x150>
 8006670:	9b04      	ldr	r3, [sp, #16]
 8006672:	eba0 000a 	sub.w	r0, r0, sl
 8006676:	2240      	movs	r2, #64	@ 0x40
 8006678:	4082      	lsls	r2, r0
 800667a:	4313      	orrs	r3, r2
 800667c:	3401      	adds	r4, #1
 800667e:	9304      	str	r3, [sp, #16]
 8006680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006684:	4824      	ldr	r0, [pc, #144]	@ (8006718 <_svfiprintf_r+0x1e8>)
 8006686:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800668a:	2206      	movs	r2, #6
 800668c:	f7f9 fdc0 	bl	8000210 <memchr>
 8006690:	2800      	cmp	r0, #0
 8006692:	d036      	beq.n	8006702 <_svfiprintf_r+0x1d2>
 8006694:	4b21      	ldr	r3, [pc, #132]	@ (800671c <_svfiprintf_r+0x1ec>)
 8006696:	bb1b      	cbnz	r3, 80066e0 <_svfiprintf_r+0x1b0>
 8006698:	9b03      	ldr	r3, [sp, #12]
 800669a:	3307      	adds	r3, #7
 800669c:	f023 0307 	bic.w	r3, r3, #7
 80066a0:	3308      	adds	r3, #8
 80066a2:	9303      	str	r3, [sp, #12]
 80066a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a6:	4433      	add	r3, r6
 80066a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80066aa:	e76a      	b.n	8006582 <_svfiprintf_r+0x52>
 80066ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80066b0:	460c      	mov	r4, r1
 80066b2:	2001      	movs	r0, #1
 80066b4:	e7a8      	b.n	8006608 <_svfiprintf_r+0xd8>
 80066b6:	2300      	movs	r3, #0
 80066b8:	3401      	adds	r4, #1
 80066ba:	9305      	str	r3, [sp, #20]
 80066bc:	4619      	mov	r1, r3
 80066be:	f04f 0c0a 	mov.w	ip, #10
 80066c2:	4620      	mov	r0, r4
 80066c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066c8:	3a30      	subs	r2, #48	@ 0x30
 80066ca:	2a09      	cmp	r2, #9
 80066cc:	d903      	bls.n	80066d6 <_svfiprintf_r+0x1a6>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0c6      	beq.n	8006660 <_svfiprintf_r+0x130>
 80066d2:	9105      	str	r1, [sp, #20]
 80066d4:	e7c4      	b.n	8006660 <_svfiprintf_r+0x130>
 80066d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80066da:	4604      	mov	r4, r0
 80066dc:	2301      	movs	r3, #1
 80066de:	e7f0      	b.n	80066c2 <_svfiprintf_r+0x192>
 80066e0:	ab03      	add	r3, sp, #12
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	462a      	mov	r2, r5
 80066e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006720 <_svfiprintf_r+0x1f0>)
 80066e8:	a904      	add	r1, sp, #16
 80066ea:	4638      	mov	r0, r7
 80066ec:	f3af 8000 	nop.w
 80066f0:	1c42      	adds	r2, r0, #1
 80066f2:	4606      	mov	r6, r0
 80066f4:	d1d6      	bne.n	80066a4 <_svfiprintf_r+0x174>
 80066f6:	89ab      	ldrh	r3, [r5, #12]
 80066f8:	065b      	lsls	r3, r3, #25
 80066fa:	f53f af2d 	bmi.w	8006558 <_svfiprintf_r+0x28>
 80066fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006700:	e72c      	b.n	800655c <_svfiprintf_r+0x2c>
 8006702:	ab03      	add	r3, sp, #12
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	462a      	mov	r2, r5
 8006708:	4b05      	ldr	r3, [pc, #20]	@ (8006720 <_svfiprintf_r+0x1f0>)
 800670a:	a904      	add	r1, sp, #16
 800670c:	4638      	mov	r0, r7
 800670e:	f000 f9bb 	bl	8006a88 <_printf_i>
 8006712:	e7ed      	b.n	80066f0 <_svfiprintf_r+0x1c0>
 8006714:	080076cd 	.word	0x080076cd
 8006718:	080076d7 	.word	0x080076d7
 800671c:	00000000 	.word	0x00000000
 8006720:	08006479 	.word	0x08006479
 8006724:	080076d3 	.word	0x080076d3

08006728 <__sfputc_r>:
 8006728:	6893      	ldr	r3, [r2, #8]
 800672a:	3b01      	subs	r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	b410      	push	{r4}
 8006730:	6093      	str	r3, [r2, #8]
 8006732:	da08      	bge.n	8006746 <__sfputc_r+0x1e>
 8006734:	6994      	ldr	r4, [r2, #24]
 8006736:	42a3      	cmp	r3, r4
 8006738:	db01      	blt.n	800673e <__sfputc_r+0x16>
 800673a:	290a      	cmp	r1, #10
 800673c:	d103      	bne.n	8006746 <__sfputc_r+0x1e>
 800673e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006742:	f7ff bcda 	b.w	80060fa <__swbuf_r>
 8006746:	6813      	ldr	r3, [r2, #0]
 8006748:	1c58      	adds	r0, r3, #1
 800674a:	6010      	str	r0, [r2, #0]
 800674c:	7019      	strb	r1, [r3, #0]
 800674e:	4608      	mov	r0, r1
 8006750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006754:	4770      	bx	lr

08006756 <__sfputs_r>:
 8006756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006758:	4606      	mov	r6, r0
 800675a:	460f      	mov	r7, r1
 800675c:	4614      	mov	r4, r2
 800675e:	18d5      	adds	r5, r2, r3
 8006760:	42ac      	cmp	r4, r5
 8006762:	d101      	bne.n	8006768 <__sfputs_r+0x12>
 8006764:	2000      	movs	r0, #0
 8006766:	e007      	b.n	8006778 <__sfputs_r+0x22>
 8006768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800676c:	463a      	mov	r2, r7
 800676e:	4630      	mov	r0, r6
 8006770:	f7ff ffda 	bl	8006728 <__sfputc_r>
 8006774:	1c43      	adds	r3, r0, #1
 8006776:	d1f3      	bne.n	8006760 <__sfputs_r+0xa>
 8006778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800677c <_vfiprintf_r>:
 800677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006780:	460d      	mov	r5, r1
 8006782:	b09d      	sub	sp, #116	@ 0x74
 8006784:	4614      	mov	r4, r2
 8006786:	4698      	mov	r8, r3
 8006788:	4606      	mov	r6, r0
 800678a:	b118      	cbz	r0, 8006794 <_vfiprintf_r+0x18>
 800678c:	6a03      	ldr	r3, [r0, #32]
 800678e:	b90b      	cbnz	r3, 8006794 <_vfiprintf_r+0x18>
 8006790:	f7ff fba2 	bl	8005ed8 <__sinit>
 8006794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006796:	07d9      	lsls	r1, r3, #31
 8006798:	d405      	bmi.n	80067a6 <_vfiprintf_r+0x2a>
 800679a:	89ab      	ldrh	r3, [r5, #12]
 800679c:	059a      	lsls	r2, r3, #22
 800679e:	d402      	bmi.n	80067a6 <_vfiprintf_r+0x2a>
 80067a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067a2:	f7ff fde8 	bl	8006376 <__retarget_lock_acquire_recursive>
 80067a6:	89ab      	ldrh	r3, [r5, #12]
 80067a8:	071b      	lsls	r3, r3, #28
 80067aa:	d501      	bpl.n	80067b0 <_vfiprintf_r+0x34>
 80067ac:	692b      	ldr	r3, [r5, #16]
 80067ae:	b99b      	cbnz	r3, 80067d8 <_vfiprintf_r+0x5c>
 80067b0:	4629      	mov	r1, r5
 80067b2:	4630      	mov	r0, r6
 80067b4:	f7ff fce0 	bl	8006178 <__swsetup_r>
 80067b8:	b170      	cbz	r0, 80067d8 <_vfiprintf_r+0x5c>
 80067ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067bc:	07dc      	lsls	r4, r3, #31
 80067be:	d504      	bpl.n	80067ca <_vfiprintf_r+0x4e>
 80067c0:	f04f 30ff 	mov.w	r0, #4294967295
 80067c4:	b01d      	add	sp, #116	@ 0x74
 80067c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ca:	89ab      	ldrh	r3, [r5, #12]
 80067cc:	0598      	lsls	r0, r3, #22
 80067ce:	d4f7      	bmi.n	80067c0 <_vfiprintf_r+0x44>
 80067d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067d2:	f7ff fdd1 	bl	8006378 <__retarget_lock_release_recursive>
 80067d6:	e7f3      	b.n	80067c0 <_vfiprintf_r+0x44>
 80067d8:	2300      	movs	r3, #0
 80067da:	9309      	str	r3, [sp, #36]	@ 0x24
 80067dc:	2320      	movs	r3, #32
 80067de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80067e6:	2330      	movs	r3, #48	@ 0x30
 80067e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006998 <_vfiprintf_r+0x21c>
 80067ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067f0:	f04f 0901 	mov.w	r9, #1
 80067f4:	4623      	mov	r3, r4
 80067f6:	469a      	mov	sl, r3
 80067f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067fc:	b10a      	cbz	r2, 8006802 <_vfiprintf_r+0x86>
 80067fe:	2a25      	cmp	r2, #37	@ 0x25
 8006800:	d1f9      	bne.n	80067f6 <_vfiprintf_r+0x7a>
 8006802:	ebba 0b04 	subs.w	fp, sl, r4
 8006806:	d00b      	beq.n	8006820 <_vfiprintf_r+0xa4>
 8006808:	465b      	mov	r3, fp
 800680a:	4622      	mov	r2, r4
 800680c:	4629      	mov	r1, r5
 800680e:	4630      	mov	r0, r6
 8006810:	f7ff ffa1 	bl	8006756 <__sfputs_r>
 8006814:	3001      	adds	r0, #1
 8006816:	f000 80a7 	beq.w	8006968 <_vfiprintf_r+0x1ec>
 800681a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800681c:	445a      	add	r2, fp
 800681e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006820:	f89a 3000 	ldrb.w	r3, [sl]
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 809f 	beq.w	8006968 <_vfiprintf_r+0x1ec>
 800682a:	2300      	movs	r3, #0
 800682c:	f04f 32ff 	mov.w	r2, #4294967295
 8006830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006834:	f10a 0a01 	add.w	sl, sl, #1
 8006838:	9304      	str	r3, [sp, #16]
 800683a:	9307      	str	r3, [sp, #28]
 800683c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006840:	931a      	str	r3, [sp, #104]	@ 0x68
 8006842:	4654      	mov	r4, sl
 8006844:	2205      	movs	r2, #5
 8006846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800684a:	4853      	ldr	r0, [pc, #332]	@ (8006998 <_vfiprintf_r+0x21c>)
 800684c:	f7f9 fce0 	bl	8000210 <memchr>
 8006850:	9a04      	ldr	r2, [sp, #16]
 8006852:	b9d8      	cbnz	r0, 800688c <_vfiprintf_r+0x110>
 8006854:	06d1      	lsls	r1, r2, #27
 8006856:	bf44      	itt	mi
 8006858:	2320      	movmi	r3, #32
 800685a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800685e:	0713      	lsls	r3, r2, #28
 8006860:	bf44      	itt	mi
 8006862:	232b      	movmi	r3, #43	@ 0x2b
 8006864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006868:	f89a 3000 	ldrb.w	r3, [sl]
 800686c:	2b2a      	cmp	r3, #42	@ 0x2a
 800686e:	d015      	beq.n	800689c <_vfiprintf_r+0x120>
 8006870:	9a07      	ldr	r2, [sp, #28]
 8006872:	4654      	mov	r4, sl
 8006874:	2000      	movs	r0, #0
 8006876:	f04f 0c0a 	mov.w	ip, #10
 800687a:	4621      	mov	r1, r4
 800687c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006880:	3b30      	subs	r3, #48	@ 0x30
 8006882:	2b09      	cmp	r3, #9
 8006884:	d94b      	bls.n	800691e <_vfiprintf_r+0x1a2>
 8006886:	b1b0      	cbz	r0, 80068b6 <_vfiprintf_r+0x13a>
 8006888:	9207      	str	r2, [sp, #28]
 800688a:	e014      	b.n	80068b6 <_vfiprintf_r+0x13a>
 800688c:	eba0 0308 	sub.w	r3, r0, r8
 8006890:	fa09 f303 	lsl.w	r3, r9, r3
 8006894:	4313      	orrs	r3, r2
 8006896:	9304      	str	r3, [sp, #16]
 8006898:	46a2      	mov	sl, r4
 800689a:	e7d2      	b.n	8006842 <_vfiprintf_r+0xc6>
 800689c:	9b03      	ldr	r3, [sp, #12]
 800689e:	1d19      	adds	r1, r3, #4
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	9103      	str	r1, [sp, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	bfbb      	ittet	lt
 80068a8:	425b      	neglt	r3, r3
 80068aa:	f042 0202 	orrlt.w	r2, r2, #2
 80068ae:	9307      	strge	r3, [sp, #28]
 80068b0:	9307      	strlt	r3, [sp, #28]
 80068b2:	bfb8      	it	lt
 80068b4:	9204      	strlt	r2, [sp, #16]
 80068b6:	7823      	ldrb	r3, [r4, #0]
 80068b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80068ba:	d10a      	bne.n	80068d2 <_vfiprintf_r+0x156>
 80068bc:	7863      	ldrb	r3, [r4, #1]
 80068be:	2b2a      	cmp	r3, #42	@ 0x2a
 80068c0:	d132      	bne.n	8006928 <_vfiprintf_r+0x1ac>
 80068c2:	9b03      	ldr	r3, [sp, #12]
 80068c4:	1d1a      	adds	r2, r3, #4
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	9203      	str	r2, [sp, #12]
 80068ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068ce:	3402      	adds	r4, #2
 80068d0:	9305      	str	r3, [sp, #20]
 80068d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80069a8 <_vfiprintf_r+0x22c>
 80068d6:	7821      	ldrb	r1, [r4, #0]
 80068d8:	2203      	movs	r2, #3
 80068da:	4650      	mov	r0, sl
 80068dc:	f7f9 fc98 	bl	8000210 <memchr>
 80068e0:	b138      	cbz	r0, 80068f2 <_vfiprintf_r+0x176>
 80068e2:	9b04      	ldr	r3, [sp, #16]
 80068e4:	eba0 000a 	sub.w	r0, r0, sl
 80068e8:	2240      	movs	r2, #64	@ 0x40
 80068ea:	4082      	lsls	r2, r0
 80068ec:	4313      	orrs	r3, r2
 80068ee:	3401      	adds	r4, #1
 80068f0:	9304      	str	r3, [sp, #16]
 80068f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f6:	4829      	ldr	r0, [pc, #164]	@ (800699c <_vfiprintf_r+0x220>)
 80068f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068fc:	2206      	movs	r2, #6
 80068fe:	f7f9 fc87 	bl	8000210 <memchr>
 8006902:	2800      	cmp	r0, #0
 8006904:	d03f      	beq.n	8006986 <_vfiprintf_r+0x20a>
 8006906:	4b26      	ldr	r3, [pc, #152]	@ (80069a0 <_vfiprintf_r+0x224>)
 8006908:	bb1b      	cbnz	r3, 8006952 <_vfiprintf_r+0x1d6>
 800690a:	9b03      	ldr	r3, [sp, #12]
 800690c:	3307      	adds	r3, #7
 800690e:	f023 0307 	bic.w	r3, r3, #7
 8006912:	3308      	adds	r3, #8
 8006914:	9303      	str	r3, [sp, #12]
 8006916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006918:	443b      	add	r3, r7
 800691a:	9309      	str	r3, [sp, #36]	@ 0x24
 800691c:	e76a      	b.n	80067f4 <_vfiprintf_r+0x78>
 800691e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006922:	460c      	mov	r4, r1
 8006924:	2001      	movs	r0, #1
 8006926:	e7a8      	b.n	800687a <_vfiprintf_r+0xfe>
 8006928:	2300      	movs	r3, #0
 800692a:	3401      	adds	r4, #1
 800692c:	9305      	str	r3, [sp, #20]
 800692e:	4619      	mov	r1, r3
 8006930:	f04f 0c0a 	mov.w	ip, #10
 8006934:	4620      	mov	r0, r4
 8006936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800693a:	3a30      	subs	r2, #48	@ 0x30
 800693c:	2a09      	cmp	r2, #9
 800693e:	d903      	bls.n	8006948 <_vfiprintf_r+0x1cc>
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0c6      	beq.n	80068d2 <_vfiprintf_r+0x156>
 8006944:	9105      	str	r1, [sp, #20]
 8006946:	e7c4      	b.n	80068d2 <_vfiprintf_r+0x156>
 8006948:	fb0c 2101 	mla	r1, ip, r1, r2
 800694c:	4604      	mov	r4, r0
 800694e:	2301      	movs	r3, #1
 8006950:	e7f0      	b.n	8006934 <_vfiprintf_r+0x1b8>
 8006952:	ab03      	add	r3, sp, #12
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	462a      	mov	r2, r5
 8006958:	4b12      	ldr	r3, [pc, #72]	@ (80069a4 <_vfiprintf_r+0x228>)
 800695a:	a904      	add	r1, sp, #16
 800695c:	4630      	mov	r0, r6
 800695e:	f3af 8000 	nop.w
 8006962:	4607      	mov	r7, r0
 8006964:	1c78      	adds	r0, r7, #1
 8006966:	d1d6      	bne.n	8006916 <_vfiprintf_r+0x19a>
 8006968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800696a:	07d9      	lsls	r1, r3, #31
 800696c:	d405      	bmi.n	800697a <_vfiprintf_r+0x1fe>
 800696e:	89ab      	ldrh	r3, [r5, #12]
 8006970:	059a      	lsls	r2, r3, #22
 8006972:	d402      	bmi.n	800697a <_vfiprintf_r+0x1fe>
 8006974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006976:	f7ff fcff 	bl	8006378 <__retarget_lock_release_recursive>
 800697a:	89ab      	ldrh	r3, [r5, #12]
 800697c:	065b      	lsls	r3, r3, #25
 800697e:	f53f af1f 	bmi.w	80067c0 <_vfiprintf_r+0x44>
 8006982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006984:	e71e      	b.n	80067c4 <_vfiprintf_r+0x48>
 8006986:	ab03      	add	r3, sp, #12
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	462a      	mov	r2, r5
 800698c:	4b05      	ldr	r3, [pc, #20]	@ (80069a4 <_vfiprintf_r+0x228>)
 800698e:	a904      	add	r1, sp, #16
 8006990:	4630      	mov	r0, r6
 8006992:	f000 f879 	bl	8006a88 <_printf_i>
 8006996:	e7e4      	b.n	8006962 <_vfiprintf_r+0x1e6>
 8006998:	080076cd 	.word	0x080076cd
 800699c:	080076d7 	.word	0x080076d7
 80069a0:	00000000 	.word	0x00000000
 80069a4:	08006757 	.word	0x08006757
 80069a8:	080076d3 	.word	0x080076d3

080069ac <_printf_common>:
 80069ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b0:	4616      	mov	r6, r2
 80069b2:	4698      	mov	r8, r3
 80069b4:	688a      	ldr	r2, [r1, #8]
 80069b6:	690b      	ldr	r3, [r1, #16]
 80069b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069bc:	4293      	cmp	r3, r2
 80069be:	bfb8      	it	lt
 80069c0:	4613      	movlt	r3, r2
 80069c2:	6033      	str	r3, [r6, #0]
 80069c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069c8:	4607      	mov	r7, r0
 80069ca:	460c      	mov	r4, r1
 80069cc:	b10a      	cbz	r2, 80069d2 <_printf_common+0x26>
 80069ce:	3301      	adds	r3, #1
 80069d0:	6033      	str	r3, [r6, #0]
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	0699      	lsls	r1, r3, #26
 80069d6:	bf42      	ittt	mi
 80069d8:	6833      	ldrmi	r3, [r6, #0]
 80069da:	3302      	addmi	r3, #2
 80069dc:	6033      	strmi	r3, [r6, #0]
 80069de:	6825      	ldr	r5, [r4, #0]
 80069e0:	f015 0506 	ands.w	r5, r5, #6
 80069e4:	d106      	bne.n	80069f4 <_printf_common+0x48>
 80069e6:	f104 0a19 	add.w	sl, r4, #25
 80069ea:	68e3      	ldr	r3, [r4, #12]
 80069ec:	6832      	ldr	r2, [r6, #0]
 80069ee:	1a9b      	subs	r3, r3, r2
 80069f0:	42ab      	cmp	r3, r5
 80069f2:	dc26      	bgt.n	8006a42 <_printf_common+0x96>
 80069f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069f8:	6822      	ldr	r2, [r4, #0]
 80069fa:	3b00      	subs	r3, #0
 80069fc:	bf18      	it	ne
 80069fe:	2301      	movne	r3, #1
 8006a00:	0692      	lsls	r2, r2, #26
 8006a02:	d42b      	bmi.n	8006a5c <_printf_common+0xb0>
 8006a04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a08:	4641      	mov	r1, r8
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	47c8      	blx	r9
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d01e      	beq.n	8006a50 <_printf_common+0xa4>
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	6922      	ldr	r2, [r4, #16]
 8006a16:	f003 0306 	and.w	r3, r3, #6
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	bf02      	ittt	eq
 8006a1e:	68e5      	ldreq	r5, [r4, #12]
 8006a20:	6833      	ldreq	r3, [r6, #0]
 8006a22:	1aed      	subeq	r5, r5, r3
 8006a24:	68a3      	ldr	r3, [r4, #8]
 8006a26:	bf0c      	ite	eq
 8006a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a2c:	2500      	movne	r5, #0
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	bfc4      	itt	gt
 8006a32:	1a9b      	subgt	r3, r3, r2
 8006a34:	18ed      	addgt	r5, r5, r3
 8006a36:	2600      	movs	r6, #0
 8006a38:	341a      	adds	r4, #26
 8006a3a:	42b5      	cmp	r5, r6
 8006a3c:	d11a      	bne.n	8006a74 <_printf_common+0xc8>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	e008      	b.n	8006a54 <_printf_common+0xa8>
 8006a42:	2301      	movs	r3, #1
 8006a44:	4652      	mov	r2, sl
 8006a46:	4641      	mov	r1, r8
 8006a48:	4638      	mov	r0, r7
 8006a4a:	47c8      	blx	r9
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d103      	bne.n	8006a58 <_printf_common+0xac>
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295
 8006a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a58:	3501      	adds	r5, #1
 8006a5a:	e7c6      	b.n	80069ea <_printf_common+0x3e>
 8006a5c:	18e1      	adds	r1, r4, r3
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	2030      	movs	r0, #48	@ 0x30
 8006a62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a66:	4422      	add	r2, r4
 8006a68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a70:	3302      	adds	r3, #2
 8006a72:	e7c7      	b.n	8006a04 <_printf_common+0x58>
 8006a74:	2301      	movs	r3, #1
 8006a76:	4622      	mov	r2, r4
 8006a78:	4641      	mov	r1, r8
 8006a7a:	4638      	mov	r0, r7
 8006a7c:	47c8      	blx	r9
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d0e6      	beq.n	8006a50 <_printf_common+0xa4>
 8006a82:	3601      	adds	r6, #1
 8006a84:	e7d9      	b.n	8006a3a <_printf_common+0x8e>
	...

08006a88 <_printf_i>:
 8006a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a8c:	7e0f      	ldrb	r7, [r1, #24]
 8006a8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a90:	2f78      	cmp	r7, #120	@ 0x78
 8006a92:	4691      	mov	r9, r2
 8006a94:	4680      	mov	r8, r0
 8006a96:	460c      	mov	r4, r1
 8006a98:	469a      	mov	sl, r3
 8006a9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a9e:	d807      	bhi.n	8006ab0 <_printf_i+0x28>
 8006aa0:	2f62      	cmp	r7, #98	@ 0x62
 8006aa2:	d80a      	bhi.n	8006aba <_printf_i+0x32>
 8006aa4:	2f00      	cmp	r7, #0
 8006aa6:	f000 80d2 	beq.w	8006c4e <_printf_i+0x1c6>
 8006aaa:	2f58      	cmp	r7, #88	@ 0x58
 8006aac:	f000 80b9 	beq.w	8006c22 <_printf_i+0x19a>
 8006ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ab4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ab8:	e03a      	b.n	8006b30 <_printf_i+0xa8>
 8006aba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006abe:	2b15      	cmp	r3, #21
 8006ac0:	d8f6      	bhi.n	8006ab0 <_printf_i+0x28>
 8006ac2:	a101      	add	r1, pc, #4	@ (adr r1, 8006ac8 <_printf_i+0x40>)
 8006ac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ac8:	08006b21 	.word	0x08006b21
 8006acc:	08006b35 	.word	0x08006b35
 8006ad0:	08006ab1 	.word	0x08006ab1
 8006ad4:	08006ab1 	.word	0x08006ab1
 8006ad8:	08006ab1 	.word	0x08006ab1
 8006adc:	08006ab1 	.word	0x08006ab1
 8006ae0:	08006b35 	.word	0x08006b35
 8006ae4:	08006ab1 	.word	0x08006ab1
 8006ae8:	08006ab1 	.word	0x08006ab1
 8006aec:	08006ab1 	.word	0x08006ab1
 8006af0:	08006ab1 	.word	0x08006ab1
 8006af4:	08006c35 	.word	0x08006c35
 8006af8:	08006b5f 	.word	0x08006b5f
 8006afc:	08006bef 	.word	0x08006bef
 8006b00:	08006ab1 	.word	0x08006ab1
 8006b04:	08006ab1 	.word	0x08006ab1
 8006b08:	08006c57 	.word	0x08006c57
 8006b0c:	08006ab1 	.word	0x08006ab1
 8006b10:	08006b5f 	.word	0x08006b5f
 8006b14:	08006ab1 	.word	0x08006ab1
 8006b18:	08006ab1 	.word	0x08006ab1
 8006b1c:	08006bf7 	.word	0x08006bf7
 8006b20:	6833      	ldr	r3, [r6, #0]
 8006b22:	1d1a      	adds	r2, r3, #4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6032      	str	r2, [r6, #0]
 8006b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b30:	2301      	movs	r3, #1
 8006b32:	e09d      	b.n	8006c70 <_printf_i+0x1e8>
 8006b34:	6833      	ldr	r3, [r6, #0]
 8006b36:	6820      	ldr	r0, [r4, #0]
 8006b38:	1d19      	adds	r1, r3, #4
 8006b3a:	6031      	str	r1, [r6, #0]
 8006b3c:	0606      	lsls	r6, r0, #24
 8006b3e:	d501      	bpl.n	8006b44 <_printf_i+0xbc>
 8006b40:	681d      	ldr	r5, [r3, #0]
 8006b42:	e003      	b.n	8006b4c <_printf_i+0xc4>
 8006b44:	0645      	lsls	r5, r0, #25
 8006b46:	d5fb      	bpl.n	8006b40 <_printf_i+0xb8>
 8006b48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b4c:	2d00      	cmp	r5, #0
 8006b4e:	da03      	bge.n	8006b58 <_printf_i+0xd0>
 8006b50:	232d      	movs	r3, #45	@ 0x2d
 8006b52:	426d      	negs	r5, r5
 8006b54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b58:	4859      	ldr	r0, [pc, #356]	@ (8006cc0 <_printf_i+0x238>)
 8006b5a:	230a      	movs	r3, #10
 8006b5c:	e011      	b.n	8006b82 <_printf_i+0xfa>
 8006b5e:	6821      	ldr	r1, [r4, #0]
 8006b60:	6833      	ldr	r3, [r6, #0]
 8006b62:	0608      	lsls	r0, r1, #24
 8006b64:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b68:	d402      	bmi.n	8006b70 <_printf_i+0xe8>
 8006b6a:	0649      	lsls	r1, r1, #25
 8006b6c:	bf48      	it	mi
 8006b6e:	b2ad      	uxthmi	r5, r5
 8006b70:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b72:	4853      	ldr	r0, [pc, #332]	@ (8006cc0 <_printf_i+0x238>)
 8006b74:	6033      	str	r3, [r6, #0]
 8006b76:	bf14      	ite	ne
 8006b78:	230a      	movne	r3, #10
 8006b7a:	2308      	moveq	r3, #8
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b82:	6866      	ldr	r6, [r4, #4]
 8006b84:	60a6      	str	r6, [r4, #8]
 8006b86:	2e00      	cmp	r6, #0
 8006b88:	bfa2      	ittt	ge
 8006b8a:	6821      	ldrge	r1, [r4, #0]
 8006b8c:	f021 0104 	bicge.w	r1, r1, #4
 8006b90:	6021      	strge	r1, [r4, #0]
 8006b92:	b90d      	cbnz	r5, 8006b98 <_printf_i+0x110>
 8006b94:	2e00      	cmp	r6, #0
 8006b96:	d04b      	beq.n	8006c30 <_printf_i+0x1a8>
 8006b98:	4616      	mov	r6, r2
 8006b9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b9e:	fb03 5711 	mls	r7, r3, r1, r5
 8006ba2:	5dc7      	ldrb	r7, [r0, r7]
 8006ba4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ba8:	462f      	mov	r7, r5
 8006baa:	42bb      	cmp	r3, r7
 8006bac:	460d      	mov	r5, r1
 8006bae:	d9f4      	bls.n	8006b9a <_printf_i+0x112>
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d10b      	bne.n	8006bcc <_printf_i+0x144>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	07df      	lsls	r7, r3, #31
 8006bb8:	d508      	bpl.n	8006bcc <_printf_i+0x144>
 8006bba:	6923      	ldr	r3, [r4, #16]
 8006bbc:	6861      	ldr	r1, [r4, #4]
 8006bbe:	4299      	cmp	r1, r3
 8006bc0:	bfde      	ittt	le
 8006bc2:	2330      	movle	r3, #48	@ 0x30
 8006bc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bcc:	1b92      	subs	r2, r2, r6
 8006bce:	6122      	str	r2, [r4, #16]
 8006bd0:	f8cd a000 	str.w	sl, [sp]
 8006bd4:	464b      	mov	r3, r9
 8006bd6:	aa03      	add	r2, sp, #12
 8006bd8:	4621      	mov	r1, r4
 8006bda:	4640      	mov	r0, r8
 8006bdc:	f7ff fee6 	bl	80069ac <_printf_common>
 8006be0:	3001      	adds	r0, #1
 8006be2:	d14a      	bne.n	8006c7a <_printf_i+0x1f2>
 8006be4:	f04f 30ff 	mov.w	r0, #4294967295
 8006be8:	b004      	add	sp, #16
 8006bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	f043 0320 	orr.w	r3, r3, #32
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	4833      	ldr	r0, [pc, #204]	@ (8006cc4 <_printf_i+0x23c>)
 8006bf8:	2778      	movs	r7, #120	@ 0x78
 8006bfa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	6831      	ldr	r1, [r6, #0]
 8006c02:	061f      	lsls	r7, r3, #24
 8006c04:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c08:	d402      	bmi.n	8006c10 <_printf_i+0x188>
 8006c0a:	065f      	lsls	r7, r3, #25
 8006c0c:	bf48      	it	mi
 8006c0e:	b2ad      	uxthmi	r5, r5
 8006c10:	6031      	str	r1, [r6, #0]
 8006c12:	07d9      	lsls	r1, r3, #31
 8006c14:	bf44      	itt	mi
 8006c16:	f043 0320 	orrmi.w	r3, r3, #32
 8006c1a:	6023      	strmi	r3, [r4, #0]
 8006c1c:	b11d      	cbz	r5, 8006c26 <_printf_i+0x19e>
 8006c1e:	2310      	movs	r3, #16
 8006c20:	e7ac      	b.n	8006b7c <_printf_i+0xf4>
 8006c22:	4827      	ldr	r0, [pc, #156]	@ (8006cc0 <_printf_i+0x238>)
 8006c24:	e7e9      	b.n	8006bfa <_printf_i+0x172>
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	f023 0320 	bic.w	r3, r3, #32
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	e7f6      	b.n	8006c1e <_printf_i+0x196>
 8006c30:	4616      	mov	r6, r2
 8006c32:	e7bd      	b.n	8006bb0 <_printf_i+0x128>
 8006c34:	6833      	ldr	r3, [r6, #0]
 8006c36:	6825      	ldr	r5, [r4, #0]
 8006c38:	6961      	ldr	r1, [r4, #20]
 8006c3a:	1d18      	adds	r0, r3, #4
 8006c3c:	6030      	str	r0, [r6, #0]
 8006c3e:	062e      	lsls	r6, r5, #24
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	d501      	bpl.n	8006c48 <_printf_i+0x1c0>
 8006c44:	6019      	str	r1, [r3, #0]
 8006c46:	e002      	b.n	8006c4e <_printf_i+0x1c6>
 8006c48:	0668      	lsls	r0, r5, #25
 8006c4a:	d5fb      	bpl.n	8006c44 <_printf_i+0x1bc>
 8006c4c:	8019      	strh	r1, [r3, #0]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	6123      	str	r3, [r4, #16]
 8006c52:	4616      	mov	r6, r2
 8006c54:	e7bc      	b.n	8006bd0 <_printf_i+0x148>
 8006c56:	6833      	ldr	r3, [r6, #0]
 8006c58:	1d1a      	adds	r2, r3, #4
 8006c5a:	6032      	str	r2, [r6, #0]
 8006c5c:	681e      	ldr	r6, [r3, #0]
 8006c5e:	6862      	ldr	r2, [r4, #4]
 8006c60:	2100      	movs	r1, #0
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7f9 fad4 	bl	8000210 <memchr>
 8006c68:	b108      	cbz	r0, 8006c6e <_printf_i+0x1e6>
 8006c6a:	1b80      	subs	r0, r0, r6
 8006c6c:	6060      	str	r0, [r4, #4]
 8006c6e:	6863      	ldr	r3, [r4, #4]
 8006c70:	6123      	str	r3, [r4, #16]
 8006c72:	2300      	movs	r3, #0
 8006c74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c78:	e7aa      	b.n	8006bd0 <_printf_i+0x148>
 8006c7a:	6923      	ldr	r3, [r4, #16]
 8006c7c:	4632      	mov	r2, r6
 8006c7e:	4649      	mov	r1, r9
 8006c80:	4640      	mov	r0, r8
 8006c82:	47d0      	blx	sl
 8006c84:	3001      	adds	r0, #1
 8006c86:	d0ad      	beq.n	8006be4 <_printf_i+0x15c>
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	079b      	lsls	r3, r3, #30
 8006c8c:	d413      	bmi.n	8006cb6 <_printf_i+0x22e>
 8006c8e:	68e0      	ldr	r0, [r4, #12]
 8006c90:	9b03      	ldr	r3, [sp, #12]
 8006c92:	4298      	cmp	r0, r3
 8006c94:	bfb8      	it	lt
 8006c96:	4618      	movlt	r0, r3
 8006c98:	e7a6      	b.n	8006be8 <_printf_i+0x160>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	4632      	mov	r2, r6
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	47d0      	blx	sl
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d09d      	beq.n	8006be4 <_printf_i+0x15c>
 8006ca8:	3501      	adds	r5, #1
 8006caa:	68e3      	ldr	r3, [r4, #12]
 8006cac:	9903      	ldr	r1, [sp, #12]
 8006cae:	1a5b      	subs	r3, r3, r1
 8006cb0:	42ab      	cmp	r3, r5
 8006cb2:	dcf2      	bgt.n	8006c9a <_printf_i+0x212>
 8006cb4:	e7eb      	b.n	8006c8e <_printf_i+0x206>
 8006cb6:	2500      	movs	r5, #0
 8006cb8:	f104 0619 	add.w	r6, r4, #25
 8006cbc:	e7f5      	b.n	8006caa <_printf_i+0x222>
 8006cbe:	bf00      	nop
 8006cc0:	080076de 	.word	0x080076de
 8006cc4:	080076ef 	.word	0x080076ef

08006cc8 <__sflush_r>:
 8006cc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd0:	0716      	lsls	r6, r2, #28
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	460c      	mov	r4, r1
 8006cd6:	d454      	bmi.n	8006d82 <__sflush_r+0xba>
 8006cd8:	684b      	ldr	r3, [r1, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	dc02      	bgt.n	8006ce4 <__sflush_r+0x1c>
 8006cde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	dd48      	ble.n	8006d76 <__sflush_r+0xae>
 8006ce4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ce6:	2e00      	cmp	r6, #0
 8006ce8:	d045      	beq.n	8006d76 <__sflush_r+0xae>
 8006cea:	2300      	movs	r3, #0
 8006cec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006cf0:	682f      	ldr	r7, [r5, #0]
 8006cf2:	6a21      	ldr	r1, [r4, #32]
 8006cf4:	602b      	str	r3, [r5, #0]
 8006cf6:	d030      	beq.n	8006d5a <__sflush_r+0x92>
 8006cf8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	0759      	lsls	r1, r3, #29
 8006cfe:	d505      	bpl.n	8006d0c <__sflush_r+0x44>
 8006d00:	6863      	ldr	r3, [r4, #4]
 8006d02:	1ad2      	subs	r2, r2, r3
 8006d04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d06:	b10b      	cbz	r3, 8006d0c <__sflush_r+0x44>
 8006d08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d0a:	1ad2      	subs	r2, r2, r3
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d10:	6a21      	ldr	r1, [r4, #32]
 8006d12:	4628      	mov	r0, r5
 8006d14:	47b0      	blx	r6
 8006d16:	1c43      	adds	r3, r0, #1
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	d106      	bne.n	8006d2a <__sflush_r+0x62>
 8006d1c:	6829      	ldr	r1, [r5, #0]
 8006d1e:	291d      	cmp	r1, #29
 8006d20:	d82b      	bhi.n	8006d7a <__sflush_r+0xb2>
 8006d22:	4a2a      	ldr	r2, [pc, #168]	@ (8006dcc <__sflush_r+0x104>)
 8006d24:	410a      	asrs	r2, r1
 8006d26:	07d6      	lsls	r6, r2, #31
 8006d28:	d427      	bmi.n	8006d7a <__sflush_r+0xb2>
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	6062      	str	r2, [r4, #4]
 8006d2e:	04d9      	lsls	r1, r3, #19
 8006d30:	6922      	ldr	r2, [r4, #16]
 8006d32:	6022      	str	r2, [r4, #0]
 8006d34:	d504      	bpl.n	8006d40 <__sflush_r+0x78>
 8006d36:	1c42      	adds	r2, r0, #1
 8006d38:	d101      	bne.n	8006d3e <__sflush_r+0x76>
 8006d3a:	682b      	ldr	r3, [r5, #0]
 8006d3c:	b903      	cbnz	r3, 8006d40 <__sflush_r+0x78>
 8006d3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d42:	602f      	str	r7, [r5, #0]
 8006d44:	b1b9      	cbz	r1, 8006d76 <__sflush_r+0xae>
 8006d46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d4a:	4299      	cmp	r1, r3
 8006d4c:	d002      	beq.n	8006d54 <__sflush_r+0x8c>
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f7ff fb48 	bl	80063e4 <_free_r>
 8006d54:	2300      	movs	r3, #0
 8006d56:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d58:	e00d      	b.n	8006d76 <__sflush_r+0xae>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	47b0      	blx	r6
 8006d60:	4602      	mov	r2, r0
 8006d62:	1c50      	adds	r0, r2, #1
 8006d64:	d1c9      	bne.n	8006cfa <__sflush_r+0x32>
 8006d66:	682b      	ldr	r3, [r5, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0c6      	beq.n	8006cfa <__sflush_r+0x32>
 8006d6c:	2b1d      	cmp	r3, #29
 8006d6e:	d001      	beq.n	8006d74 <__sflush_r+0xac>
 8006d70:	2b16      	cmp	r3, #22
 8006d72:	d11e      	bne.n	8006db2 <__sflush_r+0xea>
 8006d74:	602f      	str	r7, [r5, #0]
 8006d76:	2000      	movs	r0, #0
 8006d78:	e022      	b.n	8006dc0 <__sflush_r+0xf8>
 8006d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d7e:	b21b      	sxth	r3, r3
 8006d80:	e01b      	b.n	8006dba <__sflush_r+0xf2>
 8006d82:	690f      	ldr	r7, [r1, #16]
 8006d84:	2f00      	cmp	r7, #0
 8006d86:	d0f6      	beq.n	8006d76 <__sflush_r+0xae>
 8006d88:	0793      	lsls	r3, r2, #30
 8006d8a:	680e      	ldr	r6, [r1, #0]
 8006d8c:	bf08      	it	eq
 8006d8e:	694b      	ldreq	r3, [r1, #20]
 8006d90:	600f      	str	r7, [r1, #0]
 8006d92:	bf18      	it	ne
 8006d94:	2300      	movne	r3, #0
 8006d96:	eba6 0807 	sub.w	r8, r6, r7
 8006d9a:	608b      	str	r3, [r1, #8]
 8006d9c:	f1b8 0f00 	cmp.w	r8, #0
 8006da0:	dde9      	ble.n	8006d76 <__sflush_r+0xae>
 8006da2:	6a21      	ldr	r1, [r4, #32]
 8006da4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006da6:	4643      	mov	r3, r8
 8006da8:	463a      	mov	r2, r7
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b0      	blx	r6
 8006dae:	2800      	cmp	r0, #0
 8006db0:	dc08      	bgt.n	8006dc4 <__sflush_r+0xfc>
 8006db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dba:	81a3      	strh	r3, [r4, #12]
 8006dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dc4:	4407      	add	r7, r0
 8006dc6:	eba8 0800 	sub.w	r8, r8, r0
 8006dca:	e7e7      	b.n	8006d9c <__sflush_r+0xd4>
 8006dcc:	dfbffffe 	.word	0xdfbffffe

08006dd0 <_fflush_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	690b      	ldr	r3, [r1, #16]
 8006dd4:	4605      	mov	r5, r0
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	b913      	cbnz	r3, 8006de0 <_fflush_r+0x10>
 8006dda:	2500      	movs	r5, #0
 8006ddc:	4628      	mov	r0, r5
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	b118      	cbz	r0, 8006dea <_fflush_r+0x1a>
 8006de2:	6a03      	ldr	r3, [r0, #32]
 8006de4:	b90b      	cbnz	r3, 8006dea <_fflush_r+0x1a>
 8006de6:	f7ff f877 	bl	8005ed8 <__sinit>
 8006dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0f3      	beq.n	8006dda <_fflush_r+0xa>
 8006df2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006df4:	07d0      	lsls	r0, r2, #31
 8006df6:	d404      	bmi.n	8006e02 <_fflush_r+0x32>
 8006df8:	0599      	lsls	r1, r3, #22
 8006dfa:	d402      	bmi.n	8006e02 <_fflush_r+0x32>
 8006dfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dfe:	f7ff faba 	bl	8006376 <__retarget_lock_acquire_recursive>
 8006e02:	4628      	mov	r0, r5
 8006e04:	4621      	mov	r1, r4
 8006e06:	f7ff ff5f 	bl	8006cc8 <__sflush_r>
 8006e0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e0c:	07da      	lsls	r2, r3, #31
 8006e0e:	4605      	mov	r5, r0
 8006e10:	d4e4      	bmi.n	8006ddc <_fflush_r+0xc>
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	059b      	lsls	r3, r3, #22
 8006e16:	d4e1      	bmi.n	8006ddc <_fflush_r+0xc>
 8006e18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e1a:	f7ff faad 	bl	8006378 <__retarget_lock_release_recursive>
 8006e1e:	e7dd      	b.n	8006ddc <_fflush_r+0xc>

08006e20 <fiprintf>:
 8006e20:	b40e      	push	{r1, r2, r3}
 8006e22:	b503      	push	{r0, r1, lr}
 8006e24:	4601      	mov	r1, r0
 8006e26:	ab03      	add	r3, sp, #12
 8006e28:	4805      	ldr	r0, [pc, #20]	@ (8006e40 <fiprintf+0x20>)
 8006e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e2e:	6800      	ldr	r0, [r0, #0]
 8006e30:	9301      	str	r3, [sp, #4]
 8006e32:	f7ff fca3 	bl	800677c <_vfiprintf_r>
 8006e36:	b002      	add	sp, #8
 8006e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e3c:	b003      	add	sp, #12
 8006e3e:	4770      	bx	lr
 8006e40:	20000090 	.word	0x20000090

08006e44 <__swhatbuf_r>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	460c      	mov	r4, r1
 8006e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4c:	2900      	cmp	r1, #0
 8006e4e:	b096      	sub	sp, #88	@ 0x58
 8006e50:	4615      	mov	r5, r2
 8006e52:	461e      	mov	r6, r3
 8006e54:	da0d      	bge.n	8006e72 <__swhatbuf_r+0x2e>
 8006e56:	89a3      	ldrh	r3, [r4, #12]
 8006e58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e5c:	f04f 0100 	mov.w	r1, #0
 8006e60:	bf14      	ite	ne
 8006e62:	2340      	movne	r3, #64	@ 0x40
 8006e64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e68:	2000      	movs	r0, #0
 8006e6a:	6031      	str	r1, [r6, #0]
 8006e6c:	602b      	str	r3, [r5, #0]
 8006e6e:	b016      	add	sp, #88	@ 0x58
 8006e70:	bd70      	pop	{r4, r5, r6, pc}
 8006e72:	466a      	mov	r2, sp
 8006e74:	f000 f896 	bl	8006fa4 <_fstat_r>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	dbec      	blt.n	8006e56 <__swhatbuf_r+0x12>
 8006e7c:	9901      	ldr	r1, [sp, #4]
 8006e7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e86:	4259      	negs	r1, r3
 8006e88:	4159      	adcs	r1, r3
 8006e8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e8e:	e7eb      	b.n	8006e68 <__swhatbuf_r+0x24>

08006e90 <__smakebuf_r>:
 8006e90:	898b      	ldrh	r3, [r1, #12]
 8006e92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e94:	079d      	lsls	r5, r3, #30
 8006e96:	4606      	mov	r6, r0
 8006e98:	460c      	mov	r4, r1
 8006e9a:	d507      	bpl.n	8006eac <__smakebuf_r+0x1c>
 8006e9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	6123      	str	r3, [r4, #16]
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	6163      	str	r3, [r4, #20]
 8006ea8:	b003      	add	sp, #12
 8006eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eac:	ab01      	add	r3, sp, #4
 8006eae:	466a      	mov	r2, sp
 8006eb0:	f7ff ffc8 	bl	8006e44 <__swhatbuf_r>
 8006eb4:	9f00      	ldr	r7, [sp, #0]
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	4639      	mov	r1, r7
 8006eba:	4630      	mov	r0, r6
 8006ebc:	f7fe feb6 	bl	8005c2c <_malloc_r>
 8006ec0:	b948      	cbnz	r0, 8006ed6 <__smakebuf_r+0x46>
 8006ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec6:	059a      	lsls	r2, r3, #22
 8006ec8:	d4ee      	bmi.n	8006ea8 <__smakebuf_r+0x18>
 8006eca:	f023 0303 	bic.w	r3, r3, #3
 8006ece:	f043 0302 	orr.w	r3, r3, #2
 8006ed2:	81a3      	strh	r3, [r4, #12]
 8006ed4:	e7e2      	b.n	8006e9c <__smakebuf_r+0xc>
 8006ed6:	89a3      	ldrh	r3, [r4, #12]
 8006ed8:	6020      	str	r0, [r4, #0]
 8006eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ede:	81a3      	strh	r3, [r4, #12]
 8006ee0:	9b01      	ldr	r3, [sp, #4]
 8006ee2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ee6:	b15b      	cbz	r3, 8006f00 <__smakebuf_r+0x70>
 8006ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eec:	4630      	mov	r0, r6
 8006eee:	f000 f86b 	bl	8006fc8 <_isatty_r>
 8006ef2:	b128      	cbz	r0, 8006f00 <__smakebuf_r+0x70>
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	f023 0303 	bic.w	r3, r3, #3
 8006efa:	f043 0301 	orr.w	r3, r3, #1
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	431d      	orrs	r5, r3
 8006f04:	81a5      	strh	r5, [r4, #12]
 8006f06:	e7cf      	b.n	8006ea8 <__smakebuf_r+0x18>

08006f08 <_putc_r>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	460d      	mov	r5, r1
 8006f0c:	4614      	mov	r4, r2
 8006f0e:	4606      	mov	r6, r0
 8006f10:	b118      	cbz	r0, 8006f1a <_putc_r+0x12>
 8006f12:	6a03      	ldr	r3, [r0, #32]
 8006f14:	b90b      	cbnz	r3, 8006f1a <_putc_r+0x12>
 8006f16:	f7fe ffdf 	bl	8005ed8 <__sinit>
 8006f1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f1c:	07d8      	lsls	r0, r3, #31
 8006f1e:	d405      	bmi.n	8006f2c <_putc_r+0x24>
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	0599      	lsls	r1, r3, #22
 8006f24:	d402      	bmi.n	8006f2c <_putc_r+0x24>
 8006f26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f28:	f7ff fa25 	bl	8006376 <__retarget_lock_acquire_recursive>
 8006f2c:	68a3      	ldr	r3, [r4, #8]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	60a3      	str	r3, [r4, #8]
 8006f34:	da05      	bge.n	8006f42 <_putc_r+0x3a>
 8006f36:	69a2      	ldr	r2, [r4, #24]
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	db12      	blt.n	8006f62 <_putc_r+0x5a>
 8006f3c:	b2eb      	uxtb	r3, r5
 8006f3e:	2b0a      	cmp	r3, #10
 8006f40:	d00f      	beq.n	8006f62 <_putc_r+0x5a>
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	1c5a      	adds	r2, r3, #1
 8006f46:	6022      	str	r2, [r4, #0]
 8006f48:	701d      	strb	r5, [r3, #0]
 8006f4a:	b2ed      	uxtb	r5, r5
 8006f4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f4e:	07da      	lsls	r2, r3, #31
 8006f50:	d405      	bmi.n	8006f5e <_putc_r+0x56>
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	059b      	lsls	r3, r3, #22
 8006f56:	d402      	bmi.n	8006f5e <_putc_r+0x56>
 8006f58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f5a:	f7ff fa0d 	bl	8006378 <__retarget_lock_release_recursive>
 8006f5e:	4628      	mov	r0, r5
 8006f60:	bd70      	pop	{r4, r5, r6, pc}
 8006f62:	4629      	mov	r1, r5
 8006f64:	4622      	mov	r2, r4
 8006f66:	4630      	mov	r0, r6
 8006f68:	f7ff f8c7 	bl	80060fa <__swbuf_r>
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	e7ed      	b.n	8006f4c <_putc_r+0x44>

08006f70 <memmove>:
 8006f70:	4288      	cmp	r0, r1
 8006f72:	b510      	push	{r4, lr}
 8006f74:	eb01 0402 	add.w	r4, r1, r2
 8006f78:	d902      	bls.n	8006f80 <memmove+0x10>
 8006f7a:	4284      	cmp	r4, r0
 8006f7c:	4623      	mov	r3, r4
 8006f7e:	d807      	bhi.n	8006f90 <memmove+0x20>
 8006f80:	1e43      	subs	r3, r0, #1
 8006f82:	42a1      	cmp	r1, r4
 8006f84:	d008      	beq.n	8006f98 <memmove+0x28>
 8006f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f8e:	e7f8      	b.n	8006f82 <memmove+0x12>
 8006f90:	4402      	add	r2, r0
 8006f92:	4601      	mov	r1, r0
 8006f94:	428a      	cmp	r2, r1
 8006f96:	d100      	bne.n	8006f9a <memmove+0x2a>
 8006f98:	bd10      	pop	{r4, pc}
 8006f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fa2:	e7f7      	b.n	8006f94 <memmove+0x24>

08006fa4 <_fstat_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4d07      	ldr	r5, [pc, #28]	@ (8006fc4 <_fstat_r+0x20>)
 8006fa8:	2300      	movs	r3, #0
 8006faa:	4604      	mov	r4, r0
 8006fac:	4608      	mov	r0, r1
 8006fae:	4611      	mov	r1, r2
 8006fb0:	602b      	str	r3, [r5, #0]
 8006fb2:	f7fa ff3b 	bl	8001e2c <_fstat>
 8006fb6:	1c43      	adds	r3, r0, #1
 8006fb8:	d102      	bne.n	8006fc0 <_fstat_r+0x1c>
 8006fba:	682b      	ldr	r3, [r5, #0]
 8006fbc:	b103      	cbz	r3, 8006fc0 <_fstat_r+0x1c>
 8006fbe:	6023      	str	r3, [r4, #0]
 8006fc0:	bd38      	pop	{r3, r4, r5, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20005a24 	.word	0x20005a24

08006fc8 <_isatty_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4d06      	ldr	r5, [pc, #24]	@ (8006fe4 <_isatty_r+0x1c>)
 8006fcc:	2300      	movs	r3, #0
 8006fce:	4604      	mov	r4, r0
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	602b      	str	r3, [r5, #0]
 8006fd4:	f7fa ff3a 	bl	8001e4c <_isatty>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d102      	bne.n	8006fe2 <_isatty_r+0x1a>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	b103      	cbz	r3, 8006fe2 <_isatty_r+0x1a>
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	20005a24 	.word	0x20005a24

08006fe8 <abort>:
 8006fe8:	b508      	push	{r3, lr}
 8006fea:	2006      	movs	r0, #6
 8006fec:	f000 f85a 	bl	80070a4 <raise>
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	f7fa fecb 	bl	8001d8c <_exit>

08006ff6 <_realloc_r>:
 8006ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	4615      	mov	r5, r2
 8006ffe:	460c      	mov	r4, r1
 8007000:	b921      	cbnz	r1, 800700c <_realloc_r+0x16>
 8007002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007006:	4611      	mov	r1, r2
 8007008:	f7fe be10 	b.w	8005c2c <_malloc_r>
 800700c:	b92a      	cbnz	r2, 800701a <_realloc_r+0x24>
 800700e:	f7ff f9e9 	bl	80063e4 <_free_r>
 8007012:	2400      	movs	r4, #0
 8007014:	4620      	mov	r0, r4
 8007016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800701a:	f000 f85f 	bl	80070dc <_malloc_usable_size_r>
 800701e:	4285      	cmp	r5, r0
 8007020:	4606      	mov	r6, r0
 8007022:	d802      	bhi.n	800702a <_realloc_r+0x34>
 8007024:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007028:	d8f4      	bhi.n	8007014 <_realloc_r+0x1e>
 800702a:	4629      	mov	r1, r5
 800702c:	4640      	mov	r0, r8
 800702e:	f7fe fdfd 	bl	8005c2c <_malloc_r>
 8007032:	4607      	mov	r7, r0
 8007034:	2800      	cmp	r0, #0
 8007036:	d0ec      	beq.n	8007012 <_realloc_r+0x1c>
 8007038:	42b5      	cmp	r5, r6
 800703a:	462a      	mov	r2, r5
 800703c:	4621      	mov	r1, r4
 800703e:	bf28      	it	cs
 8007040:	4632      	movcs	r2, r6
 8007042:	f7ff f9a2 	bl	800638a <memcpy>
 8007046:	4621      	mov	r1, r4
 8007048:	4640      	mov	r0, r8
 800704a:	f7ff f9cb 	bl	80063e4 <_free_r>
 800704e:	463c      	mov	r4, r7
 8007050:	e7e0      	b.n	8007014 <_realloc_r+0x1e>

08007052 <_raise_r>:
 8007052:	291f      	cmp	r1, #31
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	4605      	mov	r5, r0
 8007058:	460c      	mov	r4, r1
 800705a:	d904      	bls.n	8007066 <_raise_r+0x14>
 800705c:	2316      	movs	r3, #22
 800705e:	6003      	str	r3, [r0, #0]
 8007060:	f04f 30ff 	mov.w	r0, #4294967295
 8007064:	bd38      	pop	{r3, r4, r5, pc}
 8007066:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007068:	b112      	cbz	r2, 8007070 <_raise_r+0x1e>
 800706a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800706e:	b94b      	cbnz	r3, 8007084 <_raise_r+0x32>
 8007070:	4628      	mov	r0, r5
 8007072:	f000 f831 	bl	80070d8 <_getpid_r>
 8007076:	4622      	mov	r2, r4
 8007078:	4601      	mov	r1, r0
 800707a:	4628      	mov	r0, r5
 800707c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007080:	f000 b818 	b.w	80070b4 <_kill_r>
 8007084:	2b01      	cmp	r3, #1
 8007086:	d00a      	beq.n	800709e <_raise_r+0x4c>
 8007088:	1c59      	adds	r1, r3, #1
 800708a:	d103      	bne.n	8007094 <_raise_r+0x42>
 800708c:	2316      	movs	r3, #22
 800708e:	6003      	str	r3, [r0, #0]
 8007090:	2001      	movs	r0, #1
 8007092:	e7e7      	b.n	8007064 <_raise_r+0x12>
 8007094:	2100      	movs	r1, #0
 8007096:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800709a:	4620      	mov	r0, r4
 800709c:	4798      	blx	r3
 800709e:	2000      	movs	r0, #0
 80070a0:	e7e0      	b.n	8007064 <_raise_r+0x12>
	...

080070a4 <raise>:
 80070a4:	4b02      	ldr	r3, [pc, #8]	@ (80070b0 <raise+0xc>)
 80070a6:	4601      	mov	r1, r0
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	f7ff bfd2 	b.w	8007052 <_raise_r>
 80070ae:	bf00      	nop
 80070b0:	20000090 	.word	0x20000090

080070b4 <_kill_r>:
 80070b4:	b538      	push	{r3, r4, r5, lr}
 80070b6:	4d07      	ldr	r5, [pc, #28]	@ (80070d4 <_kill_r+0x20>)
 80070b8:	2300      	movs	r3, #0
 80070ba:	4604      	mov	r4, r0
 80070bc:	4608      	mov	r0, r1
 80070be:	4611      	mov	r1, r2
 80070c0:	602b      	str	r3, [r5, #0]
 80070c2:	f7fa fe53 	bl	8001d6c <_kill>
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	d102      	bne.n	80070d0 <_kill_r+0x1c>
 80070ca:	682b      	ldr	r3, [r5, #0]
 80070cc:	b103      	cbz	r3, 80070d0 <_kill_r+0x1c>
 80070ce:	6023      	str	r3, [r4, #0]
 80070d0:	bd38      	pop	{r3, r4, r5, pc}
 80070d2:	bf00      	nop
 80070d4:	20005a24 	.word	0x20005a24

080070d8 <_getpid_r>:
 80070d8:	f7fa be40 	b.w	8001d5c <_getpid>

080070dc <_malloc_usable_size_r>:
 80070dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070e0:	1f18      	subs	r0, r3, #4
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	bfbc      	itt	lt
 80070e6:	580b      	ldrlt	r3, [r1, r0]
 80070e8:	18c0      	addlt	r0, r0, r3
 80070ea:	4770      	bx	lr

080070ec <_init>:
 80070ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ee:	bf00      	nop
 80070f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f2:	bc08      	pop	{r3}
 80070f4:	469e      	mov	lr, r3
 80070f6:	4770      	bx	lr

080070f8 <_fini>:
 80070f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fa:	bf00      	nop
 80070fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fe:	bc08      	pop	{r3}
 8007100:	469e      	mov	lr, r3
 8007102:	4770      	bx	lr
